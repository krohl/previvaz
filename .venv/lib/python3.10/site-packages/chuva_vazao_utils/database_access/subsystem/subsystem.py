from typing import List, Union
from functools import lru_cache

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.entities.subsystem.subsytem import Subsystem, SubsystemApi
from chuva_vazao_utils.database_access.query_builder import QueryBuilder


class SubsystemDatabaseApi(metaclass_resolver(SubsystemApi, TableBase)):
    _query_builder = QueryBuilder('subsistema')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, s: dict) -> Subsystem:
        return Subsystem(
            s.get('id_subsistema'),
            s.get('descricao'),
            s.get('sigla'),
        )

    @classmethod
    def select(cls, conditions: dict) -> List[Subsystem]:
        columns = [
            'id_subsistema',
            'descricao',
            'sigla'
        ]
        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(s) for s in bd_entities]

    @classmethod
    @lru_cache(maxsize=32)
    def fetch_all(cls) -> List[Subsystem]:
        return cls.select({})

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[Subsystem, None]:
        subsystem = cls.fetch_all()
        return next((s for s in subsystem if s.id == id), None)
