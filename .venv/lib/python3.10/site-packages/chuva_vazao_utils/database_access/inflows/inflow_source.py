from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource, InflowSourceApi, InflowSourceMenu


class InflowSourceDatabaseApi(metaclass_resolver(InflowSourceApi, TableBase)):
    _query_builder = QueryBuilder('inflow_source')
    _database = RiverDatabase

    @classmethod
    @lru_cache(maxsize=4)
    def fetch_all(cls) -> List[InflowSource]:
        columns = ['id_inflow_source', 'name_inflow_source']

        bd_entities = cls.select(columns, where={})

        return [InflowSource(entity['id_inflow_source'], entity['name_inflow_source']) for entity in bd_entities]

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[InflowSource, None]:
        sources = cls.fetch_all()
        return next((source for source in sources if source.id == id), None)

    @classmethod
    def fetch_by_name(cls, name: str) -> Union[InflowSource, None]:
        sources = cls.fetch_all()
        return next((source for source in sources if source.name == name), None)

    @classmethod
    def fetch_inflow_source(cls, inflow_source: InflowSourceMenu) -> Union[InflowSource, None]:
        return cls.fetch_by_id(inflow_source.value)
