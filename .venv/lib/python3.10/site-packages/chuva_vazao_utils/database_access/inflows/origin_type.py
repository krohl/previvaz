from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.entities.inflow.origin_type import OriginType, OriginTypeApi, OriginTypeMenu
from chuva_vazao_utils.database_access.query_builder import QueryBuilder


class OriginTypeDatabaseApi(metaclass_resolver(OriginTypeApi, TableBase)):
    _query_builder = QueryBuilder('origin_type')
    _database = RiverDatabase

    @classmethod
    @lru_cache(maxsize=4)
    def fetch_all(cls) -> List[OriginType]:
        columns = ['id_origin_type', 'name_origin_type']
        bd_entities = cls.select(columns, where={})

        return [
            OriginType(
                entity['id_origin_type'],
                entity['name_origin_type'],
            )
            for entity in bd_entities
        ]

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[OriginType, None]:
        origins = cls.fetch_all()
        return next((origin for origin in origins if origin.id == id), None)

    @classmethod
    def fetch_by_name(cls, name: str) -> Union[OriginType, None]:
        origins = cls.fetch_all()
        return next((origin for origin in origins if origin.name == name), None)

    @classmethod
    def fetch_origin_type(cls, inflow_origin: OriginTypeMenu) -> Union[OriginType, None]:
        return cls.fetch_by_id(inflow_origin.value)
