from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType, InflowTypeApi, InflowTypeMenu


class InflowTypeDatabaseApi(metaclass_resolver(InflowTypeApi, TableBase)):
    _query_builder = QueryBuilder('type_inflow')
    _database = RiverDatabase

    @classmethod
    @lru_cache(maxsize=4)
    def fetch_all(cls) -> List[InflowType]:
        columns = ['id_type_inflow', 'name_type_inflow']
        condition = {'end_date': None}

        bd_entities = cls.select(columns, where=condition)

        return [InflowType(entity['id_type_inflow'], entity['name_type_inflow']) for entity in bd_entities]

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[InflowType, None]:
        inflow_types = cls.fetch_all()
        return next((inflow_type for inflow_type in inflow_types if inflow_type.id == id), None)

    @classmethod
    def fetch_by_name(cls, name: str) -> Union[InflowType, None]:
        inflow_types = cls.fetch_all()
        return next((inflow_type for inflow_type in inflow_types if inflow_type.name == name), None)

    @classmethod
    def fetch_inflow_type(cls, inflow_type: InflowTypeMenu) -> Union[InflowType, None]:
        return cls.fetch_by_id(inflow_type.value)
