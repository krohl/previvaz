from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.utils.dateutils import get_now
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.database_access.subsystem.subsystem import SubsystemDatabaseApi
from chuva_vazao_utils.entities.projecao_earm.projecao_earm import ProjecaoEarm, ProjecaoEarmApi


class ProjecaoEarmDatabaseApi(metaclass_resolver(ProjecaoEarmApi, TableBase)):
    _query_builder = QueryBuilder('projecao_earm')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, projecao_earm: dict) -> ProjecaoEarm:
        return ProjecaoEarm(
            date=projecao_earm.get('date'),
            origin=OriginTypeDatabaseApi.fetch_by_id(projecao_earm.get('id_origin_type')),
            subsistema=SubsystemDatabaseApi.fetch_by_id(projecao_earm.get('id_subsistema')),
            delta_final=projecao_earm.get('delta_final'),
            delta_final_perc=projecao_earm.get('delta_final_perc'),
            earm_final_perc=projecao_earm.get('earm_final_perc'),
            id_rodada_smap=projecao_earm.get('id_rodada_smap'),
        )

    @classmethod
    def select(cls, conditions: dict) -> List[ProjecaoEarm]:
        columns = [
            'id_projecao_earm',
            'date',
            'delta_final',
            'delta_final_perc',
            'earm_final_perc',
            'id_rodada_smap',
            'id_subsistema',
            'id_origin_type',
        ]
        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(s) for s in bd_entities]

    @classmethod
    def persist(cls, projecao_earm_list: Union[ProjecaoEarm, List[ProjecaoEarm]], auto_commit: bool = True):
        if isinstance(projecao_earm_list, ProjecaoEarm):
            projecao_earm_list = [projecao_earm_list]

        db_data = [
            {
                'date': projecao_earm.date,
                'delta_final': projecao_earm.delta_final,
                'delta_final_perc': projecao_earm.delta_final_perc,
                'earm_final_perc': projecao_earm.earm_final_perc,
                'id_rodada_smap': projecao_earm.id_rodada_smap,
                'id_subsistema': projecao_earm.subsistema.id,
                'id_origin_type': projecao_earm.origin.id,
                'begin_date': get_now()
            }
            for projecao_earm in projecao_earm_list
        ]

        cls.insert(db_data, auto_commit=auto_commit)
