from abc import ABC, abstractmethod
from functools import lru_cache
from typing import List

from chuva_vazao_utils.connection import Database
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.apis.chvz_entity import ChVzEntity


class BaseDatabaseApi(metaclass_resolver(TableBase, ABC)):
    # class BaseDatabaseApi(TableBase): # para UML
    _query_builder: QueryBuilder
    _database: Database
    _select_columns: List[str]

    @classmethod
    @abstractmethod
    def from_dict(cls, bd_entity: dict) -> ChVzEntity:
        raise NotImplementedError

    @classmethod
    @abstractmethod
    def get_default_select_conditions(cls) -> dict:
        raise NotImplementedError

    @classmethod
    def select(cls, conditions: dict) -> List[ChVzEntity]:
        bd_entities = super().select(cls._select_columns, where=conditions)
        return [cls.from_dict(bd_entity) for bd_entity in bd_entities]

    @classmethod
    @lru_cache(maxsize=4)
    def fetch_all(cls) -> List[ChVzEntity]:
        return cls.select(cls.get_default_select_conditions())
