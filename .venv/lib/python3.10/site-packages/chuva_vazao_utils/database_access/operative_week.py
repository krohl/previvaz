from datetime import date
from functools import lru_cache

from chuva_vazao_utils.connection import SisCadDatabase
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.entities.operative_week import SemanaOperativa, SemanaOperativaApi, SemanaOperativaFactory


class SemanaOperativaSqlApi(metaclass_resolver(SemanaOperativaApi, TableBase)):
    _query_builder = QueryBuilder('CAD_SMAN_OP')
    _database = SisCadDatabase

    @classmethod
    @lru_cache(maxsize=64)
    def fetch_by_id(cls, id: int) -> SemanaOperativa:
        columns = ['INI_KEY']
        conditions = {'SMAN_OP_KEY': id}
        op_week_bd = cls.select(columns, where=conditions)

        if not op_week_bd:
            raise EntityNotFound(id)
        begin_date = op_week_bd[0]['INI_KEY']
        return SemanaOperativaFactory.create_from_date(begin_date)

    @classmethod
    def fetch_id_given_semana_operativa(cls, op_week: SemanaOperativa) -> int:
        return cls._fetch_id_given_ini_date(op_week.begin_date)

    @classmethod
    def fetch_id_given_date(cls, date: date) -> int:
        op_week = SemanaOperativaFactory.create_from_date(date)
        return cls._fetch_id_given_ini_date(op_week.begin_date)

    @classmethod
    @lru_cache(maxsize=64)
    def _fetch_id_given_ini_date(cls, op_week_ini_date: date) -> int:
        columns = ['SMAN_OP_KEY']
        conditions = {'INI_KEY': op_week_ini_date}
        op_week_bd = cls.select(columns, where=conditions)

        if not op_week_bd:
            raise EntityNotFound(date)
        return op_week_bd[0]['SMAN_OP_KEY']
