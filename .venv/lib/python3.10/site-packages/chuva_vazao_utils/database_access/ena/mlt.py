from typing import List
from functools import lru_cache

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.subsystem.subsystem import SubsystemDatabaseApi
from chuva_vazao_utils.entities.ena.mlt import MltApi, Mlt
from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder


class MltDatabaseApi(metaclass_resolver(MltApi, TableBase)):
    _query_builder = QueryBuilder('mlt')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, mlt: dict) -> Mlt:
        return Mlt(
            subsistema=SubsystemDatabaseApi.fetch_by_id(mlt.get('id_subsistema')),
            valor=mlt.get('valor'),
            mes=mlt.get('mes')
        )

    @classmethod
    def select(cls, conditions: dict) -> List[Mlt]:
        columns = [
            'id_subsistema',
            'mes',
            'valor'
        ]

        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(pp) for pp in bd_entities]

    @classmethod
    @lru_cache(maxsize=32)
    def fetch_all(cls) -> List[Mlt]:
        return cls.select({})

    @classmethod
    def fetch_by_month(cls, month: int, id_subsystem: int) -> Mlt:
        mlt_results = cls.fetch_all()
        try:
            return next(mlt for mlt in mlt_results if mlt.mes == month and mlt.subsistema.id == id_subsystem)
        except StopIteration as e:
            raise EntityNotFound from e
