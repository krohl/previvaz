from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.subsystem.subsystem import SubsystemDatabaseApi
from chuva_vazao_utils.utils.dateutils import get_now
from chuva_vazao_utils.entities.operative_week import SemanaOperativaFactory
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.entities.ena.ena_weekly_subsystem import EnaWeeklySubsystem, EnaWeeklySubsystemApi
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi


class EnaWeeklySubsystemDatabaseApi(metaclass_resolver(EnaWeeklySubsystemApi, TableBase)):
    _query_builder = QueryBuilder('ena_weekly_subsystem')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, bd_entity: dict) -> EnaWeeklySubsystem:
        return EnaWeeklySubsystem(
            subsystem=SubsystemDatabaseApi.fetch_by_id(bd_entity.get('id_subsistema')),
            op_week=SemanaOperativaFactory.create_from_date(bd_entity.get('start_date_week')),
            value=float(bd_entity.get('value')),
            origin=OriginTypeDatabaseApi.fetch_by_id(bd_entity.get('id_origin_type')),
            inflow_source=InflowSourceDatabaseApi.fetch_by_id(bd_entity.get('id_inflow_source')),
        )

    @classmethod
    def select(cls, conditions: dict, only_valid: bool = True) -> List[EnaWeeklySubsystem]:
        columns = [
            'id_subsistema', 'value', 'start_date_week', 'end_date_week', 'id_origin_type', 'id_inflow_source'
        ]
        if only_valid:
            conditions['end_date'] = None

        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(bd_entity) for bd_entity in bd_entities]

    @classmethod
    def persist(cls, ena_vals: Union[EnaWeeklySubsystem, List[EnaWeeklySubsystem]], auto_commit: bool = True):
        if isinstance(ena_vals, EnaWeeklySubsystem):
            ena_vals = [ena_vals]

        db_data = [
            {
                'value': ena.value,
                'start_date_week': ena.op_week.begin_date,
                'end_date_week': ena.op_week.end_date,
                'id_subsistema': ena.subsystem.id,
                'id_inflow_source': ena.inflow_source.id if ena.inflow_source else None,
                'id_origin_type': ena.origin.id if ena.origin else None,
                'begin_date': get_now(),
            }
            for ena in ena_vals
        ]

        cls.insert(db_data, auto_commit=auto_commit)
