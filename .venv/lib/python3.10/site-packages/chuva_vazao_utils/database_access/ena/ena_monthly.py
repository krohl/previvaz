from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.utils.dateutils import get_now
from chuva_vazao_utils.entities.ena.ena_monthly import MonthlyEna, MonthlyEnaApi
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.subsystem.subsystem import SubsystemDatabaseApi


class MonthlyEnaDatabaseApi(metaclass_resolver(MonthlyEnaApi, TableBase)):
    _query_builder = QueryBuilder('ena_monthly')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, ena: dict) -> MonthlyEna:
        return MonthlyEna(
            month=ena.get('month'),
            value=float(ena.get('value')),
            subsystem=SubsystemDatabaseApi.fetch_by_id(ena.get('id_subsistema')),
            mlt=float(ena.get('mlt')),
            id_rodada_smap=ena.get('id_rodada_smap'),
            origin=OriginTypeDatabaseApi.fetch_by_id(ena.get('id_origin_type')),
            inflow_source=InflowSourceDatabaseApi.fetch_by_id(ena.get('id_inflow_source')),
        )

    @classmethod
    def persist(cls, ena_vals: Union[MonthlyEna, List[MonthlyEna]], auto_commit: bool = True):
        if isinstance(ena_vals, MonthlyEna):
            ena_vals = [ena_vals]

        db_data = [
            {
                'value': ena.value,
                'mlt': ena.mlt,
                'month': ena.month,
                'id_subsistema': ena.subsystem.id,
                'id_rodada_smap': ena.id_rodada_smap,
                'id_origin_type': ena.origin.id,
                'id_inflow_source': ena.inflow_source.id,
                'begin_date': get_now(),
            }
            for ena in ena_vals
        ]

        cls.insert(db_data, auto_commit=auto_commit)
