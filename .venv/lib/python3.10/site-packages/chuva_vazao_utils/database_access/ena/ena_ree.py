from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.utils.dateutils import get_now
from chuva_vazao_utils.entities.ena.ena_ree import EnaRee, EnaReeApi
from chuva_vazao_utils.entities.smap.round import SmapRound
from chuva_vazao_utils.entities.operative_week import SemanaOperativaFactory
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.power_plant.ree import ReservatorioEquivalenteDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi


class EnaReeDatabaseApi(metaclass_resolver(EnaReeApi, TableBase)):
    _query_builder = QueryBuilder('ena_ree_weekly')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, ena: dict) -> EnaRee:
        return EnaRee(
            op_week=SemanaOperativaFactory.create_from_date(ena.get('start_date_week')),
            value=float(ena.get('value')),
            reservatorio_equivalente=ReservatorioEquivalenteDatabaseApi.fetch_by_id(
                ena.get('id_reservatorio_equivalente')
            ),
            origin=OriginTypeDatabaseApi.fetch_by_id(ena.get('id_origin_type')),
            inflow_source=InflowSourceDatabaseApi.fetch_by_id(ena.get('id_inflow_source')),
            id_rodada_smap=ena.get('id_rodada_smap'),
        )

    @classmethod
    def select(cls, conditions: dict, only_valid: bool = True) -> List[EnaRee]:
        columns = [
            'start_date_week', 'value', 'id_reservatorio_equivalente', 'id_origin_type', 'id_inflow_source', 'id_rodada_smap'
        ]
        if only_valid:
            conditions['end_date'] = None

        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(bd_entity) for bd_entity in bd_entities]

    @classmethod
    def persist(cls, ena_vals: Union[EnaRee, List[EnaRee]], auto_commit: bool = True):
        if isinstance(ena_vals, EnaRee):
            ena_vals = [ena_vals]

        db_data = [
            {
                'value': ena.value,
                'start_date_week': ena.op_week.begin_date,
                'end_date_week': ena.op_week.end_date,
                'id_reservatorio_equivalente': ena.reservatorio_equivalente.id,
                'id_inflow_source': ena.inflow_source.id,
                'id_origin_type': ena.origin.id,
                'id_rodada_smap': ena.id_rodada_smap,
                'begin_date': get_now(),
            }
            for ena in ena_vals
        ]

        cls.insert(db_data, auto_commit=auto_commit)

    @classmethod
    @lru_cache(maxsize=32)
    def fetch_given_smap_round(cls, smap_round: SmapRound) -> List[EnaRee]:
        condition = {'id_rodada_smap': smap_round.id}
        return cls.select(condition)
