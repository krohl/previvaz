from typing import List, Union
from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.database_access.power_plant.power_plant import PowerPlantDatabaseApi
from chuva_vazao_utils.entities.ena.ena import Ena, EnaApi
from chuva_vazao_utils.database_access.table_base import TableBase, metaclass_resolver
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.utils.dateutils import get_now


class EnaDatabaseApi(metaclass_resolver(EnaApi, TableBase)):
    _query_builder = QueryBuilder('ena')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, ena: dict) -> Ena:
        return Ena(
            time=ena['date'],
            value=ena['value'],
            power_plant=PowerPlantDatabaseApi.fetch_by_id(ena.get('id_power_plant')),
            origin=OriginTypeDatabaseApi.fetch_by_id(ena.get('id_origin_type')),
            inflow_source=InflowSourceDatabaseApi.fetch_by_id(ena.get('id_inflow_source')),
            id_rodada_smap=ena.get('id_rodada_smap'),
        )

    @classmethod
    def persist(cls, ena_vals: Union[Ena, List[Ena]], auto_commit: bool = True):
        if isinstance(ena_vals, Ena):
            ena_vals = [ena_vals]

        db_data = [
            {
                'date': ena.time,
                'value': ena.value,
                'id_inflow_source': ena.inflow_source.id if ena.inflow_source else None,
                'id_origin_type': ena.origin.id if ena.origin else None,
                'id_power_plant': ena.power_plant.id,
                'id_rodada_smap': ena.id_rodada_smap,
                'begin_date': get_now(),
            }
            for ena in ena_vals
        ]

        cls.insert(db_data, auto_commit=auto_commit)
