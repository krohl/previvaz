from datetime import date, datetime

NOT_NULL = "IS NOT NULL"


class QueryFormatter:

    def __init__(self):
        self._formatters = {
            str: self._format_str,
            int: self._format_default,
            date: self._format_default,
            datetime: self._format_default,
            float: self._format_default,
            bool: self._format_default,
            list: self._format_list,
            type(None): self._format_none,
        }

    def format(self, column: str, condition, values_select: list):
        self._column = column
        self._condition = condition
        self._values_select = values_select
        self._type_condition = type(condition)
        format_func = self._formatters.get(self._type_condition)
        return format_func()

    def _format_default(self):
        self._values_select.append(self._condition)
        return f" {self._column} = %s "

    def _format_none(self):
        return f" {self._column} IS NULL "

    def _format_str(self):
        if self._condition == NOT_NULL:
            return f" {self._column} {self._condition} "

        return self._format_default()

    def _format_list(self):
        any_date = any([isinstance(c, date) or isinstance(c, datetime) for c in self._condition])

        if len(self._condition) == 2 and any_date:
            return self._format_date_list()
        else:
            stm_list = ', '.join([' %s ' for c in self._condition])
            self._values_select.extend(self._condition)
            return f' {self._column} in({stm_list}) '

    def _format_date_list(self):
        all_dates = all([isinstance(c, date) or isinstance(c, datetime) for c in self._condition])

        if all_dates:
            dates = sorted(self._condition)
            return f"{self._column} between " + " and ".join([f"'{d.isoformat()}'" for d in dates])
        else:
            if self._condition[0] is None:
                self._values_select.append(self._condition[1])
                return f"{self._column} <= %s "
            if self._condition[1] is None:
                self._values_select.append(self._condition[0])
                return f"{self._column} >= %s "
