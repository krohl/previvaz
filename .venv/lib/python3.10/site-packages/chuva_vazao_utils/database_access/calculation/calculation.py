from functools import lru_cache
from typing import List

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.calculation.calculation_factory import CalculationFactory
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.calculation.calculation import Calculation, CalculationApi
from chuva_vazao_utils.entities.calculation.calculation_type import CalculationTypeMenu


class CalculationDatabaseApi(metaclass_resolver(CalculationApi, TableBase)):
    _query_builder = QueryBuilder('calculation')
    _database = RiverDatabase

    @classmethod
    def select(cls, conditions: dict, only_valid: bool = True) -> List[Calculation]:
        columns = ['id_power_plant', 'calculation', 'id_calculation_type']
        if only_valid:
            conditions['end_date'] = None

        bd_entities = super().select(columns, where=conditions)
        return [CalculationFactory.create_calculation(bd_entity) for bd_entity in bd_entities]

    @classmethod
    @lru_cache(maxsize=16)
    def fetch_all_given_type(cls, type: CalculationTypeMenu) -> List[Calculation]:
        condition = {'id_calculation_type': type.value}
        return cls.select(condition)
