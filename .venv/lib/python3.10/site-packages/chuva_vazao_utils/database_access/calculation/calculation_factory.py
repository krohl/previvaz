import json

from chuva_vazao_utils.database_access.inflows.inflow import InflowDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_type import InflowTypeDatabaseApi
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.database_access.power_plant.power_plant import PowerPlantDatabaseApi
from chuva_vazao_utils.entities.calculation.calculation import Calculation, CalculationWithoutEval
from chuva_vazao_utils.entities.calculation.calculation_type import CalculationTypeMenu
from chuva_vazao_utils.entities.calculation.mean_inflow_calculation import MeanInflowCalculation
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSourceMenu
from chuva_vazao_utils.entities.inflow.origin_type import OriginTypeMenu
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


class CalculationFactory:
    @classmethod
    def create_calculation(cls, bd_entity: dict) -> Calculation:
        calc_type_id = bd_entity['id_calculation_type']
        power_plant = PowerPlantDatabaseApi.fetch_by_id(bd_entity['id_power_plant'])
        calc_dict = json.loads(bd_entity['calculation'])

        if calc_type_id == CalculationTypeMenu.INFLOW_MEAN_LAST_DAYS.value:
            return MeanInflowCalculationFactory.create_calculation(power_plant, calc_dict)
        # Aqui vamos adicionando novos cálculos, à medida em que formos implementando
        return CalculationWithoutEval(power_plant, calc_dict, calc_type_id)


class MeanInflowCalculationFactory:
    @classmethod
    def create_calculation(cls, output_power_plant: PowerPlant, calc_dict: dict) -> MeanInflowCalculation:
        input_id_power_plant = calc_dict['input_id_power_plant']
        input_id_inflow_type = calc_dict['input_id_inflow_type']
        input_id_inflow_source = calc_dict['input_id_inflow_source']
        input_id_origin_type = calc_dict['input_id_origin_type']
        num_days = calc_dict['num_days']
        output_id_inflow_type = calc_dict['output_id_inflow_type']

        input_power_plant = PowerPlantDatabaseApi.fetch_by_id(input_id_power_plant)
        input_inflow_type = InflowTypeDatabaseApi.fetch_by_id(input_id_inflow_type)
        input_inflow_source = InflowSourceDatabaseApi.fetch_by_id(input_id_inflow_source)
        input_origin_type = OriginTypeDatabaseApi.fetch_by_id(input_id_origin_type)
        output_inflow_type = InflowTypeDatabaseApi.fetch_by_id(output_id_inflow_type)
        output_inflow_source = InflowSourceDatabaseApi.fetch_inflow_source(InflowSourceMenu.ESFERA)
        output_origin_type = OriginTypeDatabaseApi.fetch_origin_type(OriginTypeMenu.MANUAL)

        return MeanInflowCalculation(
            output_power_plant, input_power_plant, input_inflow_type, input_inflow_source, input_origin_type, num_days, output_inflow_type,
            output_inflow_source, output_origin_type, InflowDatabaseApi
        )
