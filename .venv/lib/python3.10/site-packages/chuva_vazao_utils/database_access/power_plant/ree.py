from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.connection import RiverDatabase
from chuva_vazao_utils.database_access.query_builder import QueryBuilder
from chuva_vazao_utils.database_access.table_base import metaclass_resolver, TableBase
from chuva_vazao_utils.entities.power_plant.ree import ReservatorioEquivalente, ReservatorioEquivalenteApi


class ReservatorioEquivalenteDatabaseApi(metaclass_resolver(ReservatorioEquivalenteApi, TableBase)):
    _query_builder = QueryBuilder('reservatorio_equivalente')
    _database = RiverDatabase

    @classmethod
    def from_dict(cls, pp: dict) -> ReservatorioEquivalente:
        return ReservatorioEquivalente(
            pp.get('id_reservatorio_equivalente'),
            pp.get('descricao'),
        )

    @classmethod
    def select(cls, conditions: dict) -> List[ReservatorioEquivalente]:
        columns = ['id_reservatorio_equivalente', 'descricao']
        bd_entities = super().select(columns, where=conditions)
        return [cls.from_dict(pp) for pp in bd_entities]

    @classmethod
    @lru_cache(maxsize=4)
    def fetch_all(cls) -> List[ReservatorioEquivalente]:
        return cls.select({})

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[ReservatorioEquivalente, None]:
        rees = cls.fetch_all()
        return next((ree for ree in rees if ree.id == id), None)

    @classmethod
    def fetch_by_name(cls, name: str) -> Union[ReservatorioEquivalente, None]:
        rees = cls.fetch_all()
        return next((ree for ree in rees if ree.name == name), None)
