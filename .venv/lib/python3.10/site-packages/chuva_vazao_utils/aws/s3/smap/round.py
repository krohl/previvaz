from chuva_vazao_utils.aws.s3.environment import Env
from chuva_vazao_utils.aws.s3.s3_models import S3Folder
from chuva_vazao_utils.entities.smap.round import SmapRound, SmapRoundDataApi


class SmapRoundFilesApi(SmapRoundDataApi):
    @classmethod
    def _bucket(cls):
        return Env.bucket_smap

    @classmethod
    def _smap_output_base_folder_name(cls, smap_round: SmapRound) -> str:
        folder_pattern = (
            'smap/{cpu_date_%Y/%m/%d}/{model_name}/{op_week_round_date_%Y%m%d}/{rodada_smap}/{id_rodada_smap}'
        )

        formatting_map = {
            'cpu_date_%Y/%m/%d': smap_round.cpu_date.strftime('%Y/%m/%d'),
            'model_name': smap_round.model.name,
            'op_week_round_date_%Y%m%d': smap_round.oper_week.round_date.strftime('%Y%m%d'),
            'rodada_smap': 'rodada_manual' if smap_round.flag_manual else 'rodada_smap',
            'id_rodada_smap': smap_round.id,
        }
        return folder_pattern.format_map(formatting_map)

    @classmethod
    def get_deck_folder(cls, smap_round: SmapRound) -> S3Folder:
        folder_pattern = 'decks/{cpu_date_%Y/%m/%d}/{id_rodada_smap}'
        formatting_map = {
            'cpu_date_%Y/%m/%d': smap_round.cpu_date.strftime('%Y/%m/%d'),
            'id_rodada_smap': smap_round.id,
        }
        deck_folder = folder_pattern.format_map(formatting_map)

        return S3Folder(base_path=deck_folder, _bucket_name=cls._bucket())

    @classmethod
    def get_smap_output_folder(cls, smap_round: SmapRound) -> S3Folder:
        smap_output_path = f'{cls._smap_output_base_folder_name(smap_round)}/processamento'

        return S3Folder(base_path=smap_output_path, _bucket_name=cls._bucket())

    @classmethod
    def get_post_processing_output_folder(cls, smap_round: SmapRound) -> S3Folder:
        post_processing_path = f'{cls._smap_output_base_folder_name(smap_round)}/pos_processamento'

        return S3Folder(base_path=post_processing_path, _bucket_name=cls._bucket())
