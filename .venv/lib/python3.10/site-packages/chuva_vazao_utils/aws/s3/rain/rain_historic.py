from datetime import date, datetime
from typing import Union

from chuva_vazao_utils.aws.s3.environment import Env
from chuva_vazao_utils.aws.s3.s3_models import S3File, S3Folder
from chuva_vazao_utils.entities.rain.rain_historic import RainHistoric, RainHistoricDataApi


class RainHistoricPatternFormatter:
    @classmethod
    def format_pattern(
        cls,
        pattern: str,
        data_date: Union[date, datetime]
    ) -> str:
        formatting_map = {
            'date_%d%m%y': data_date.strftime('%d%m%y'),
            'date_%d%m%Y': data_date.strftime('%d%m%Y'),
        }
        return pattern.format_map(formatting_map)


class RainHistoricFilesS3Api(RainHistoricDataApi):
    @classmethod
    def _bucket(cls) -> str:
        return Env.bucket_precipitation

    @classmethod
    def get_historic_folder(cls, model: RainHistoric) -> S3Folder:
        return S3Folder(model.key, cls._bucket())

    @classmethod
    def get_data_file(
        cls,
        model: RainHistoric,
        data_date: Union[date, datetime]
    ) -> S3File:
        folder_path = model.key
        filename = RainHistoricPatternFormatter.format_pattern(
            pattern=model.filename_pattern,
            data_date=data_date,
        )
        return S3File(folder_path, filename, cls._bucket())
