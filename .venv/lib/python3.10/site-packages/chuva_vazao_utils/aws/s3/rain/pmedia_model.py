from datetime import date, datetime
from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.aws.s3.s3_models import S3File, S3Folder
from chuva_vazao_utils.aws.s3.pattern_formatter.pattern_formatter import S3PatternFormatter
from chuva_vazao_utils.entities.rain.pmedia_model import PmediaModel, PmediaDataApi
from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.entities.remvies.round import RemviesRound


class PmediaPatternFormatter(S3PatternFormatter):
    DATA_DATE_YYYYMMDD = 'data_date_%Y%m%d'
    TARGET_DATE_DDMM = 'target_date_%d%m'

    @classmethod
    def format_pattern(
        cls,
        pattern: str,
        data_date: Union[date, datetime],
        target_date: Union[date, datetime] = None,
        remvies_round: RemviesRound = None,
        op_week: SemanaOperativa = None,
    ) -> str:
        formatting_map = {}
        formatting_map.update(cls._get_format_date_dict(data_date, cls.DATA_DATE_YYYYMMDD))
        formatting_map.update(cls._get_format_date_dict(data_date, 'data_date_%d%m%y'))
        formatting_map.update(cls._get_format_date_dict(data_date, 'data_date_%Y/%m/%d'))
        formatting_map.update(cls._get_format_date_dict(data_date, 'data_date_%Y/%m'))

        if target_date:
            formatting_map.update(cls._get_format_date_dict(target_date, 'target_date_%d%m%y'))
            formatting_map.update(cls._get_format_date_dict(target_date, cls.TARGET_DATE_DDMM))

        if remvies_round:
            formatting_map['id_remvies_round'] = remvies_round.id
            formatting_map.update(cls._get_format_date_dict(remvies_round.cpu_date, 'round_cpu_date_%Y/%m/%d'))
            formatting_map.update(cls._get_format_date_dict(remvies_round.base_date, 'round_base_date_%d%m%y'))

        if op_week:
            format_date = max(op_week.round_date, remvies_round.base_date)
            formatting_map.update(cls._get_format_date_dict(format_date, 'sman_oper_date_%Y%m%d'))

        return pattern.format_map(formatting_map)

    @classmethod
    def get_data_date_from_filename(cls, model: PmediaModel, filename: str) -> date:
        patterns_to_decode = ['target_date_%d%m%y', cls.DATA_DATE_YYYYMMDD, cls.TARGET_DATE_DDMM]
        return cls._get_date_from_formated_str_pattern(filename, model.filename_pattern, patterns_to_decode)

    @classmethod
    def get_data_date_from_key(cls, model: PmediaModel, key: str) -> date:
        patterns_to_decode = [cls.DATA_DATE_YYYYMMDD, 'round_cpu_date_%Y/%m/%d']
        return cls._get_date_from_formated_str_pattern(key, model.key_pattern, patterns_to_decode)

    @classmethod
    def get_model_base_folder(cls, model: PmediaModel) -> str:
        return model.key_pattern.split('{')[0]

    @classmethod
    def _create_date_from_pattern(cls, pattern: str, value_extracted_from_str: str, date_pattern: str) -> date:
        if pattern == cls.TARGET_DATE_DDMM:
            return datetime.strptime(f'{value_extracted_from_str}1904', f'{date_pattern}%Y').date()
        return datetime.strptime(value_extracted_from_str, date_pattern).date()


class PmediaDataS3Api(PmediaDataApi):
    formatter = PmediaPatternFormatter

    @classmethod
    def get_base_folder(cls, model: PmediaModel) -> S3Folder:
        return S3Folder(cls.formatter.get_model_base_folder(model), model.bucket)

    @classmethod
    def get_data_folder(
        cls,
        model: PmediaModel,
        data_date: Union[date, datetime],
        target_date: Union[date, datetime] = None,
        remvies_round: RemviesRound = None,
        op_week: SemanaOperativa = None,
    ) -> S3Folder:
        folder_path = cls.formatter.format_pattern(
            pattern=model.key_pattern,
            data_date=data_date,
            target_date=target_date,
            remvies_round=remvies_round,
            op_week=op_week,
        )
        return S3Folder(folder_path, model.bucket)

    @classmethod
    def get_data_file(
        cls,
        model: PmediaModel,
        data_date: Union[date, datetime],
        target_date: Union[date, datetime] = None,
        remvies_round: RemviesRound = None,
        op_week: SemanaOperativa = None,
    ) -> S3File:
        folder_path = cls.formatter.format_pattern(
            pattern=model.key_pattern,
            data_date=data_date,
            target_date=target_date,
            remvies_round=remvies_round,
            op_week=op_week,
        )
        filename = cls.formatter.format_pattern(
            pattern=model.filename_pattern,
            data_date=data_date,
            target_date=target_date,
            remvies_round=remvies_round,
            op_week=op_week,
        )
        return S3File(folder_path, filename, model.bucket)

    @classmethod
    @lru_cache(maxsize=16)
    def list_all_data_dates(cls, model: PmediaModel) -> List[date]:
        base_folder = cls.get_base_folder(model)
        all_model_keys = base_folder.list_keys()
        all_dates = [cls.formatter.get_data_date_from_key(model, key.rsplit('/', 1)[0]) for key in all_model_keys]
        return [d for d in all_dates if d is not None]
