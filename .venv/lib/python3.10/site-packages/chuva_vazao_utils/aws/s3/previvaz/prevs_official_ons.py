from datetime import date, timedelta

from chuva_vazao_utils.utils.dateutils import get_today
from chuva_vazao_utils.aws.s3.s3_models import S3File
from chuva_vazao_utils.aws.s3.environment import Env
from chuva_vazao_utils.entities.exception import FileNotFound
from chuva_vazao_utils.entities.operative_week import SemanaOperativa, SemanaOperativaFactory
from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar
from chuva_vazao_utils.entities.previvaz.prevs_official_ons import PrevsOfficialOnsDataApi


class PrevsOfficialOnsFilesApi(PrevsOfficialOnsDataApi):

    base_path_pattern: str = 'previvaz/%Y/%m/%d/Oficial_ONS/{oper_week}/rodada_oficial'
    filename_pattern = 'prevs.rv{rv}'

    @classmethod
    def _bucket(cls) -> str:
        return Env.bucket_price

    @classmethod
    def _base_path(cls, ref_date: date, semana_operativa: SemanaOperativa):
        return ref_date.strftime(
            cls.base_path_pattern.format_map({
                'oper_week': semana_operativa.week
            })
        )

    @classmethod
    def get_latest_prevs_file(cls) -> S3File:
        today = get_today()
        chvz_calendar = ChuvaVazaoCalendar(today.year, CalendarType.CALENDAR_ONS)
        round_date = today + timedelta(days=1)

        max_tries = 10
        for _ in range(max_tries, 0, -1):
            round_date = chvz_calendar.get_previous_round_date(round_date)
            nxt_week = round_date + timedelta(days=7)
            rv, _ = chvz_calendar.get_rv(nxt_week)

            semana_operativa = SemanaOperativaFactory.create_from_date(nxt_week)
            filename = cls.filename_pattern.format_map({'rv': rv})
            s3_file = S3File(cls._base_path(round_date, semana_operativa), filename, cls._bucket())

            if s3_file.exists():
                return s3_file

        raise FileNotFound('Prevs Oficial ONS')
