from chuva_vazao_utils.aws.s3.environment import Env
from chuva_vazao_utils.aws.s3.s3_models import S3File
from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.database_access.inflows.inflow_type import InflowTypeDatabaseApi
from chuva_vazao_utils.database_access.power_plant.power_plant import PowerPlantDatabaseApi
from chuva_vazao_utils.entities.previvaz.round import PrevivazDataApi, PrevivazRound


class PrevivazFilesApi(PrevivazDataApi):
    _power_plant_api = PowerPlantDatabaseApi
    _inflow_type_api = InflowTypeDatabaseApi
    _inflow_source_api = InflowSourceDatabaseApi
    _origin_type_api = OriginTypeDatabaseApi

    base_path_pattern: str = 'previvaz/%Y/%m/%d/{model_name}/{oper_week}/rodada_smap/{smap_round_id}/'

    @classmethod
    def _bucket(cls) -> str:
        return Env.bucket_price

    @classmethod
    def _round_base_path(cls, previvaz_round: PrevivazRound):
        return previvaz_round.cpu_date.strftime(
            cls.base_path_pattern.format_map(
                {
                    'oper_week': previvaz_round.oper_week.week,
                    'model_name': previvaz_round.model.name.replace(' ', '_'),
                    'smap_round_id': previvaz_round.id
                }
            )
        )

    @classmethod
    def _input_files_path(cls, previvaz_round: PrevivazRound):
        return cls._round_base_path(previvaz_round) + 'entrada/'

    @classmethod
    def _output_files_path(cls, previvaz_round: PrevivazRound):
        return cls._round_base_path(previvaz_round) + 'saida/'

    @classmethod
    def get_observed_inflows_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._input_files_path(previvaz_round), 'vazao_observada.json', cls._bucket())

    @classmethod
    def get_forecast_inflows_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._input_files_path(previvaz_round), 'vazao_smap.json', cls._bucket())

    @classmethod
    def get_pluvia_inflows_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._input_files_path(previvaz_round), 'vazao_pluvia.json', cls._bucket())

    @classmethod
    def get_input_inflows_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._input_files_path(previvaz_round), 'vazoes_entrada.txt', cls._bucket())

    @classmethod
    def get_output_inflows_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._output_files_path(previvaz_round), 'vazoes_saida', cls._bucket())

    @classmethod
    def get_output_postos_file(cls, previvaz_round: PrevivazRound) -> S3File:
        return S3File(cls._output_files_path(previvaz_round), 'postos_saida.txt', cls._bucket())

    @classmethod
    def get_prevs_file(cls, previvaz_round: PrevivazRound) -> S3File:
        filename = f'{previvaz_round.oper_week.end_date.strftime("%Y%m")}-prevs.rv{previvaz_round.oper_week.num_rev}'
        return S3File(cls._output_files_path(previvaz_round), filename, cls._bucket())
