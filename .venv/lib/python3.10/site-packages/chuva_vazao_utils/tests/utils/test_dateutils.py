from datetime import date, datetime

import pytest

from chuva_vazao_utils.utils.dateutils import count_days, get_month_days, parse_date


@pytest.mark.parametrize('reference_date, expected', [
    ('2020-01-01', datetime(2020, 1, 1)),
    ('2020-01-01T08:10:20', datetime(2020, 1, 1, 8, 10, 20)),
    (date(2020, 1, 1), datetime(2020, 1, 1)),
    (datetime(2020, 1, 1), datetime(2020, 1, 1)),
])
def test_parse_date(reference_date, expected):
    result = parse_date(reference_date)

    assert result == expected


def test_parse_date_value_error():
    with pytest.raises(ValueError):
        parse_date('invalid_date')


def test_parse_date_type_error():
    with pytest.raises(TypeError):
        parse_date(tuple(1, 2))


@pytest.mark.parametrize('start_dt, end_dt, month, expected', [
    (date(2023, 1, 1), date(2023, 1, 1), None, 1),
    (date(2023, 1, 1), date(2023, 1, 6), None, 6),
    (date(2023, 1, 1), date(2023, 2, 6), 1, 31),
])
def test_count_days(start_dt, end_dt, month, expected):
    result = count_days(start_dt, end_dt, month)
    assert result == expected


@pytest.mark.parametrize('ref_date, expected', [
    (date(2023, 1, 1), 31),
    (date(2023, 2, 1), 28),
    (date(2020, 2, 1), 29),
    (date(2023, 4, 1), 30),
    (date(2023, 4, 10), 30),
])
def test_get_month_days(ref_date, expected):
    assert get_month_days(ref_date) == expected
