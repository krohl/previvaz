import pytest
from datetime import date
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.utils.acomph import check_acomph

MODULE_PATH = 'chuva_vazao_utils.utils.acomph'


@pytest.fixture(autouse=True)
def mock_s3_client(mocker: MockerFixture) -> Mock:
    mock_s3_client = Mock()

    mock_s3 = mocker.patch(f'{MODULE_PATH}.S3Client')
    mock_s3.return_value = mock_s3_client

    return mock_s3_client


@pytest.fixture(autouse=True)
def mock_inflow_origin_api(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi')


@pytest.fixture(autouse=True)
def mock_inflow_api(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi')


@pytest.mark.parametrize('exists_in_s3, exists_on_db, expected_result', [
    (False, False, False), (False, True, False), (True, False, False), (True, True, True),
])
def test_check_acomph(
    mock_s3_client: Mock, mock_inflow_origin_api: MagicMock, mock_inflow_api: MagicMock, exists_in_s3: bool, exists_on_db: bool, expected_result: bool
):
    # Given
    mock_acomph = Mock()
    mock_inflow_origin_api.fetch_origin_type.return_value = mock_acomph

    mock_s3_client.check_key_exists.return_value = exists_in_s3
    mock_inflow_api.check_inflow_origin_was_loaded_on_date.return_value = exists_on_db

    ref_date = date(2023, 1, 1)
    mock_bucket = 'bucket'
    # When
    exists = check_acomph(ref_date, mock_bucket)
    # Then
    assert exists == expected_result

    mock_s3_client.check_key_exists.assert_called_once_with(
        'realizado/dados/ONS/Acompanhamento_Hidrologico/2022/12/Acomp_Hidrologico_20221231.xlsx', mock_bucket
    )
    mock_inflow_api.check_inflow_origin_was_loaded_on_date.assert_called_once_with(mock_acomph, ref_date)
