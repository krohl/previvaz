from datetime import date
from unittest.mock import Mock

from chuva_vazao_utils.entities.calculation.mean_inflow_calculation import MeanInflowCalculation
from chuva_vazao_utils.entities.inflow.inflow import Inflow

MODULE_PATH = 'chuva_vazao_utils.entities.calculation.mean_inflow_calculation'


def test_eval():
    # Given
    mock_api = Mock()
    mock_api.fetch_between_dates.return_value = [
        Inflow(date(2022, 11, 11), 11.0, 10, Mock(), Mock(), Mock()),
        Inflow(date(2022, 11, 12), 12.0, 10, Mock(), Mock(), Mock()),
        Inflow(date(2022, 11, 13), 1.0, 10, Mock(), Mock(), Mock()),
    ]
    mock_pp_input = Mock()
    mock_inflow_type_input = Mock()
    mock_inflow_source_input = Mock()
    mock_origin_type_input = Mock()
    mock_type_output = Mock()
    mock_source_output = Mock()
    mock_origin_output = Mock()
    mock_pp = Mock()
    calculation = MeanInflowCalculation(
        mock_pp, mock_pp_input, mock_inflow_type_input, mock_inflow_source_input, mock_origin_type_input, 3,
        mock_type_output, mock_source_output, mock_origin_output, mock_api
    )
    # When
    result = calculation.eval(date(2022, 11, 14))
    # Then
    assert result == Inflow(date(2022, 11, 14), 8.0, mock_pp, mock_type_output, mock_source_output, mock_origin_output)

    mock_api.fetch_between_dates.assert_called_once_with(
        date(2022, 11, 11), date(2022, 11, 13), mock_pp_input, mock_inflow_type_input, mock_inflow_source_input, mock_origin_type_input
    )


def test_eval_no_inflows_fetched():
    # Given
    mock_api = Mock()
    mock_api.fetch_between_dates.return_value = []
    mock_type_output = Mock()
    mock_source_output = Mock()
    mock_origin_output = Mock()
    calculation = MeanInflowCalculation(
        100, 10, Mock(), Mock(), Mock(), 3, mock_type_output, mock_source_output, mock_origin_output, mock_api
    )
    # When
    result = calculation.eval(date(2022, 11, 14))
    # Then
    assert result == None
