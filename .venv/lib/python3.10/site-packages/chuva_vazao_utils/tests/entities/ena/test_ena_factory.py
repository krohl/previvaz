from datetime import date
from unittest.mock import Mock, call

import pytest
from chuva_vazao_utils.calendar.interval_type import IntervalType

from chuva_vazao_utils.entities.ena.ena_factory import EnaFactory
from chuva_vazao_utils.exceptions import InflowNotFound


@pytest.fixture
def ena_calculator_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.EnaCalculator')


@pytest.fixture
def power_plant_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.PowerPlant')


@pytest.fixture
def ena_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.EnaCalculation')


@pytest.fixture
def ena_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.EnaDatabaseApi')


@pytest.fixture
def sort_by_priority_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.sort_by_priority')


@pytest.fixture
def filter_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.filter_calculation')


@pytest.fixture
def calculate_power_plant_ena_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_factory.EnaFactory.calculate_power_plant_ena')


def test_calculate_power_plant_ena(ena_calculator_mock, power_plant_mock, ena_calculation_mock, ena_database_api_mock):
    dates = [
        date(2023, 1, 1),
        date(2023, 1, 2),
        date(2023, 1, 3),
        date(2023, 1, 4),
    ]
    id_rodada_smap = 1
    ena_mock = [Mock(), Mock(), Mock(), Mock()]
    ena_values = [123, 456, 789, 101112]
    calculation_mock = 'calculation_mock'
    id_power_plant_mock = 1

    ena_calculator_mock.eval = Mock(side_effect=ena_values)
    ena_database_api_mock.from_dict = Mock(side_effect=ena_mock)
    ena_calculation_mock.calculation = calculation_mock
    power_plant_mock.id = id_power_plant_mock

    result = EnaFactory.calculate_power_plant_ena(
        ena_calculator_mock, dates, power_plant_mock, ena_calculation_mock, id_rodada_smap
    )

    assert result == ena_mock
    ena_calculator_mock.eval.assert_has_calls([call(calculation_mock, date) for date in dates])
    ena_database_api_mock.from_dict.assert_has_calls([
        call({'id_power_plant': id_power_plant_mock, 'date': date, 'value': ena_value, 'id_rodada_smap': id_rodada_smap})
        for date, ena_value in zip(dates, ena_values)
    ])


def test_calculate_power_plant_ena_inflow_not_found(
    ena_calculator_mock, power_plant_mock, ena_calculation_mock, ena_database_api_mock
):
    dates = [
        date(2023, 1, 1),
        date(2023, 1, 2),
        date(2023, 1, 3),
        date(2023, 1, 4),
    ]
    id_power_plant_mock = 1
    ena_mock = [Mock(), Mock(), Mock(), Mock()]
    ena_values = [InflowNotFound, 123, 456, 789]
    calculation_mock = 'calculation_mock'
    id_rodada_smap = 1

    ena_calculator_mock.eval = Mock(side_effect=ena_values)
    ena_database_api_mock.from_dict = Mock(side_effect=ena_mock)
    ena_calculation_mock.calculation = calculation_mock
    power_plant_mock.id = id_power_plant_mock

    result = EnaFactory.calculate_power_plant_ena(
        ena_calculator_mock, dates, power_plant_mock, ena_calculation_mock, id_rodada_smap
    )

    assert result == [ena_mock[0], ena_mock[1], ena_mock[2]]
    ena_calculator_mock.eval.assert_has_calls([call(calculation_mock, date) for date in dates])
    ena_database_api_mock.from_dict.assert_has_calls([
        call({
            'id_power_plant': id_power_plant_mock,
            'date': dates[1], 'value': ena_values[1],
            'id_rodada_smap': id_rodada_smap
        }),
        call({
             'id_power_plant': id_power_plant_mock,
             'date': dates[2], 'value': ena_values[2],
             'id_rodada_smap': id_rodada_smap
             }),
        call({
            'id_power_plant': id_power_plant_mock,
            'date': dates[3], 'value': ena_values[3],
            'id_rodada_smap': id_rodada_smap
        })
    ])


def test_calculate_ena_daily(
    ena_calculator_mock, sort_by_priority_mock, filter_calculation_mock,
    calculate_power_plant_ena_mock
):
    power_plants = ['power_plant_mock_1', 'power_plant_mock_2', 'power_plant_mock_3']
    id_rodada_smap = 1
    dates = [
        date(2023, 1, 1),
        date(2023, 1, 2),
        date(2023, 1, 3),
    ]
    calculation_types = [Mock()]
    interval_type = IntervalType.DAILY
    power_plants_obj_mock = [
        Mock(id=1), Mock(id=2), Mock(id=3)
    ]
    inflows_dicts_mock = ['inflow_1', 'inflow_2', 'inflow_3']

    inflow_1 = Mock(time=dates[0])
    inflow_2 = Mock(time=dates[1])
    inflow_3 = Mock(time=dates[2])
    inflow_1.to_dict.return_value = inflows_dicts_mock[0]
    inflow_2.to_dict.return_value = inflows_dicts_mock[1]
    inflow_3.to_dict.return_value = inflows_dicts_mock[2]
    inflows = [inflow_1, inflow_2, inflow_3]

    ena_calculated = [
        [Mock(), Mock(), Mock()],
        [Mock(), Mock(), Mock()],
        [Mock(), Mock(), Mock()],
    ]
    filter_result_mock = [Mock(), Mock(), Mock()]
    ena_calculator = Mock(inflows=inflows_dicts_mock)

    sort_by_priority_mock.return_value = power_plants_obj_mock
    ena_calculator_mock.return_value = ena_calculator
    filter_calculation_mock.side_effect = filter_result_mock
    calculate_power_plant_ena_mock.side_effect = ena_calculated

    result = EnaFactory.calculate(inflows, power_plants, calculation_types, interval_type, id_rodada_smap)

    assert result == [item for sublist in ena_calculated for item in sublist]
    sort_by_priority_mock.assert_called_once_with(power_plants, calculation_types[0])
    ena_calculator_mock.assert_has_calls([
        call(power_plant_obj_mock.id, inflows_dicts_mock, interval_type)
        for power_plant_obj_mock in power_plants_obj_mock
    ])
    filter_calculation_mock.assert_has_calls([
        call(power_plant_obj_mock.id, calculation_types[0])
        for power_plant_obj_mock in power_plants_obj_mock
    ])
    calculate_power_plant_ena_mock.assert_has_calls([
        call(ena_calculator, list(set(dates)), power_plant_obj_mock, filter_result_mock[i], id_rodada_smap)
        for i, power_plant_obj_mock in enumerate(power_plants_obj_mock)
    ])
