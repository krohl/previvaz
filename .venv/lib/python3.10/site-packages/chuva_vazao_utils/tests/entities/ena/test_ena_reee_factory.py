from datetime import date
from unittest.mock import Mock, call

from chuva_vazao_utils.entities.ena.ena_ree_factory import EnaReeFactory

import pytest


@pytest.fixture
def ena_ree_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.entities.ena.ena_ree_factory.EnaReeDatabaseApi')


def test_calculate_ena_ree(ena_ree_database_api_mock):
    ree_1 = Mock(id=1)
    ree_2 = Mock(id=2)

    power_plant_1 = Mock(id=1, reservatorio_eqv=ree_1)
    power_plant_2 = Mock(id=2, reservatorio_eqv=ree_2)

    ena_list = [
        Mock(time=date(2023, 1, 1), power_plant=power_plant_1, value=123, id_rodada_smap=0),
        Mock(time=date(2023, 1, 2), power_plant=power_plant_1, value=456, id_rodada_smap=0),
        Mock(time=date(2023, 1, 1), power_plant=power_plant_2, value=321, id_rodada_smap=0),
        Mock(time=date(2023, 1, 2), power_plant=power_plant_2, value=654, id_rodada_smap=0),
    ]
    power_plants = [power_plant_1, power_plant_2]

    ena_ree_database_api_mock.from_dict.side_effect = [
        Mock(id=1, id_reservatorio_eqv=1, id_rodada_smap=123, value=1234.5),
        Mock(id=2, id_reservatorio_eqv=2, id_rodada_smap=123, value=5432.1),
        Mock(id=1, id_reservatorio_eqv=2, id_rodada_smap=123, value=5432.1),
        Mock(id=2, id_reservatorio_eqv=2, id_rodada_smap=123, value=5432.1),
    ]

    result = EnaReeFactory.get_ree_mean(ena_list, power_plants)

    assert len(result) == 4
    ena_ree_database_api_mock.from_dict.assert_has_calls([
        call({
            'id_reservatorio_equivalente': 1,
            'value': 123,
            'start_date_week': date(2022, 12, 26),
            'end_date_week': date(2023, 1, 1),
            'id_rodada_smap': 0,
        }),
        call({
            'id_reservatorio_equivalente': 1,
            'value': 456,
            'start_date_week': date(2022, 12, 27),
            'end_date_week': date(2023, 1, 2),
            'id_rodada_smap': 0,
        }),
        call({
            'id_reservatorio_equivalente': 2,
            'value': 321,
            'start_date_week': date(2022, 12, 26),
            'end_date_week': date(2023, 1, 1),
            'id_rodada_smap': 0,
        }),
        call({
            'id_reservatorio_equivalente': 2,
            'value': 654,
            'start_date_week': date(2022, 12, 27),
            'end_date_week': date(2023, 1, 2),
            'id_rodada_smap': 0,
        })
    ])
