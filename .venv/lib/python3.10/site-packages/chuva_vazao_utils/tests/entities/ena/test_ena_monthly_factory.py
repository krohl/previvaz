import pytest

from datetime import date
from unittest.mock import Mock, MagicMock, call

from chuva_vazao_utils.entities.ena.ena_monthly_factory import MonthlyEnaFactory

MODULE_PATH = 'chuva_vazao_utils.entities.ena.ena_monthly_factory'


@pytest.fixture
def monthly_ena_mock(mocker) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.MonthlyEna')


@pytest.fixture
def mlt_database_api_mock(mocker) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.MltDatabaseApi')


def test_get_monthly_mean(monthly_ena_mock: MagicMock, mlt_database_api_mock: MagicMock):
    mlt_database_api_mock.fetch_by_month.return_value = Mock(valor=100)
    subsystem = Mock(id=1)

    ena_list = [
        Mock(
            value=100,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 6),
            power_plant=Mock(subsistema=subsystem),
            id_rodada_smap=123
        ),
        Mock(
            value=200,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 13),
            power_plant=Mock(subsistema=subsystem),
            id_rodada_smap=123
        ),
        Mock(
            value=300,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 20),
            power_plant=Mock(subsistema=subsystem),
            id_rodada_smap=123
        ),
        Mock(
            value=400,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 27),
            power_plant=Mock(subsistema=subsystem),
            id_rodada_smap=123
        ),
        Mock(
            value=500,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 2, 3),
            power_plant=Mock(subsistema=subsystem),
            id_rodada_smap=123
        ),
    ]

    result = MonthlyEnaFactory.get_monthly_mean(ena_list)
    assert len(result) == 1
    monthly_ena_mock.assert_has_calls([
        call(**{
            'subsystem': subsystem,
             'month': date(2023, 1, 1),
             'value': 287.09677419354836,
             'mlt': 2.8709677419354835,
             'origin': ena_list[0].origin,
             'inflow_source': ena_list[0].inflow_source,
             'id_rodada_smap': 123
             })
    ])


def test_get_monthly_mean_incomplete_weeks(monthly_ena_mock: MagicMock, mlt_database_api_mock: MagicMock):
    mlt_database_api_mock.fetch_by_month.return_value = Mock(valor=100)
    subsystem = Mock(id=1)

    ena_list = [
        Mock(value=100, time=date(2023, 1, 6), power_plant=Mock(subsistema=subsystem), id_rodada_smap=123),
        Mock(value=200, time=date(2023, 1, 13), power_plant=Mock(subsistema=subsystem), id_rodada_smap=123),
        Mock(value=300, time=date(2023, 1, 20), power_plant=Mock(subsistema=subsystem), id_rodada_smap=123),
        Mock(value=400, time=date(2023, 1, 27), power_plant=Mock(subsistema=subsystem), id_rodada_smap=123),
    ]

    result = MonthlyEnaFactory.get_monthly_mean(ena_list)
    assert len(result) == 0
    monthly_ena_mock.assert_not_called()


def test_get_monthly_mean_multiple_subsystem(monthly_ena_mock, mlt_database_api_mock):
    mlt_database_api_mock.fetch_by_month.return_value = Mock(valor=100)
    subsystem_1 = Mock(id=1)
    subsystem_2 = Mock(id=2)

    ena_list = [
        Mock(
            value=100,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 6),
            power_plant=Mock(subsistema=subsystem_1),
            id_rodada_smap=123
        ),
        Mock(
            value=200,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 13),
            power_plant=Mock(subsistema=subsystem_1),
            id_rodada_smap=123
        ),
        Mock(
            value=300,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 20),
            power_plant=Mock(subsistema=subsystem_1),
            id_rodada_smap=123
        ),
        Mock(
            value=400,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 27),
            power_plant=Mock(subsistema=subsystem_1),
            id_rodada_smap=123
        ),
        Mock(
            value=500,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 2, 3),
            power_plant=Mock(subsistema=subsystem_1),
            id_rodada_smap=123
        ),
        Mock(
            value=100,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 6),
            power_plant=Mock(subsistema=subsystem_2),
            id_rodada_smap=123
        ),
        Mock(
            value=200,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 13),
            power_plant=Mock(subsistema=subsystem_2),
            id_rodada_smap=123
        ),
        Mock(
            value=300,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 20),
            power_plant=Mock(subsistema=subsystem_2),
            id_rodada_smap=123
        ),
        Mock(
            value=400,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 1, 27),
            power_plant=Mock(subsistema=subsystem_2),
            id_rodada_smap=123
        ),
        Mock(
            value=500,
            origin=Mock(),
            inflow_source=Mock(),
            time=date(2023, 2, 3),
            power_plant=Mock(subsistema=subsystem_2),
            id_rodada_smap=123
        ),
    ]

    result = MonthlyEnaFactory.get_monthly_mean(ena_list)
    assert len(result) == 2
    monthly_ena_mock.assert_has_calls([
        call(**{
             'subsystem': subsystem_1,
             'month': date(2023, 1, 1),
             'value': 287.09677419354836,
             'mlt': 2.8709677419354835,
             'origin': ena_list[0].origin,
             'inflow_source': ena_list[0].inflow_source,
             'id_rodada_smap': 123
             }),
        call(**{
            'subsystem': subsystem_2,
            'month': date(2023, 1, 1),
            'value': 287.09677419354836,
            'mlt': 2.8709677419354835,
            'origin': ena_list[5].origin,
            'inflow_source': ena_list[5].inflow_source,
            'id_rodada_smap': 123
        })
    ])
