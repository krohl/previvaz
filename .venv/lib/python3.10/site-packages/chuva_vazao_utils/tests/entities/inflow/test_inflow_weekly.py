from unittest.mock import Mock, MagicMock

import pytest
from pytest_mock import MockerFixture

from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.calendar.chuva_vazao_calendar import ChuvaVazaoCalendar
from chuva_vazao_utils.entities.inflow.inflow_weekly import WeeklyInflowFactory
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@pytest.fixture
def mock_type():
    return Mock(id=100)


@pytest.fixture
def mock_origin():
    return Mock(id=200)


@pytest.fixture
def mock_time_series(mocker):
    return mocker.patch('chuva_vazao_utils.entities.inflow.inflow_weekly.TimeSeries')


@pytest.fixture(autouse=True)
def mock_chuva_vazao_calendar(mocker: MockerFixture) -> MagicMock:
    mock_calendar_instance = Mock()
    mock_calendar_instance.get_previous_weekday = ChuvaVazaoCalendar.get_previous_weekday

    mock = mocker.patch('chuva_vazao_utils.entities.operative_week.ChuvaVazaoCalendar')
    mock.get_previous_weekday = ChuvaVazaoCalendar.get_previous_weekday
    mock.return_value = mock_calendar_instance
    return mock


def _get_mock_pp(id: int):
    return Mock(spec=PowerPlant, id=id)


def _get_mock_opweek(**kwargs):
    return Mock(spec=SemanaOperativa, **kwargs)


def test_get_op_week_mean_from_inflow_list(mock_type: Mock, mock_origin: Mock, mock_time_series):
    # Given
    num_days = 20
    num_pp = 2

    inflows = [
        Mock(
            power_plant=_get_mock_pp(j),
            operative_week=_get_mock_opweek(week=str(f'week{j}')),
            origin=mock_origin,
            inflow_type=mock_type,
        )
        for j in range(num_pp)
        for _ in range(num_days)
    ]
    mock_time_series.return_value.mean_values.side_effect = list(range(num_days * num_pp))

    # When
    weekly_inflows = WeeklyInflowFactory.get_op_week_mean(inflows, calc_only_full_weeks=False)
    # Then
    assert len(weekly_inflows) == num_pp
    for i, weekly_inflow in enumerate(weekly_inflows):
        assert weekly_inflow.value == i
        assert weekly_inflow.origin == mock_origin
        assert weekly_inflow.inflow_type == mock_type
        assert weekly_inflow.power_plant.id == _get_mock_pp(i).id
        assert weekly_inflow.op_week.week == _get_mock_opweek(week=str(f'week{i}')).week


def test_get_op_week_mean_from_inflow_list_complete_week_with_validation(mock_type: Mock, mock_origin: Mock, mock_time_series):
    # Given
    num_days = 7
    num_pp = 2
    inflow_not_consider = [
        Mock(
            power_plant=_get_mock_pp(0),
            operative_week=_get_mock_opweek(week=str('week99999')),
            origin=mock_origin,
            inflow_type=mock_type,
        ), Mock(
            power_plant=_get_mock_pp(0),
            operative_week=_get_mock_opweek(week=str('week99999')),
            origin=mock_origin,
            inflow_type=mock_type,
        )
    ]
    inflows = [
        Mock(
            power_plant=_get_mock_pp(j),
            operative_week=_get_mock_opweek(week=str(f'week{j}')),
            origin=mock_origin,
            inflow_type=mock_type,
        )
        for j in range(num_pp)
        for _ in range(num_days)
    ]
    inflows.extend(inflow_not_consider)
    mock_time_series.return_value.mean_values.side_effect = list(range(num_days * num_pp))
    # When/Then
    weekly_inflows = WeeklyInflowFactory.get_op_week_mean(inflows, calc_only_full_weeks=True)
    # Then
    assert len(weekly_inflows) == num_pp
    for i, weekly_inflow in enumerate(weekly_inflows):
        assert weekly_inflow.value == i
        assert weekly_inflow.origin == mock_origin
        assert weekly_inflow.inflow_type == mock_type
        assert weekly_inflow.power_plant.id == _get_mock_pp(i).id
        assert weekly_inflow.op_week.week == _get_mock_opweek(week=str(f'week{i}')).week
