from dataclasses import dataclass
from unittest.mock import Mock

from chuva_vazao_utils.entities.rain.pmedia_model import PmediaModelApi


def test_fetch_by_rain_model_id():
    # Given
    mock_rain_model_1 = Mock(_id=10, name='model_1')
    mock_rain_model_2 = Mock(_id=20, name='model_2')

    mock_pmedia_model_1 = Mock(_id=1, name='pmedia_model_1', model=mock_rain_model_1)
    mock_pmedia_model_2 = Mock(_id=2, name='pmedia_model_2', model=mock_rain_model_2)

    class RainModelTestApi(PmediaModelApi):
        @classmethod
        def fetch_all(cls):
            return [
                mock_pmedia_model_1,
                mock_pmedia_model_2,
            ]
    # When/Then
    assert RainModelTestApi.fetch_by_rain_model_id(10) == mock_pmedia_model_1
    assert RainModelTestApi.fetch_by_rain_model_id(20) == mock_pmedia_model_2
    assert RainModelTestApi.fetch_by_rain_model_id(3) is None


def test_fetch_by_rain_model_name():
    # Given
    @dataclass
    class ClassWithName:
        # Criada porque o "Mock" n√£o aceita atributo nome
        name: str

    mock_rain_model_1 = ClassWithName(name='model_1')
    mock_rain_model_2 = ClassWithName(name='model_2')

    mock_pmedia_model_1 = Mock(_id=1, name='pmedia_model_1', model=mock_rain_model_1)
    mock_pmedia_model_2 = Mock(_id=2, name='pmedia_model_2', model=mock_rain_model_2)

    class RainModelTestApi(PmediaModelApi):
        @classmethod
        def fetch_all(cls):
            return [
                mock_pmedia_model_1,
                mock_pmedia_model_2,
            ]
    # When/Then
    assert RainModelTestApi.fetch_by_rain_model_name('model_1') == mock_pmedia_model_1
    assert RainModelTestApi.fetch_by_rain_model_name('model_2') == mock_pmedia_model_2
    assert RainModelTestApi.fetch_by_rain_model_name('model_3') is None
