import pytest
from pytest_mock import MockerFixture

from datetime import date, timedelta
from unittest.mock import Mock
from typing import List

from chuva_vazao_utils.entities.rain.rain_model import BaseRainDataApi, RainModelApi

MODULE_PATH = 'chuva_vazao_utils.entities.rain.rain_model'


###################################################################################################
# RainEntityApi
###################################################################################################
@pytest.fixture
def rain_forecast_models_mock() -> List[Mock]:
    return [
        Mock(is_previsao=True),
        Mock(is_previsao=True),
    ]


@pytest.fixture
def rain_observed_models_mock() -> List[Mock]:
    return [
        Mock(is_previsao=False),
        Mock(is_previsao=False),
    ]


@pytest.fixture
def rain_entity_test_api(rain_forecast_models_mock: List[Mock], rain_observed_models_mock: List[Mock]):
    class RainEntityTestApi(RainModelApi):
        @classmethod
        def fetch_all(cls):
            return rain_forecast_models_mock + rain_observed_models_mock

    return RainEntityTestApi


def test_fetch_all_forecast(rain_entity_test_api, rain_forecast_models_mock: List[Mock]):
    # Then
    models = rain_entity_test_api.fetch_all_forecast()
    # When
    assert models == rain_forecast_models_mock


def test_fetch_all_observed(rain_entity_test_api, rain_observed_models_mock: List[Mock]):
    # Then
    models = rain_entity_test_api.fetch_all_observed()
    # When
    assert models == rain_observed_models_mock


###################################################################################################
# BaseRainDataApi
###################################################################################################
@pytest.fixture
def mock_today(mocker: MockerFixture) -> date:
    mock_today = date(2023, 5, 8)
    mock_today_fnc = mocker.patch(f'{MODULE_PATH}.get_today')
    mock_today_fnc.return_value = mock_today
    return mock_today


@pytest.mark.parametrize(
    'exists_side_effect,expected_delta_from_today',
    [
        ([True], 0),
        ([False, True], 1),
        ([False, False, True], 2),
        ([False, False, False, True], 3),
        ([False, False, False, False, True], 4),
        ([False, False, False, False, False, True], 5),
        ([False, False, False, False, False, False, True], 6),
    ],
)
def test_get_newest_data_date_last_seven_days(
    mock_today, exists_side_effect: List[bool], expected_delta_from_today: int
):
    # Given
    mock_folder = Mock()
    mock_folder.exists.side_effect = exists_side_effect

    expected_last_data_date = mock_today - timedelta(days=expected_delta_from_today)

    class BaseRainDataTestApi(BaseRainDataApi):
        @classmethod
        def get_data_folder(cls, model, data_date: date):
            return mock_folder

    # When/Then
    assert BaseRainDataTestApi.get_newest_data_date_last_seven_days(mock_folder) == expected_last_data_date


def test_get_newest_data_date_last_seven_days_no_data():
    # Given
    mock_folder = Mock()
    mock_folder.exists.return_value = False

    class BaseRainDataTestApi(BaseRainDataApi):
        @classmethod
        def get_data_folder(cls, model, data_date: date):
            return mock_folder

    # When/Then
    assert not BaseRainDataTestApi.get_newest_data_date_last_seven_days(mock_folder)


def test_data_date_with_data_on_last_seven_days():
    # Given
    class BaseRainDataTestApi(BaseRainDataApi):
        @classmethod
        def get_newest_data_date_last_seven_days(cls, model, ref_date=None):
            return 'mock_date'

        @classmethod
        def list_all_data_dates(cls, model):
            return [date(2023, 2, 28) + timedelta(days=i) for i in range(10)] + [date(2023, 4, 1)] + [date(2023, 1, 1)]

    # When/Then
    assert BaseRainDataTestApi.get_newest_data_datetime(Mock()) == 'mock_date'
    assert BaseRainDataTestApi.get_oldest_data_date(Mock()) == date(2023, 1, 1)
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 20)) == 'mock_date'
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 9)) == 'mock_date'


def test_data_date_without_data_on_last_seven_days():
    # Given
    class BaseRainDataTestApi(BaseRainDataApi):
        @classmethod
        def get_newest_data_date_last_seven_days(cls, model, ref_date=None):
            return None

        @classmethod
        def list_all_data_dates(cls, model):
            return [date(2023, 2, 28) + timedelta(days=i) for i in range(10)] + [date(2023, 4, 1)] + [date(2023, 1, 1)]

    # When/Then
    assert BaseRainDataTestApi.get_newest_data_datetime(Mock()) == date(2023, 4, 1)
    assert BaseRainDataTestApi.get_oldest_data_date(Mock()) == date(2023, 1, 1)
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 20)) == date(2023, 3, 9)
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 9)) == date(2023, 3, 9)


def test_data_date_empty_folder():
    # Given
    class BaseRainDataTestApi(BaseRainDataApi):
        @classmethod
        def get_newest_data_date_last_seven_days(cls, model, ref_date=None):
            return None

        @classmethod
        def list_all_data_dates(cls, model):
            return []

    # When/Then
    assert BaseRainDataTestApi.get_newest_data_datetime(Mock()) is None
    assert BaseRainDataTestApi.get_oldest_data_date(Mock()) is None
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 20)) is None
    assert BaseRainDataTestApi.get_newest_data_date_before_date(Mock(), date(2023, 3, 9)) is None
