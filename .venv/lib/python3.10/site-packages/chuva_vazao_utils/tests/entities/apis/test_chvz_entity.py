import pytest

from dataclasses import dataclass
from unittest.mock import Mock

from chuva_vazao_utils.entities.apis.chvz_entity import ChVzEntityApi, EntityWithNameApi, ChVzEntity


def test_fetch_by_id():
    # Given
    mock_entity_1 = Mock(_id=1)
    mock_entity_2 = Mock(_id=2)

    class ChVzEntityTestApi(ChVzEntityApi):
        @classmethod
        def fetch_all(cls):
            return [
                mock_entity_1,
                mock_entity_2,
            ]

    # When/Then
    assert ChVzEntityTestApi.fetch_by_id(1) == mock_entity_1
    assert ChVzEntityTestApi.fetch_by_id(2) == mock_entity_2
    assert ChVzEntityTestApi.fetch_by_id(3) is None


def test_fetch_by_name():
    # Given
    @dataclass
    class ClassWithName:
        # Criada porque o "Mock" n√£o aceita atributo nome
        name: str

    mock_entity_1 = ClassWithName('entity_1')
    mock_entity_2 = ClassWithName('entity_2')

    class EntityWithNameTestApi(EntityWithNameApi):
        @classmethod
        def fetch_all(cls):
            return [
                mock_entity_1,
                mock_entity_2,
            ]

    # When/Then
    assert EntityWithNameTestApi.fetch_by_name('entity_1') == mock_entity_1
    assert EntityWithNameTestApi.fetch_by_name('entity_2') == mock_entity_2
    assert EntityWithNameTestApi.fetch_by_name('entity_3') is None


@pytest.mark.parametrize('id_1, id_2, equal', [(1, 1, True), (1, 2, False)])
def test_eq(id_1, id_2, equal):
    class MockEntityClass(ChVzEntity):
        pass

    entity_1 = MockEntityClass(id_1)
    entity_2 = MockEntityClass(id_2)
    assert (entity_1 == entity_2) == equal


@pytest.mark.parametrize('id_1, id_2', [(1, 1), (1, 2)])
def test_not_eq(id_1, id_2):
    class MockEntityClass1(ChVzEntity):
        pass

    class MockEntityClass2(ChVzEntity):
        pass

    entity_1 = MockEntityClass1(id_1)
    entity_2 = MockEntityClass2(id_2)
    assert entity_1 != entity_2
