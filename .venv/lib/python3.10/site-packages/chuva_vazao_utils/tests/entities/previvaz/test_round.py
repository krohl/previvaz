import json
import pytest

from datetime import date
from pytest_mock import MockerFixture
from unittest.mock import Mock, call

from chuva_vazao_utils.entities.inflow.inflow_source import InflowSourceMenu
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType
from chuva_vazao_utils.entities.inflow.inflow_weekly import WeeklyInflow
from chuva_vazao_utils.entities.inflow.origin_type import OriginTypeMenu
from chuva_vazao_utils.entities.previvaz.round import PrevivazDataApi


@pytest.fixture()
def mock_file() -> Mock:
    return Mock()


@pytest.fixture
def mock_previvaz_api(mock_pp_api: Mock, mock_inflow_type_api: Mock, mock_inflow_source_api: Mock, mock_origin_type_api: Mock, mock_file: Mock) -> PrevivazDataApi:
    class MockPrevivazDataApi(PrevivazDataApi):
        _power_plant_api = mock_pp_api
        _inflow_type_api = mock_inflow_type_api
        _inflow_source_api = mock_inflow_source_api
        _origin_type_api = mock_origin_type_api

        @classmethod
        def get_observed_inflows_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_forecast_inflows_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_pluvia_inflows_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_input_inflows_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_output_inflows_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_output_postos_file(cls, *args, **kwargs):
            return mock_file

        @classmethod
        def get_prevs_file(cls, *args, **kwargs):
            return mock_file

    return MockPrevivazDataApi


@pytest.fixture
def mock_inflow_type() -> Mock:
    return Mock(id=10)


@pytest.fixture
def mock_inflow_type_api(mock_inflow_type: Mock) -> Mock:
    mock_inflow_type_api = Mock()
    mock_inflow_type_api.fetch_by_id.return_value = mock_inflow_type
    mock_inflow_type_api.fetch_inflow_type.return_value = mock_inflow_type
    return mock_inflow_type_api


@pytest.fixture
def mock_inflow_source() -> Mock:
    return Mock(id=30)


@pytest.fixture
def mock_inflow_source_api(mock_inflow_source: Mock) -> Mock:
    mock_inflow_source_api = Mock()
    mock_inflow_source_api.fetch_by_id.return_value = mock_inflow_source
    mock_inflow_source_api.fetch_inflow_source.return_value = mock_inflow_source
    return mock_inflow_source_api


@pytest.fixture
def mock_inflow_origin() -> Mock:
    return Mock(id=20)


@pytest.fixture
def mock_origin_type_api(mock_inflow_origin: Mock) -> Mock:
    mock_origin_type_api = Mock()
    mock_origin_type_api.fetch_by_id.return_value = mock_inflow_origin
    mock_origin_type_api.fetch_origin_type.return_value = mock_inflow_origin
    return mock_origin_type_api


@pytest.fixture
def mock_pp() -> Mock:
    return Mock(id=40, posto_rdh='rdh', is_smap=True, cod='cod')
    # PowerPlant('mock_pp', 'mock_pp', 1, 'cod', 'rdh', 'ana', 21.0, 22.0, True, Mock(id=50), 60, 'begin', None, 40)


@pytest.fixture
def mock_pp_api(mock_pp: Mock) -> Mock:
    mock_inflow_type_api = Mock()
    mock_inflow_type_api.fetch_by_id.return_value = mock_pp
    mock_inflow_type_api.fetch_by_posto_rdh.return_value = mock_pp
    return mock_inflow_type_api


@pytest.fixture
def mock_oper_week() -> Mock:
    return Mock(
        week='mock_week',
        begin_date=date(2022, 12, 17),
        year=2022,
        month=12,
        end_date=date(2022, 12, 23),
    )


@pytest.fixture
def mock_oper_week_factory(mocker: MockerFixture, mock_oper_week: Mock) -> Mock:
    mock_oper_week_factory = mocker.patch('chuva_vazao_utils.entities.previvaz.file_parsers.SemanaOperativaFactory')
    mock_oper_week_factory.create_for_relative_rv.return_value = mock_oper_week
    mock_oper_week_factory.create_from_year_n_week.return_value = mock_oper_week
    return mock_oper_week_factory


#
# PrevivazObservedInflowsFileParser
#
def test_get_observed_inflows_from_file(
        mock_previvaz_api: PrevivazDataApi, mock_file: Mock,
        mock_inflow_type_api: Mock, mock_inflow_type: Mock,
        mock_origin_type_api: Mock, mock_inflow_origin: Mock,
        mock_inflow_source_api: Mock, mock_inflow_source: Mock,
        mock_pp_api: Mock, mock_pp: Mock,
        mock_oper_week_factory: Mock, mock_oper_week: Mock
):
    # Given
    mock_file.read_content.return_value = [json.dumps(
        [
            {
                'id_power_plant': 1,
                'posto_rdh': '18',
                'id_type_inflow': 3,
                'id_origin_type': 5,
                'n_week': 45,
                'year': 2022,
                'value': 830.0242857142856
            },
            {
                'id_power_plant': 2,
                'posto_rdh': '18',
                'id_type_inflow': 4,
                'id_origin_type': 6,
                'n_week': 46,
                'year': 2023,
                'value': 732.1514285714286
            }
        ]
    )]

    # When
    inflows = mock_previvaz_api.get_observed_inflows(Mock())
    # Then
    assert inflows == [
        WeeklyInflow(mock_oper_week, 830.0242857142856, mock_pp,
                     mock_inflow_type, mock_inflow_origin, mock_inflow_source),
        WeeklyInflow(mock_oper_week, 732.1514285714286, mock_pp,
                     mock_inflow_type, mock_inflow_origin, mock_inflow_source),
    ]

    assert mock_pp_api.fetch_by_id.call_count == 2
    mock_pp_api.fetch_by_id.assert_has_calls([call(1), call(2)])

    assert mock_inflow_type_api.fetch_by_id.call_count == 2
    mock_inflow_type_api.fetch_by_id.assert_has_calls([call(3), call(4)])

    assert mock_inflow_source_api.fetch_inflow_source.call_count == 2
    mock_inflow_source_api.fetch_inflow_source.assert_has_calls(
        [call(InflowSourceMenu.ONS), call(InflowSourceMenu.ONS)]
    )

    assert mock_origin_type_api.fetch_origin_type.call_count == 2
    mock_origin_type_api.fetch_origin_type.assert_has_calls(
        [call(OriginTypeMenu.ACOMPH), call(OriginTypeMenu.ACOMPH)])

    assert mock_oper_week_factory.create_from_year_n_week.call_count == 2
    mock_oper_week_factory.create_from_year_n_week.assert_has_calls([call(2022, 45), call(2023, 46)])


def test_save_inflows_to_observed_file(mock_previvaz_api: PrevivazDataApi, mock_file: Mock):
    # Given
    mock_pp = Mock(posto_rdh='mock_posto', id=10, is_smap='mock_smap', cod='mock_cod')
    mock_inflow_type = Mock(id=11)
    mock_inflow_origin = Mock(id=12)
    mock_inflow_source = Mock(id=13)
    mock_oper_week = Mock(end_date='mock_end', n_week='mock_week', year='mock_year')

    mock_inflows = [
        WeeklyInflow(mock_oper_week, 114.42, mock_pp, mock_inflow_type, mock_inflow_origin, mock_inflow_source),
        WeeklyInflow(mock_oper_week, 1339.59, mock_pp, mock_inflow_type, mock_inflow_origin, mock_inflow_source),
    ]

    expected_content = [
        {
            'id_power_plant': 10,
            'posto_rdh': 'mock_posto',
            'id_type_inflow': 11,
            'n_week': 'mock_week',
            'year': 'mock_year',
            'value': 114.42
        },
        {
            'id_power_plant': 10,
            'posto_rdh': 'mock_posto',
            'id_type_inflow': 11,
            'n_week': 'mock_week',
            'year': 'mock_year',
            'value': 1339.59
        }
    ]
    # When
    mock_previvaz_api.save_observed_inflows(mock_inflows, Mock())
    # Then
    mock_file.save_content.assert_called_once_with(
        json.dumps(expected_content)
    )


#
# PrevivazForecastInflowsFileParser
#
def test_forecast_get_inflows_from_file(
    mock_previvaz_api: PrevivazDataApi, mock_file: Mock,
    mock_inflow_type_api: Mock, mock_inflow_type: Mock,
    mock_origin_type_api: Mock, mock_inflow_origin: Mock,
    mock_pp_api: Mock, mock_pp: Mock,
    mock_oper_week_factory: Mock, mock_oper_week: Mock
):
    # Given
    file_content = [
        {
            "posto_rdh": "1",
            "priority": 3,
            "id_type_inflow": 3,
            "id_origin_type": 9,
            "value": 114.42,
            "id_power_plant": 2.0,
            "smap_flag": 1,
            "cod_power_plant": "NaN",
            "rv": "2022-12-22",
            "n_week": 51,
            "year": 2022
        },
        {
            "posto_rdh": "10",
            "priority": 3,
            "id_type_inflow": 4,
            "id_origin_type": 10,
            "value": 1339.59,
            "id_power_plant": 69.0,
            "smap_flag": 1,
            "cod_power_plant": "NaN",
            "rv": "2022-12-22",
            "n_week": 52,
            "year": 2023
        },
    ]
    file_content = [json.dumps(file_content)]

    mock_file.read_content.return_value = file_content
    # When
    inflows = mock_previvaz_api.get_forecast_inflows(Mock())
    # Then
    assert inflows == [
        WeeklyInflow(mock_oper_week, 114.42, mock_pp, mock_inflow_type, mock_inflow_origin, None),
        WeeklyInflow(mock_oper_week, 1339.59, mock_pp, mock_inflow_type, mock_inflow_origin, None),
    ]

    assert mock_pp_api.fetch_by_id.call_count == 2
    mock_pp_api.fetch_by_id.assert_has_calls([call(2), call(69)])

    assert mock_inflow_type_api.fetch_by_id.call_count == 2
    mock_inflow_type_api.fetch_by_id.assert_has_calls([call(3), call(4)])

    assert mock_origin_type_api.fetch_by_id.call_count == 2
    mock_origin_type_api.fetch_by_id.assert_has_calls([call(9), call(10)])

    assert mock_oper_week_factory.create_from_year_n_week.call_count == 2
    mock_oper_week_factory.create_from_year_n_week.assert_has_calls([call(2022, 51), call(2023, 52)])


def test_save_inflows_to_forecast_file(mock_previvaz_api: PrevivazDataApi, mock_file: Mock):
    # Given
    mock_pp = Mock(posto_rdh='mock_posto', id=10, is_smap='mock_smap', cod='mock_cod')
    mock_inflow_type = Mock(id=11)
    mock_inflow_origin = Mock(id=12)
    mock_oper_week = Mock(end_date=date(2022, 12, 21), n_week='mock_week', year='mock_year')

    mock_inflows = [
        WeeklyInflow(mock_oper_week, 114.42, mock_pp, mock_inflow_type, mock_inflow_origin, None),
        WeeklyInflow(mock_oper_week, 1339.59, mock_pp, mock_inflow_type, mock_inflow_origin, None),
    ]

    expected_content = [
        {
            "posto_rdh": "mock_posto",
            # "priority": 3,
            "id_type_inflow": 11,
            "id_origin_type": 12,
            "value": 114.42,
            "id_power_plant": 10,
            "smap_flag": "mock_smap",
            "cod_power_plant": "mock_cod",
            "rv": "2022-12-21",
            "n_week": "mock_week",
            "year": "mock_year",
        },
        {
            "posto_rdh": "mock_posto",
            # "priority": 3,
            "id_type_inflow": 11,
            "id_origin_type": 12,
            "value": 1339.59,
            "id_power_plant": 10,
            "smap_flag": "mock_smap",
            "cod_power_plant": "mock_cod",
            "rv": "2022-12-21",
            "n_week": "mock_week",
            "year": "mock_year",
        },
    ]
    # When
    mock_previvaz_api.save_forecast_inflows(mock_inflows, Mock())
    # Then
    mock_file.save_content.assert_called_once_with(
        json.dumps(expected_content)
    )


#
# PrevivazInputInflowsFileParser
#
def test_input_file_get_inflows_from_file(
    mock_previvaz_api: PrevivazDataApi, mock_file: Mock,
    mock_pp_api: Mock, mock_pp: Mock,
    mock_oper_week_factory: Mock, mock_oper_week: Mock
):
    # Given
    mock_file.read_content.return_value = [
        '1 2023 1 149',
        '6 2023 2 1208',
        '14 2024 3 90',
    ]
    # When
    inflows = mock_previvaz_api.get_input_inflows(Mock())
    # Then
    assert inflows == [
        WeeklyInflow(mock_oper_week, 149, mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 1208, mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 90, mock_pp, None, None, None),
    ]

    assert mock_pp_api.fetch_by_posto_rdh.call_count == 3
    mock_pp_api.fetch_by_posto_rdh.assert_has_calls([call('1'), call('6'), call('14')])

    assert mock_oper_week_factory.create_from_year_n_week.call_count == 3
    mock_oper_week_factory.create_from_year_n_week.assert_has_calls([call(2023, 1), call(2023, 2), call(2024, 3)])


def test_save_inflows_to_input_file(mock_previvaz_api: PrevivazDataApi, mock_file: Mock):
    # Given
    mock_pp = Mock(posto_rdh='mock_posto')
    mock_oper_week = Mock(n_week='mock_week', year='mock_year')
    mock_pp_2 = Mock(posto_rdh='mock_posto_2')
    mock_oper_week_2 = Mock(n_week='mock_week_2', year='mock_year_2')

    mock_inflows = [
        WeeklyInflow(mock_oper_week, 114.42, mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week_2, 1339.59, mock_pp_2, None, None, None),
    ]

    expected_content = 'mock_posto mock_year mock_week 114\nmock_posto_2 mock_year_2 mock_week_2 1340'
    # When
    mock_previvaz_api.save_input_inflows(mock_inflows, Mock())
    # Then
    mock_file.save_content.assert_called_once_with(expected_content)


#
# PrevivazOutputInflowsFileParser
#
def test_get_inflows_from_output_inflows_file(
    mock_previvaz_api: PrevivazDataApi, mock_file: Mock,
    mock_pp: Mock, mock_pp_api: Mock,
    mock_oper_week: Mock, mock_oper_week_factory: Mock
):
    # Given
    mock_file.read_content.return_value = [
        'VE 1 2023 1 2 181.200000 202.700000 214.400000 198.400000 188.200000 188.500000',
        'LI 1 2023 1 2 96.800000 127.100000 137.800000 131.100000 132.100000 126.900000',
        'LS 1 2023 1 2 265.700000 278.200000 290.900000 265.000000 244.200000 249.900000',
    ]

    ve_inflow_type = InflowType(-1, 'VE')
    li_inflow_type = InflowType(-1, 'LI')
    ls_inflow_type = InflowType(-1, 'LS')
    # When
    inflows = mock_previvaz_api.get_output_inflows(Mock())
    # Then
    assert inflows == [
        WeeklyInflow(mock_oper_week, 181.2, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 202.7, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 214.4, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 198.4, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 188.2, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 188.5, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 96.8, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 127.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 137.8, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 131.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 132.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 126.9, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 265.7, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 278.2, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 290.9, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 265.0, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 244.2, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 249.9, mock_pp, ls_inflow_type, None, None),
    ]

    assert mock_pp_api.fetch_by_posto_rdh.call_count == 3
    mock_pp_api.fetch_by_posto_rdh.assert_has_calls([call('1'), call('1'), call('1')])

    assert mock_oper_week_factory.create_for_relative_rv.call_count == 18
    mock_oper_week_factory.create_for_relative_rv.assert_has_calls([
        call(date(2023, 1, 1), 2), call(date(2023, 1, 1), 3), call(date(2023, 1, 1), 4),
        call(date(2023, 1, 1), 5), call(date(2023, 1, 1), 6), call(date(2023, 1, 1), 7),
        call(date(2023, 1, 1), 2), call(date(2023, 1, 1), 3), call(date(2023, 1, 1), 4),
        call(date(2023, 1, 1), 5), call(date(2023, 1, 1), 6), call(date(2023, 1, 1), 7),
        call(date(2023, 1, 1), 2), call(date(2023, 1, 1), 3), call(date(2023, 1, 1), 4),
        call(date(2023, 1, 1), 5), call(date(2023, 1, 1), 6), call(date(2023, 1, 1), 7),
    ])


def test_save_inflows_to_output_inflows_file(mock_previvaz_api: PrevivazDataApi, mock_file: Mock):
    # Given
    mock_pp = Mock(posto_rdh='mock_posto', id='mock_id')
    mock_oper_week = Mock(n_week='mock_week', year='mock_year', month='mock_month', end_date='end_date')

    ve_inflow_type = InflowType(-1, 'VE')
    li_inflow_type = InflowType(-2, 'LI')
    ls_inflow_type = InflowType(-3, 'LS')

    mock_inflows = [
        WeeklyInflow(mock_oper_week, 181.2, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 202.7, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 214.4, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 198.4, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 188.2, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 188.5, mock_pp, ve_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 96.8, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 127.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 137.8, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 131.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 132.1, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 126.9, mock_pp, li_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 265.7, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 278.2, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 290.9, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 265.0, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 244.2, mock_pp, ls_inflow_type, None, None),
        WeeklyInflow(mock_oper_week, 249.9, mock_pp, ls_inflow_type, None, None),
    ]

    expected_content = \
        'VE mock_posto mock_year mock_month mock_week 181.200000 202.700000 214.400000 198.400000 188.200000 188.500000\n'\
        'LI mock_posto mock_year mock_month mock_week 96.800000 127.100000 137.800000 131.100000 132.100000 126.900000\n'\
        'LS mock_posto mock_year mock_month mock_week 265.700000 278.200000 290.900000 265.000000 244.200000 249.900000'
    # When
    # PrevivazOutputInflowsFileParser.save_inflows_to_file(mock_inflows, mock_file)
    mock_previvaz_api.save_output_inflows(mock_inflows, Mock())
    # Then
    mock_file.save_content.assert_called_once_with(expected_content)


#
# PrevsFileParser
#
def test_get_inflow_from_prevs(
    mock_previvaz_api: PrevivazDataApi, mock_file: Mock,
    mock_pp_api: Mock, mock_pp: Mock,
    mock_oper_week_factory: Mock, mock_oper_week: Mock
):
    # Given
    mock_file.read_content.return_value = [
        '     1    1        79       177       182       112       110       148',
        '     2    2        79       177       182       112       110       148',
        '     3    6       554       991      1527       970       897      1208',
    ]

    mock_round = Mock()
    mock_round.oper_week = mock_oper_week
    # When
    inflows = mock_previvaz_api.get_prevs_inflows(mock_round)
    # Then
    assert inflows == [
        WeeklyInflow(mock_oper_week, 79.0, mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 177., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 182., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 112., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 110., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 148., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 79.0, mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 177., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 182., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 112., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 110., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 148., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 554., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 991., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 1527., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 970., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 897., mock_pp, None, None, None),
        WeeklyInflow(mock_oper_week, 1208., mock_pp, None, None, None),
    ]

    mock_pp_api.fetch_by_posto_rdh.assert_has_calls([
        call('1'), call('2'), call('6'),
    ])
    mock_oper_week_factory.create_for_relative_rv.assert_has_calls([
        call(date(2022, 12, 1), 0), call(date(2022, 12, 1), 1), call(date(2022, 12, 1), 2), call(date(2022, 12, 1), 3),
        call(date(2022, 12, 1), 4), call(date(2022, 12, 1), 5),
        call(date(2022, 12, 1), 0), call(date(2022, 12, 1), 1), call(date(2022, 12, 1), 2), call(date(2022, 12, 1), 3),
        call(date(2022, 12, 1), 4), call(date(2022, 12, 1), 5),
        call(date(2022, 12, 1), 0), call(date(2022, 12, 1), 1), call(date(2022, 12, 1), 2), call(date(2022, 12, 1), 3),
        call(date(2022, 12, 1), 4), call(date(2022, 12, 1), 5),
    ])


def test_save_inflows_to_prevs(mock_previvaz_api: PrevivazDataApi, mock_file: Mock, mock_oper_week_factory: Mock):
    # Given
    mock_pp_1 = Mock(id=1, posto_rdh='1')
    mock_pp_2 = Mock(id=2, posto_rdh='18')
    mock_pp_3 = Mock(id=3, posto_rdh='100')

    mock_oper_week_1 = Mock(end_date='2022-12-02', year=2022, month=12)
    mock_oper_week_2 = Mock(end_date='2022-12-09', year=2022, month=12)
    mock_oper_week_3 = Mock(end_date='2022-12-16', year=2022, month=12)
    mock_oper_week_4 = Mock(end_date='2022-12-23', year=2022, month=12)
    mock_oper_week_5 = Mock(end_date='2022-12-30', year=2022, month=12)
    mock_oper_week_6 = Mock(end_date='2023-01-06', year=2023, month=1)
    mock_oper_week_out_1 = Mock(end_date='2022-12-02', year=2022, month=11)
    mock_oper_week_out_2 = Mock(end_date='2022-12-02', year=2023, month=2)

    mock_oper_week_factory.create_for_relative_rv.side_effect = [
        mock_oper_week_1,
        mock_oper_week_2,
        mock_oper_week_3,
        mock_oper_week_4,
        mock_oper_week_5,
        mock_oper_week_6,
    ]

    mock_inflows = [
        WeeklyInflow(mock_oper_week_out_1, 100.0, mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_1, 79.0, mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_2, 177., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_3, 182., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_4, 112., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_5, 110., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_6, 148., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_out_2, 200., mock_pp_1, None, None, None),
        WeeklyInflow(mock_oper_week_1, 79.0, mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_2, 177., mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_3, 182., mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_4, 112., mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_5, 110., mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_6, 148., mock_pp_2, None, None, None),
        WeeklyInflow(mock_oper_week_1, 554., mock_pp_3, None, None, None),
        WeeklyInflow(mock_oper_week_2, 991., mock_pp_3, None, None, None),
        WeeklyInflow(mock_oper_week_3, 1527., mock_pp_3, None, None, None),
        WeeklyInflow(mock_oper_week_4, 970., mock_pp_3, None, None, None),
        WeeklyInflow(mock_oper_week_5, 897., mock_pp_3, None, None, None),
        WeeklyInflow(mock_oper_week_6, 1208., mock_pp_3, None, None, None),
    ]

    expected_content = \
        '     1    1        79       177       182       112       110       148\n'\
        '     2   18        79       177       182       112       110       148\n'\
        '     3  100       554       991      1527       970       897      1208'

    mock_round = Mock()
    mock_round.oper_week = mock_oper_week_3

    # When
    # PrevsFileParser.save_inflows_to_file(mock_inflows, mock_file, mock_oper_week_3)
    mock_previvaz_api.save_prevs_inflows(mock_inflows, mock_round)
    # Then
    mock_file.save_content.assert_called_once_with(expected_content)
