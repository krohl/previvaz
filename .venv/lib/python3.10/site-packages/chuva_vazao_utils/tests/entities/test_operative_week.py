import pytest
from datetime import date, datetime

from chuva_vazao_utils.calendar.chuva_vazao_calendar import ChuvaVazaoCalendar, CalendarType
from chuva_vazao_utils.entities.exception import SemanaOperativaDoNotExist
from chuva_vazao_utils.entities.operative_week import SemanaOperativaFactory

MODULE_PATH = 'chuva_vazao_utils.entities.operative_week'


@pytest.fixture(autouse=True)
def mock_calendar_pkg(mocker):
    mock_calendar = ChuvaVazaoCalendar(2022, CalendarType.SIMPLE_COMPATIBLE)

    mock_calendar_pkg = mocker.patch(f'{MODULE_PATH}.ChuvaVazaoCalendar')
    mock_calendar_pkg.get_next_weekday = ChuvaVazaoCalendar.get_next_weekday
    mock_calendar_pkg.return_value = mock_calendar
    return mock_calendar_pkg


#
# SemanaOperativa
#
def test_round_date():
    # Given
    sem_oper = SemanaOperativaFactory.create_from_date(date(2022, 12, 12))
    # When/Then
    assert sem_oper.round_date == date(2022, 12, 8)


@pytest.mark.parametrize(
    'ref_date, expected_week',
    [
        (date(2022, 12, 10), '2022123'),
        (date(2022, 12, 17), '2022124'),
        (date(2022, 12, 24), '2022125'),
        (date(2022, 12, 31), '2023011'),
        (date(2023, 1, 7), '2023012'),
        (date(2023, 1, 14), '2023013'),
        (date(2023, 1, 21), '2023014'),
    ],
)
def test_week(ref_date: date, expected_week: str):
    # When
    sem_oper = SemanaOperativaFactory.create_from_date(ref_date)
    # Then
    assert sem_oper.week == expected_week


@pytest.mark.parametrize(
    'rv_date, expected_next_week',
    [
        (date(2022, 12, 10), '2022124'),
        (date(2022, 12, 17), '2022125'),
        (date(2022, 12, 24), '2023011'),
        (date(2022, 12, 31), '2023012'),
        (date(2023, 1, 7), '2023013'),
        (date(2023, 1, 14), '2023014'),
        (date(2023, 1, 21), '2023021'),
    ],
)
def test_next(rv_date, expected_next_week):
    # Given
    sem_oper = SemanaOperativaFactory.create_from_date(rv_date)
    # When
    sem_oper_2 = sem_oper.next()
    # Then
    assert sem_oper_2.week == expected_next_week


#
# SemanaOperativaFactory
#
@pytest.mark.parametrize(
    'ref_date, expected_begin, expected_end',
    [
        (date(2022, 12, 10), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 11), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 12), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 13), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 14), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 15), date(2022, 12, 10), date(2022, 12, 16)),
        (date(2022, 12, 16), date(2022, 12, 10), date(2022, 12, 16)),
    ],
)
def test_factory_create_from_date_mensal(ref_date: date, expected_begin: date, expected_end: date):
    # When
    sem_oper = SemanaOperativaFactory.create_from_date(ref_date)
    # Then
    assert sem_oper.begin_date == expected_begin
    assert sem_oper.end_date == expected_end


@pytest.mark.parametrize(
    'ref_date, rv, expected_begin, expected_end',
    [
        (datetime(2022, 12, 12), 0, date(2022, 12, 10), date(2022, 12, 16)),
        (datetime(2022, 12, 12), 1, date(2022, 12, 17), date(2022, 12, 23)),
        (datetime(2022, 12, 12), 2, date(2022, 12, 24), date(2022, 12, 30)),
        (datetime(2022, 12, 12), 3, date(2022, 12, 31), date(2023, 1, 6)),
        (datetime(2022, 12, 12), 4, date(2023, 1, 7), date(2023, 1, 13)),
        (datetime(2022, 12, 12), 5, date(2023, 1, 14), date(2023, 1, 20)),
    ],
)
def test_factory_create_for_relative_rv(ref_date: date, rv: int, expected_begin: date, expected_end: date):
    # When
    sem_oper = SemanaOperativaFactory.create_for_relative_rv(ref_date, rv)
    # Then
    assert sem_oper.begin_date == expected_begin
    assert sem_oper.end_date == expected_end


@pytest.mark.parametrize(
    'deck_date, expected_begin, expected_end',
    [
        (datetime(2022, 12, 15), date(2022, 12, 17), date(2022, 12, 23)),
        (datetime(2023, 3, 2), date(2023, 3, 4), date(2023, 3, 10)),
    ],
)
def test_create_from_deck_date(deck_date: date, expected_begin: date, expected_end: date):
    # When
    sem_oper = SemanaOperativaFactory.create_from_deck_date(deck_date)
    # Then
    assert sem_oper.begin_date == expected_begin
    assert sem_oper.end_date == expected_end


@pytest.mark.parametrize(
    'year, month, rv, expected_week',
    [
        (2023, 1, 0, '2023011'),  # mês que começa domingo
        (2023, 1, 1, '2023012'),  # mês que começa domingo
        (2023, 1, 2, '2023013'),  # mês que começa domingo
        (2023, 1, 3, '2023014'),  # mês que começa domingo
        (2023, 5, 0, '2023051'),  # mês que começa segunda
        (2023, 8, 0, '2023081'),  # mês que começa terça
        (2023, 2, 0, '2023021'),  # mês que começa quarta
        (2023, 6, 0, '2023061'),  # mês que começa quinta
        (2023, 9, 0, '2023091'),  # mês que começa sexta
        (2023, 4, 0, '2023041'),  # mês que começa sabado
    ],
)
def test_create_from_year_month_rv(year: int, month: int, rv: int, expected_week: str):
    # When
    sem_oper = SemanaOperativaFactory.create_from_year_month_rv(year, month, rv)
    # Then
    assert sem_oper.week == expected_week


@pytest.mark.parametrize(
    'year, month, rv',
    [
        (2023, 1, 4),  # mês que começa domingo - avança para o mês seguinte, se a rv não existir
    ],
)
def test_create_from_year_month_rv_exception(year: int, month: int, rv: int):
    # When/Then
    with pytest.raises(SemanaOperativaDoNotExist):
        SemanaOperativaFactory.create_from_year_month_rv(year, month, rv)


@pytest.mark.parametrize(
    'year, n_week, expected_week',
    [
        (2023, 1, '2023011'),
        (2023, 2, '2023012'),
        (2023, 3, '2023013'),
        (2023, 4, '2023014'),
        (2023, 5, '2023021'),
        (2023, 6, '2023022'),
        (2023, 7, '2023023'),
        (2023, 8, '2023024'),
        (2023, 9, '2023031'),
        (2023, 10, '2023032'),
        (2023, 11, '2023033'),
    ],
)
def test_create_from_year_n_week(year: int, n_week: int, expected_week: str):
    # When
    sem_oper = SemanaOperativaFactory.create_from_year_n_week(year, n_week)
    # Then
    assert sem_oper.week == expected_week
    assert sem_oper.n_week == n_week
