import json
from datetime import date
from unittest import mock
from unittest.mock import Mock, PropertyMock

import pytest

from chuva_vazao_utils.calendar.interval_type import IntervalType
from chuva_vazao_utils.calculator.expression_parser.inflow_expression_parser import InflowExpressionParser


@pytest.fixture
def calendar_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.expression_parser.expression_parser.ChuvaVazaoCalendar')


@pytest.fixture
def fetch_coefficients_mock(mocker):
    return mocker.patch(
        'chuva_vazao_utils.calculator.expression_parser.expression_parser.fetch_coefficients',
        return_value=[
            {
                'id_power_plant': 70,
                'posto_rdh': '2',
                'id_power_plant_base': 2,
                'mes': date(2021, 1, 1),
                'tipo_coeficiente': 'A0',
                'valor': 1.123
            }, {
                'id_power_plant': 70,
                'posto_rdh': '2',
                'id_power_plant_base': 2,
                'mes': date(2021, 1, 1),
                'tipo_coeficiente': 'A1',
                'valor': 2.345
            }
        ]
    )


@pytest.fixture
def hydrogram_mock():
    return json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":null,
                "expressao":"vazao('PIMENTAL') - 'hidrograma'"
            }
        ],
        "hidrograma":{
            "hidrograma_ref":"B",
            "abr":[
                {
                    "dia":1,
                    "A":970.23,
                    "B":986.37,
                    "IBAMA":2117.28
                },
                {
                    "dia":2,
                    "A":975.04,
                    "B":992.52,
                    "IBAMA":2189.56
                },
                {
                    "dia":3,
                    "A":979.84,
                    "B":998.68,
                    "IBAMA":2261.83
                },
                {
                    "dia":4,
                    "A":984.64,
                    "B":1004.84,
                    "IBAMA":2334.11
                },
                {
                    "dia":5,
                    "A":989.45,
                    "B":1010.99,
                    "IBAMA":2406.39
                },
                {
                    "dia":6,
                    "A":994.25,
                    "B":1017.15,
                    "IBAMA":2478.66
                },
                {
                    "dia":7,
                    "A":999.05,
                    "B":1023.3,
                    "IBAMA":2550.94
                },
                {
                    "dia":8,
                    "A":1003.86,
                    "B":1029.46,
                    "IBAMA":2623.21
                },
                {
                    "dia":9,
                    "A":1008.66,
                    "B":1035.62,
                    "IBAMA":2695.49
                },
                {
                    "dia":10,
                    "A":1013.46,
                    "B":1041.77,
                    "IBAMA":2767.77
                },
                {
                    "dia":11,
                    "A":1018.27,
                    "B":1047.93,
                    "IBAMA":2840.04
                },
                {
                    "dia":12,
                    "A":1023.07,
                    "B":1054.08,
                    "IBAMA":2912.32
                },
                {
                    "dia":13,
                    "A":1027.87,
                    "B":1060.24,
                    "IBAMA":2984.6
                },
                {
                    "dia":14,
                    "A":1032.68,
                    "B":1066.39,
                    "IBAMA":3056.87
                },
                {
                    "dia":15,
                    "A":1037.48,
                    "B":1072.55,
                    "IBAMA":3129.15
                },
                {
                    "dia":16,
                    "A":1055.44,
                    "B":1083.56,
                    "IBAMA":3178.32
                },
                {
                    "dia":17,
                    "A":1073.4,
                    "B":1094.57,
                    "IBAMA":3227.5
                },
                {
                    "dia":18,
                    "A":1091.36,
                    "B":1105.58,
                    "IBAMA":3276.67
                },
                {
                    "dia":19,
                    "A":1109.32,
                    "B":1116.59,
                    "IBAMA":3325.85
                },
                {
                    "dia":20,
                    "A":1127.28,
                    "B":1127.6,
                    "IBAMA":3375.02
                },
                {
                    "dia":21,
                    "A":1145.24,
                    "B":1138.61,
                    "IBAMA":3424.2
                },
                {
                    "dia":22,
                    "A":1163.2,
                    "B":1149.62,
                    "IBAMA":3473.37
                },
                {
                    "dia":23,
                    "A":1181.17,
                    "B":1160.63,
                    "IBAMA":3522.54
                },
                {
                    "dia":24,
                    "A":1199.13,
                    "B":1171.64,
                    "IBAMA":3571.72
                },
                {
                    "dia":25,
                    "A":1217.09,
                    "B":1182.65,
                    "IBAMA":3620.89
                },
                {
                    "dia":26,
                    "A":1235.05,
                    "B":1193.66,
                    "IBAMA":3670.07
                },
                {
                    "dia":27,
                    "A":1253.01,
                    "B":1204.67,
                    "IBAMA":3719.24
                },
                {
                    "dia":28,
                    "A":1270.97,
                    "B":1215.68,
                    "IBAMA":3768.41
                },
                {
                    "dia":29,
                    "A":1288.93,
                    "B":1226.69,
                    "IBAMA":3817.59
                },
                {
                    "dia":30,
                    "A":1306.89,
                    "B":1237.7,
                    "IBAMA":3866.76
                },
                {
                    "dia":31,
                    "A":1324.85,
                    "B":1248.72,
                    "IBAMA":3915.94
                }
            ]
        },
        "PIMENTAL":{ "codigo":"288" }
    }
    """)


@pytest.fixture
def fetch_productivity_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.expression_parser.expression_parser.fetch_productivity')


def test_parse(fetch_coefficients_mock, fetch_productivity_mock):
    expression_mock = 'expression_mock'
    sub_codposto_mock = 'sub_codposto_mock'
    sub_coeff_mock = 'sub_coeff_mock'
    sub_hydrogram_mock = 'sub_hydrogram_mock'

    expression_parser = InflowExpressionParser(IntervalType.DAILY)
    expression_parser._sub_codposto = Mock(
        return_value=sub_codposto_mock
    )
    expression_parser._sub_coeff = Mock(
        return_value=sub_coeff_mock
    )
    expression_parser._sub_hydrogram = Mock(
        return_value=sub_hydrogram_mock
    )

    expression = expression_parser.parse(expression_mock)

    assert expression == sub_hydrogram_mock
    expression_parser._sub_codposto.assert_called_once_with(expression_mock)
    expression_parser._sub_coeff.assert_called_once_with(sub_codposto_mock)
    expression_parser._sub_hydrogram.assert_called_once_with(sub_coeff_mock)


def test_sub_codposto(fetch_coefficients_mock, fetch_productivity_mock):
    calc_patch = 'chuva_vazao_utils.calculator.expression_parser.expression_parser.ExpressionParser.calculations'

    expression_mock = "vazao('BBONITA') + vazao('ESOUZA')"
    expression_parser = InflowExpressionParser(IntervalType.DAILY)
    with mock.patch(calc_patch, new_callable=PropertyMock) as calc_mock:
        calc_mock.return_value = {
            "calculo_vazao": [
                {
                    "condicao": None,
                    "expressao": "vazao('BBONITA') + (vazao('ESOUZA')"
                }
            ],
            "BBONITA": {"codigo": "237"},
            "ESOUZA": {"codigo": "161"}
        }
        expression = expression_parser._sub_codposto(expression_mock)

        assert expression == "vazao('237') + vazao('161')"


def test_sub_coeff(fetch_coefficients_mock, fetch_productivity_mock):
    calc_patch = 'chuva_vazao_utils.calculator.expression_parser.expression_parser.ExpressionParser.calculations'

    expression_mock = "A0 + A1 * vazao('2')"
    expression_parser = InflowExpressionParser(IntervalType.DAILY)
    expression_parser.reference_date = date(2021, 1, 10)

    with mock.patch(calc_patch, new_callable=PropertyMock) as calc_mock:
        calc_mock.return_value = {
            "calculo_vazao": [
                {
                    "condicao": None,
                    "expressao": "A0 + A1 * vazao('ITUTINGA')"
                }
            ],
            "ITUTINGA": {"codigo": "2"}
        }
        expression = expression_parser._sub_coeff(expression_mock)

        assert expression == "1.123 + 2.345 * vazao('2')"


def test_sub_hydrogram_daily(fetch_coefficients_mock, fetch_productivity_mock, hydrogram_mock, calendar_mock):
    calc_patch = 'chuva_vazao_utils.calculator.expression_parser.expression_parser.ExpressionParser.calculations'

    expression_mock = "vazao('288') - 'hidrograma'"
    expression_parser = InflowExpressionParser(IntervalType.DAILY)
    expression_parser.reference_date = date(2021, 4, 26)

    with mock.patch(calc_patch, new_callable=PropertyMock) as calc_mock:
        calc_mock.return_value = hydrogram_mock
        expression = expression_parser._sub_hydrogram(expression_mock)
        assert expression == "vazao('288') - 1193.66"

    fetch_coefficients_mock.assert_called_once()
    fetch_productivity_mock.assert_called_once()


def test_sub_hydrogram_weekly(fetch_coefficients_mock, fetch_productivity_mock, hydrogram_mock):
    calc_patch = 'chuva_vazao_utils.calculator.expression_parser.expression_parser.ExpressionParser.calculations'

    expression_mock = "vazao('288') - 'hidrograma'"
    expression_parser = InflowExpressionParser(IntervalType.WEEKLY)
    expression_parser.reference_date = date(2021, 4, 23)

    with mock.patch(calc_patch, new_callable=PropertyMock) as calc_mock:
        calc_mock.return_value = hydrogram_mock
        expression = expression_parser._sub_hydrogram(expression_mock)
        assert expression == "vazao('288') - 1127.6"

    fetch_coefficients_mock.assert_called_once()
    fetch_productivity_mock.assert_called_once()
