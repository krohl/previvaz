import pytest

from chuva_vazao_utils.calculator.earm_max_calculator import EarmMaxCalculator


@pytest.fixture
def mocked_fetch_subsystems(mocker):
    subsystems_mock = [
        {'id_subsistema': 1, 'sigla': 'SE'},
        {'id_subsistema': 2, 'sigla': 'N'},
        {'id_subsistema': 3, 'sigla': 'NE'},
        {'id_subsistema': 4, 'sigla': 'S'},
    ]
    return mocker.patch('chuva_vazao_utils.calculator.earm_max_calculator.fetch_subsystems', return_value=subsystems_mock)


@pytest.fixture
def mocked_earm_max_expression_parser(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.earm_max_calculator.EarmMaxExpressionParser')


def test_eval(mocked_earm_max_expression_parser, mocked_fetch_subsystems):
    calculations_mock = {
        "earm_max": [{"condicao": None, "expressao": "add_fictitious('POSTO1', 'SE', earm_max=123.123456)"}],
        "POSTO1": {"codigo": "111"},
    }
    earm_max_mock = []

    mocked_earm_max_expression_parser.return_value.parse.return_value = "add_fictitious('111', 'SE', earm_max=123.123456)"

    earm_max_calculator = EarmMaxCalculator(earm_max_mock)
    result = earm_max_calculator.eval(calculations_mock)

    assert len(result) == len(earm_max_mock) + 1
    assert result[-1]['id_subsistema'] == 1
    assert result[-1]['earm_max'] == 123.123456
    assert result[-1]['posto_rdh'] == '111'
