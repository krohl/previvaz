from datetime import date
from unittest.mock import Mock

import pytest

from chuva_vazao_utils.exceptions import InflowNotFound
from chuva_vazao_utils.calculator.ena_calculator import EnaCalculator


@pytest.fixture
def ena_calculator_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaCalculator')


@pytest.fixture
def power_plant_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.PowerPlant')


@pytest.fixture
def ena_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaCalculation')


@pytest.fixture
def ena_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaDatabaseApi')


@pytest.fixture
def power_plant_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.PowerPlantDatabaseApi')


@pytest.fixture
def inflow_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.InflowDatabaseApi')


@pytest.fixture
def ena_calculator_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaCalculator')


@pytest.fixture
def sort_by_priority_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.sort_by_priority')


@pytest.fixture
def filter_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.filter_calculation')


@pytest.fixture
def calculate_power_plant_ena_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.calculate_power_plant_ena')


@pytest.fixture
def calculate_ena_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.calculate_ena')


@pytest.fixture
def weekly_inflow_factory_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.WeeklyInflowFactory')


@pytest.fixture
def ena_ree_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaReeDatabaseApi')


@pytest.fixture
def productivity_mock(mocker):
    return mocker.patch(
        'chuva_vazao_utils.calculator.ena_calculator.fetch_productivity',
        return_value=[{
            'id_power_plant': 2,
            'valor': 0.2
        }]
    )


@pytest.fixture
def ena_ree_expression_parser_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.ena_calculator.EnaReeExpressionParser')


@pytest.fixture
def inflow_calculator_mock(mocker):
    class InflowCalculatorMock:

        def __init__(self, *args):
            pass

        @staticmethod
        def eval(*args):
            pass

    return mocker.patch(
        'chuva_vazao_utils.calculator.ena_calculator.InflowCalculator',
        InflowCalculatorMock
    )


def test_eval(productivity_mock, ena_ree_expression_parser_mock, inflow_calculator_mock):
    calculations = {'calculo_vazao': 'calculo_vazao_mock'}
    inflows = [
        {
            'id_power_plant': 2,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        }
    ]
    inflow_date = date(2021, 4, 16)

    ena_calculator = EnaCalculator(2, inflows)
    inflow_calculator_mock.eval = Mock(
        return_value=123
    )

    ena = ena_calculator.eval(calculations, inflow_date)
    assert ena == 123 * 0.2


def test_not_found_inflow_existing(productivity_mock, ena_ree_expression_parser_mock, inflow_calculator_mock):
    calculations = {'calculo_vazao': 'calculo_vazao_mock'}
    inflows = [
        {
            'id_power_plant': 2,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        }
    ]
    inflow_date = date(2021, 4, 16)

    ena_calculator = EnaCalculator(2, inflows)
    ena_calculator._filter_inflow = Mock(
        return_value=None
    )
    inflow_calculator_mock.eval = Mock(
        return_value=123
    )

    ena = ena_calculator.eval(calculations, inflow_date)

    assert ena == 123 * 0.2
    assert ena_calculator.inflows[-1]['value'] == 123


def test_not_found_inflow(productivity_mock, ena_ree_expression_parser_mock, inflow_calculator_mock):
    calculations = {'calculo_vazao': 'calculo_vazao_mock'}
    inflows = [
        {
            'id_power_plant': 2,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        }
    ]
    inflow_date = date(2021, 4, 16)

    ena_calculator = EnaCalculator(2, inflows)
    ena_calculator._filter_inflow = Mock(
        return_value=None
    )
    inflow_calculator_mock.eval = Mock(
        return_value=None
    )

    with pytest.raises(InflowNotFound):
        ena_calculator.eval(calculations, inflow_date)


def test_eval_without_inflow_calculation(productivity_mock, ena_ree_expression_parser_mock, inflow_calculator_mock):
    calculations = {'calculo_vazao': 'calculo_vazao_mock'}
    inflows = [
        {
            'id_power_plant': 2,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        }
    ]
    inflow_date = date(2021, 4, 16)

    ena_calculator = EnaCalculator(2, inflows)
    inflow_calculator_mock.eval = Mock(
        return_value=None
    )

    ena = ena_calculator.eval(calculations, inflow_date)
    assert ena == 2056 * 0.2


def test_eval_without_productivity(productivity_mock, ena_ree_expression_parser_mock, inflow_calculator_mock):
    calculations = {'calculo_vazao': 'calculo_vazao_mock'}
    inflows = [
        {
            'id_power_plant': 3,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        }
    ]
    inflow_date = date(2021, 4, 16)

    ena_calculator = EnaCalculator(3, inflows)
    inflow_calculator_mock.eval = Mock(
        return_value=123
    )

    ena = ena_calculator.eval(calculations, inflow_date)
    assert ena is None
