from unittest.mock import Mock, call

import pytest

from chuva_vazao_utils.calculator.calculation import EnaCalculation, get_calculations, get_dependencies, sort_by_priority, filter_calculation


@pytest.fixture
def calculation_type_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.CalculationType')


@pytest.fixture
def table_base_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.TableBase')


@pytest.fixture
def ena_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.EnaCalculation', spec=EnaCalculation)


@pytest.fixture
def get_calculations_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.get_calculations')


@pytest.fixture
def filter_calculation_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.filter_calculation')


@pytest.fixture
def get_dependencies_mock(mocker):
    return mocker.patch('chuva_vazao_utils.calculator.calculation.get_dependencies')


def test_get_calculations(calculation_type_mock, table_base_mock, ena_calculation_mock):
    calculation_type_mock.value = 1
    table_base_mock.from_tablename.return_value = Mock()
    table_base_mock.from_tablename.return_value.select.return_value = [
        {'id_power_plant': 1}
    ]
    ena_calculation_instance_mock = Mock()
    ena_calculation_mock.return_value = ena_calculation_instance_mock

    result = get_calculations(calculation_type_mock)

    assert len(result) == 1
    assert result[0] == ena_calculation_instance_mock
    table_base_mock.from_tablename.return_value.select.assert_called_once()


def test_filter_calculation(calculation_type_mock, get_calculations_mock):
    id_power_plant_mock = 1
    calculation_mock_1 = Mock(id_power_plant=1)
    calculation_mock_2 = Mock(id_power_plant=2)

    get_calculations_mock.return_value = [
        calculation_mock_1, calculation_mock_2
    ]

    result = filter_calculation(id_power_plant_mock, calculation_type_mock)

    assert result == calculation_mock_1
    get_calculations_mock.assert_called_once_with(calculation_type_mock)


def test_sort_by_priority(calculation_type_mock, filter_calculation_mock, get_dependencies_mock):
    power_plant_mock_1 = Mock(id=1, posto_rdh=2)
    power_plant_mock_2 = Mock(id=2, posto_rdh=3)
    power_plant_mock_3 = Mock(id=3, posto_rdh=4)
    power_plant_mock_4 = Mock(id=4, posto_rdh=5)

    power_plants_mock = [
        power_plant_mock_1, power_plant_mock_2, power_plant_mock_3, power_plant_mock_4
    ]

    calculation_mock_1 = Mock()
    calculation_mock_2 = Mock()
    calculation_mock_3 = Mock()
    calculation_mock_4 = Mock()
    filter_calculation_mock.side_effect = [
        calculation_mock_1, calculation_mock_2, calculation_mock_3, calculation_mock_4
    ]

    get_dependencies_mock.side_effect = [
        {2: {3, 4}}, {3: {4}}, {4: {5}}, {5: {5}}
    ]

    result = sort_by_priority(power_plants_mock, calculation_type_mock)

    assert result == [power_plant_mock_4, power_plant_mock_3, power_plant_mock_2, power_plant_mock_1]
    filter_calculation_mock.assert_has_calls([
        call(1, calculation_type_mock),
        call(2, calculation_type_mock),
        call(3, calculation_type_mock),
        call(4, calculation_type_mock),
    ])
    get_dependencies_mock.assert_has_calls([
        call(power_plant_mock_1, calculation_mock_1),
        call(power_plant_mock_2, calculation_mock_2),
        call(power_plant_mock_3, calculation_mock_3),
        call(power_plant_mock_4, calculation_mock_4),
    ])


def test_get_dependencies():
    calculations_mock = {'2': {'codigo': '3'}}

    power_plant_mock = Mock(id_power_plant=1, posto_rdh='2')
    calculation_mock = Mock(calculation=calculations_mock)

    result = get_dependencies(power_plant_mock, calculation_mock)

    assert result == {'2': {'3'}}
