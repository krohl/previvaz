import json
from datetime import date
from unittest.mock import Mock, call

import pytest

from chuva_vazao_utils.calculator.inflow_calculator import InflowCalculator


@pytest.fixture
def expression_parser_mock(mocker):
    return mocker.patch(
        'chuva_vazao_utils.calculator.inflow_calculator.InflowExpressionParser'
    )


@pytest.fixture
def fetch_power_plants_mock(mocker):
    return mocker.patch(
        'chuva_vazao_utils.calculator.inflow_calculator.fetch_power_plants',
        return_value=[
            {
                "id_power_plant": 96,
                "cod_power_plant": '1234',
                "name_power_plant": 'BBONITA',
                "posto_rdh": '237',
                "smap_flag": 1
            },
            {
                "id_power_plant": 97,
                "cod_power_plant": '1234',
                "name_power_plant": 'ESOUZA',
                "posto_rdh": '161',
                "smap_flag": 1
            },
            {
                "id_power_plant": 102,
                "cod_power_plant": '1234',
                "name_power_plant": 'GUARAPIRANGA',
                "posto_rdh": '117',
                "smap_flag": 1
            },
            {
                "id_power_plant": 221,
                "cod_power_plant": '1234',
                "name_power_plant": 'BILLINGS',
                "posto_rdh": '118',
                "smap_flag": 1
            },
            {
                "id_power_plant": 313,
                "cod_power_plant": '1234',
                "name_power_plant": 'PIMENTAL',
                "posto_rdh": '288',
                "smap_flag": 1
            },
        ]
    )


@pytest.fixture
def hydrogram_mock():
    return json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":null,
                "expressao":"vazao('PIMENTAL') - 'hidrograma'"
            }
        ],
        "hidrograma":{
            "ano_inicio":2020,
            "A":[
                { "1":1100 },
                { "2":1600 },
                { "3":2500 },
                { "4":4000 },
                { "5":1800 },
                { "6":1200 },
                { "7":1000 },
                { "8":900 },
                { "9":750 },
                { "10":700 },
                { "11":800 },
                { "12":900 }
            ],
            "B":[
                { "1":1100 },
                { "2":1600 },
                { "3":4000 },
                { "4":8000 },
                { "5":4000 },
                { "6":2000 },
                { "7":1200 },
                { "8":900 },
                { "9":750 },
                { "10":700 },
                { "11":800 },
                { "12":900 }
            ]
        },
        "PIMENTAL":{ "codigo":"288" }
    }
    """)


def test_default_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {    "calculo_vazao": [
            {
                "condicao": null,
                "expressao": "vazao('BBONITA') - 0.1 * (vazao('ESOUZA') - vazao('GUARAPIRANGA') - vazao('BILLINGS')) - vazao('GUARAPIRANGA') - vazao('BILLINGS')"
            }
        ],
        "BBONITA": { "codigo": "237" },
        "ESOUZA": { "codigo": "161" },
        "GUARAPIRANGA": { "codigo": "117" },
        "BILLINGS": { "codigo": "118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 96,
            'inflow_date': date(2021, 4, 16),
            'value': 3123.5,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 97,
            'inflow_date': date(2021, 4, 16),
            'value': 2056,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 102,
            'inflow_date': date(2021, 4, 16),
            'value': 123,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 312,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="vazao('237') - 0.1 * (vazao('161') - vazao('117') - vazao('118')) - vazao('117') - vazao('118')"
    )
    inflow = inflow_calculator.eval(calculations, inflow_date)
    assert inflow == 2526.4
    inflow_calculator._parser.parse.assert_called_once_with(
        "vazao('BBONITA') - 0.1 * (vazao('ESOUZA') - vazao('GUARAPIRANGA') - vazao('BILLINGS')) - vazao('GUARAPIRANGA') - vazao('BILLINGS')"
    )


def test_type_conditional_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":null,
                "expressao":"vazao('BILLINGS') + 430"
            }
        ],
        "BILLINGS": { "codigo": "118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 450,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 250,
            'id_type_inflow': 2
        }
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="vazao('118') + 430"
    )
    inflow = inflow_calculator.eval(calculations, inflow_date, id_type=2)

    assert inflow == 680
    inflow_calculator._parser.parse.assert_called_once_with(
        "vazao('BILLINGS') + 430"
    )


def test_gt_conditional_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":"vazao('BILLINGS') <= 430",
                "expressao":"340"
            },
            {
                "condicao":"vazao('BILLINGS') > 430",
                "expressao":"vazao('BILLINGS') + 100"
            }
        ],
        "BILLINGS": { "codigo": "118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 450,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        side_effect=[
            "vazao('118') <= 430",
            "vazao('118') > 430",
            "vazao('118') + 100"
        ]
    )
    inflow = inflow_calculator.eval(calculations, inflow_date)

    assert inflow == 550
    inflow_calculator._parser.parse.assert_has_calls([
        call("vazao('BILLINGS') <= 430"),
        call("vazao('BILLINGS') > 430"),
        call("vazao('BILLINGS') + 100")
    ])


def test_lt_conditional_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":"vazao('BILLINGS') <= 430",
                "expressao":"340"
            },
            {
                "condicao":"vazao('BILLINGS') > 430",
                "expressao":"vazao('BILLINGS') + 100"
            }
        ],
        "BILLINGS": { "codigo": "118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 300,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        side_effect=[
            "vazao('118') <= 430",
            "340"
        ]
    )

    inflow = inflow_calculator.eval(calculations, inflow_date)

    assert inflow == 340
    inflow_calculator._parser.parse.assert_has_calls([
        call("vazao('BILLINGS') <= 430"),
        call("340")
    ])


def test_min_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":null,
                "expressao":"min([vazao('BILLINGS'), 144])"
            }
        ],
        "BILLINGS":{ "codigo":"118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 150,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="min([vazao('118'), 144])"
    )

    inflow = inflow_calculator.eval(calculations, inflow_date)

    assert inflow == 144
    inflow_calculator._parser.parse.assert_called_once_with(
        "min([vazao('BILLINGS'), 144])"
    )


def test_max_eval_inflow(expression_parser_mock, fetch_power_plants_mock):
    calculations = json.loads("""
    {
        "calculo_vazao":[
            {
                "condicao":null,
                "expressao":"max([vazao('BILLINGS'), 144])"
            }
        ],
        "BILLINGS":{ "codigo":"118" }
    }
    """)

    inflows = [
        {
            'id_power_plant': 221,
            'inflow_date': date(2021, 4, 16),
            'value': 150,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="max([vazao('118'), 144])"
    )

    inflow = inflow_calculator.eval(calculations, inflow_date)

    assert inflow == 150
    inflow_calculator._parser.parse.assert_called_once_with(
        "max([vazao('BILLINGS'), 144])"
    )


def test_hydrogram_eval_inflow(expression_parser_mock, fetch_power_plants_mock, hydrogram_mock):
    inflows = [
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 16),
            'value': 20000,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 16)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="vazao('288') - 8000"
    )

    inflow = inflow_calculator.eval(hydrogram_mock, inflow_date)

    assert inflow == 12000
    inflow_calculator._parser.parse.assert_called_once_with(
        "vazao('PIMENTAL') - 'hidrograma'"
    )


def test_ponder_hydrogram_eval_inflow(expression_parser_mock, fetch_power_plants_mock, hydrogram_mock):
    inflows = [
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 2),
            'value': 20000,
            'id_type_inflow': 1
        },
    ]
    inflow_date = date(2021, 4, 2)

    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._parser.parse = Mock(
        return_value="vazao('288') - 5142.857142857143"
    )

    inflow = inflow_calculator.eval(hydrogram_mock, inflow_date)

    assert inflow == pytest.approx(14857.14)
    inflow_calculator._parser.parse.assert_called_once_with(
        "vazao('PIMENTAL') - 'hidrograma'"
    )


def test_vazao_none_id_type(expression_parser_mock, fetch_power_plants_mock):
    inflows = [
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 2),
            'value': 20000,
            'id_type_inflow': 1
        },
    ]
    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._inflow_date = date(2021, 4, 2)

    inflow = inflow_calculator.vazao('288')

    assert inflow == 20000


def test_vazao_with_id_type(expression_parser_mock, fetch_power_plants_mock):
    inflows = [
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 2),
            'value': 20000,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 2),
            'value': 10000,
            'id_type_inflow': 3
        },
    ]
    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._inflow_date = date(2021, 4, 2)
    inflow_calculator._id_type = 3

    inflow = inflow_calculator.vazao('288')

    assert inflow == 10000


def test_vazao_add_days(expression_parser_mock, fetch_power_plants_mock):
    inflows = [
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 2),
            'value': 20000,
            'id_type_inflow': 1
        },
        {
            'id_power_plant': 313,
            'inflow_date': date(2021, 4, 3),
            'value': 10500,
            'id_type_inflow': 3
        },
    ]
    inflow_calculator = InflowCalculator(inflows)
    inflow_calculator._inflow_date = date(2021, 4, 2)
    inflow_calculator._id_type = 3

    inflow = inflow_calculator.vazao('288', dias=1)

    assert inflow == 10500
