import pytest
from datetime import date, datetime
from pytest_mock import MockerFixture
from unittest.mock import ANY, MagicMock, Mock

from chuva_vazao_utils.database_access.remvies.round import RemviesRoundSqlApi
from chuva_vazao_utils.entities.exception import EntityNotFound, NoRemviesRoundWithOutputForDate
from chuva_vazao_utils.entities.remvies.round import RemviesRound

MODULE_PATH = 'chuva_vazao_utils.database_access.remvies.round'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.RemviesRoundSqlApi.select')
    mock_select.return_value = [
        {
            'id_smap_input': 1, 'input': '{"key_1": "value_1"}', 'id_remvies_config': 10, 'base_date': date(2022, 12, 27),
            'cpu_date': datetime(2022, 12, 28, 8, 8)
        },
        {
            'id_smap_input': 2, 'input': '{"key_2": "value_2"}', 'id_remvies_config': 20, 'base_date': date(2022, 12, 27),
            'cpu_date': datetime(2022, 12, 28, 9, 9)
        }
    ]
    return mock_select


@pytest.fixture
def mock_round_output_folder_s3() -> Mock:
    return Mock()


@pytest.fixture(autouse=True)
def mock_file_api(mocker: MockerFixture, mock_round_output_folder_s3: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.RemviesRoundS3Api')
    mock_api.output_base_folder.return_value = mock_round_output_folder_s3
    return mock_api


def test_fetch_fetch_round_by_id(mock_select: MagicMock, mock_file_api: MagicMock):
    # When
    remvies_round = RemviesRoundSqlApi.fetch_round_by_id(2)
    # Then
    assert remvies_round \
        == RemviesRound(2, {'key_2': 'value_2'}, 20, date(2022, 12, 27), datetime(2022, 12, 28, 9, 9), mock_file_api)

    mock_select.assert_called_once_with(ANY, where={'id_smap_input': 2})


def test_fetch_fetch_round_by_id_not_found(mocker: MockerFixture):
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.RemviesRoundSqlApi.select')
    mock_select.return_value = []
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        RemviesRoundSqlApi.fetch_round_by_id(3)
    assert "id_smap_input\': 3" in str(e.value)


def test_fetch_round_before(mock_file_api: MagicMock):
    # Given
    ref_round = \
        RemviesRound(2, {'key_2': 'value_2'}, 20, date(2022, 12, 27), datetime(2022, 12, 28, 9, 9), mock_file_api)
    # When
    previous_round = RemviesRoundSqlApi.fetch_round_before(ref_round)
    # Then
    assert previous_round \
        == RemviesRound(1, {'key_1': 'value_1'}, 10, date(2022, 12, 27), datetime(2022, 12, 28, 8, 8), mock_file_api)


def test_last_round_given_base_date(mocker: MockerFixture, mock_select: MagicMock, mock_file_api: MagicMock):
    # Given
    mock_get_today = mocker.patch(f'{MODULE_PATH}.get_today')
    mock_get_today.return_value = date(2022, 12, 28)
    # When
    remvies_round = RemviesRoundSqlApi.last_round_given_base_date('mock')
    # Then
    assert remvies_round \
        == RemviesRound(2, {'key_2': 'value_2'}, 20, date(2022, 12, 27), datetime(2022, 12, 28, 9, 9), mock_file_api)
    mock_select.assert_called_once_with(ANY, where={'base_date': 'mock', 'cpu_date': [date(2022, 12, 28), None]})


def test_last_round_given_base_one_output(mocker: MockerFixture, mock_select: MagicMock, mock_file_api: MagicMock,
                                          mock_round_output_folder_s3: Mock):
    # Given
    mock_round_output_folder_s3.exists.side_effect = [False, True]

    mock_get_today = mocker.patch(f'{MODULE_PATH}.get_today')
    mock_get_today.return_value = date(2022, 12, 28)
    # When
    remvies_round = RemviesRoundSqlApi.last_round_given_base_date('mock', only_rounds_with_output=True)
    # Then
    assert remvies_round \
        == RemviesRound(1, {'key_1': 'value_1'}, 10, date(2022, 12, 27), datetime(2022, 12, 28, 8, 8), mock_file_api)
    mock_select.assert_called_once_with(ANY, where={'base_date': 'mock', 'cpu_date': [date(2022, 12, 28), None]})


def test_last_round_given_base_date_no_output(mock_round_output_folder_s3: Mock):
    # Given
    mock_round_output_folder_s3.exists.return_value = False
    # When/Then
    with pytest.raises(NoRemviesRoundWithOutputForDate):
        RemviesRoundSqlApi.last_round_given_base_date('mock', only_rounds_with_output=True)


def test_persist(mocker: MockerFixture, mock_file_api: MagicMock):
    # Given
    mock_insert = mocker.patch(f'{MODULE_PATH}.RemviesRoundSqlApi.insert')
    remvies_round = \
        RemviesRound(2, {'key_2', 'value_2'}, 20, date(2022, 12, 27), datetime(2022, 12, 28, 9, 9), mock_file_api)
    # When
    RemviesRoundSqlApi.persist_round(remvies_round)
    # Then
    mock_insert.assert_called_once_with(
        {
            'id_smap_input': 2,
            'input': {'key_2', 'value_2'},
            'id_remvies_config': 20,
            'base_date': date(2022, 12, 27),
            'cpu_date': datetime(2022, 12, 28, 9, 9),
        }
    )
