from pytest_mock import MockerFixture
from unittest.mock import ANY, call

from chuva_vazao_utils.database_access.calculation.calculation import CalculationDatabaseApi
from chuva_vazao_utils.entities.calculation.calculation_type import CalculationTypeMenu
from chuva_vazao_utils.entities.calculation.mean_inflow_calculation import MeanInflowCalculation
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSourceMenu
from chuva_vazao_utils.entities.inflow.origin_type import OriginTypeMenu

MODULE_PATH = 'chuva_vazao_utils.database_access.calculation.calculation'
MODULE_PATH_FACTORY = 'chuva_vazao_utils.database_access.calculation.calculation_factory'


def test_fetch_all_mean_inflow_calculation(mocker: MockerFixture):
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.TableBase.select')
    mock_select.return_value = [
        {
            'id_power_plant': 312,
            'calculation': '{"input_id_power_plant":313,"input_id_inflow_type":4,"input_id_inflow_source":5,"input_id_origin_type":6,"num_days":3,"output_id_inflow_type":7}',
            'id_calculation_type': CalculationTypeMenu.INFLOW_MEAN_LAST_DAYS.value
        }
    ]

    mock_type_api = mocker.patch(f'{MODULE_PATH_FACTORY}.InflowTypeDatabaseApi')
    mock_type_api.fetch_by_id.side_effect = ['mock_type_1', 'mock_type_2']

    mock_source_api = mocker.patch(f'{MODULE_PATH_FACTORY}.InflowSourceDatabaseApi')
    mock_source_api.fetch_by_id.return_value = 'mock_source_1'
    mock_source_api.fetch_inflow_source.return_value = 'mock_source_2'

    mock_origin_api = mocker.patch(f'{MODULE_PATH_FACTORY}.OriginTypeDatabaseApi')
    mock_origin_api.fetch_by_id.return_value = 'mock_origin_1'
    mock_origin_api.fetch_origin_type.return_value = 'mock_origin_2'

    mock_pp_api = mocker.patch(f'{MODULE_PATH_FACTORY}.PowerPlantDatabaseApi')
    mock_pp_api.fetch_by_id.side_effect = ['mock_pp_1', 'mock_pp_2']

    mock_inflow_api = mocker.patch(f'{MODULE_PATH_FACTORY}.InflowDatabaseApi')
    # When
    calculations = CalculationDatabaseApi.fetch_all_given_type(CalculationTypeMenu.INFLOW_MEAN_LAST_DAYS)
    # Then
    assert calculations == [
        MeanInflowCalculation(
            'mock_pp_1', 'mock_pp_2', 'mock_type_1', 'mock_source_1', 'mock_origin_1', 3, 'mock_type_2', 'mock_source_2', 'mock_origin_2', mock_inflow_api
        )
    ]

    mock_select.assert_called_once_with(
        ANY, where={'id_calculation_type': CalculationTypeMenu.INFLOW_MEAN_LAST_DAYS.value, 'end_date': None}
    )

    mock_type_api.fetch_by_id.assert_has_calls([call(4), call(7)])

    mock_source_api.fetch_by_id.assert_called_once_with(5)
    mock_source_api.fetch_inflow_source.assert_called_once_with(InflowSourceMenu.ESFERA)

    mock_origin_api.fetch_by_id.assert_called_once_with(6)
    mock_origin_api.fetch_origin_type.assert_called_once_with(OriginTypeMenu.MANUAL)

    mock_pp_api.fetch_by_id.assert_has_calls([call(312), call(313)])
