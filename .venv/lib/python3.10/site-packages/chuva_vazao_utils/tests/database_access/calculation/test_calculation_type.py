import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock

from chuva_vazao_utils.database_access.calculation.calculation_type import CalculationTypeDatabaseApi
from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.entities.calculation.calculation_type import CalculationType

MODULE_PATH = 'chuva_vazao_utils.database_access.calculation.calculation_type'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.CalculationTypeDatabaseApi.select')
    mock_select.return_value = [
        {'id_calculation_type': 1, 'descricao': 'mock_1'},
        {'id_calculation_type': 2, 'descricao': 'mock_2'},
    ]
    return mock_select


def test_fetch_all():
    # When/Then
    assert CalculationTypeDatabaseApi.fetch_all() == [CalculationType(1, 'mock_1'), CalculationType(2, 'mock_2')]


def test_fetch_by_id():
    # When/Then
    assert CalculationTypeDatabaseApi.fetch_by_id(1) == CalculationType(1, 'mock_1')
    assert CalculationTypeDatabaseApi.fetch_by_id(2) == CalculationType(2, 'mock_2')


def test_fetch_by_id_not_found():
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        CalculationTypeDatabaseApi.fetch_by_id(3)
    assert '"3"' in str(e.value)


def test_fetch_by_name():
    # When/Then
    assert CalculationTypeDatabaseApi.fetch_by_name('mock_1') == CalculationType(1, 'mock_1')
    assert CalculationTypeDatabaseApi.fetch_by_name('mock_2') == CalculationType(2, 'mock_2')


def test_fetch_by_name_not_found():
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        CalculationTypeDatabaseApi.fetch_by_name('mock_3')
    assert '"mock_3"' in str(e.value)


def test_cache(mock_select: MagicMock):
    # Given
    CalculationTypeDatabaseApi.fetch_all.cache_clear()
    # When
    CalculationTypeDatabaseApi.fetch_all()
    CalculationTypeDatabaseApi.fetch_by_id(1)
    CalculationTypeDatabaseApi.fetch_by_name('mock_2')
    # Then
    assert mock_select.call_count == 1
