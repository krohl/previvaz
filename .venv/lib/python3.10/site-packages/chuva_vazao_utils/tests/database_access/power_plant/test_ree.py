import pytest
from pytest_mock import MockerFixture

from chuva_vazao_utils.entities.power_plant.ree import ReservatorioEquivalente
from chuva_vazao_utils.database_access.power_plant.ree import ReservatorioEquivalenteDatabaseApi

MODULE_PATH = 'chuva_vazao_utils.database_access.power_plant.power_plant'


@pytest.fixture
def mock_ree() -> ReservatorioEquivalente:
    return ReservatorioEquivalente(1, 'mock_ree')


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture, mock_ree: ReservatorioEquivalente):
    mock_select = mocker.patch(f'{MODULE_PATH}.TableBase.select')
    mock_select.return_value = [
        {
            'id_reservatorio_equivalente': mock_ree.id,
            'descricao': mock_ree.name
        }
    ]
    return mock_select


def test_fetch_all(mock_ree: ReservatorioEquivalente):
    # When
    rees = ReservatorioEquivalenteDatabaseApi.fetch_all()
    # Then
    assert rees == [mock_ree]


def test_fetch_by_id(mock_ree):
    # When
    ree = ReservatorioEquivalenteDatabaseApi.fetch_by_id(1)
    # Then
    assert ree == mock_ree

    # When
    ree = ReservatorioEquivalenteDatabaseApi.fetch_by_id(2)
    # Then
    assert ree == None


def test_fetch_by_name(mock_ree):
    # When
    ree = ReservatorioEquivalenteDatabaseApi.fetch_by_name('mock_ree')
    # Then
    assert ree == mock_ree

    # When
    ree = ReservatorioEquivalenteDatabaseApi.fetch_by_name('dummy')
    # Then
    assert ree == None
