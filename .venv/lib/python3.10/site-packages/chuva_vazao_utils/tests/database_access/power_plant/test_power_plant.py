from unittest.mock import ANY, Mock, MagicMock

import pytest
from pytest_mock import MockerFixture

from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant
from chuva_vazao_utils.database_access.power_plant.power_plant import PowerPlantDatabaseApi

MODULE_PATH = 'chuva_vazao_utils.database_access.power_plant.power_plant'


@pytest.fixture
def mock_pp() -> PowerPlant:
    return PowerPlant(
        'name_power_plant',
        'full_name_power_plant',
        'id_river',
        'cod_power_plant',
        'posto_rdh',
        'codigo_ana',
        'latitude',
        'longitude',
        'smap_flag',
        'fluviometrico_flag',
        'mock_ree',
        'id_subsistema',
        'begin_date',
        'end_date',
        'id_power_plant',
    )


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture, mock_pp: PowerPlant):
    mock_select = mocker.patch(f'{MODULE_PATH}.TableBase.select')
    mock_select.return_value = [
        {
            'name_power_plant': mock_pp.name,
            'full_name_power_plant': mock_pp.full_name,
            'river': mock_pp.river,
            'cod_power_plant': mock_pp.cod,
            'posto_rdh': mock_pp.posto_rdh,
            'codigo_ana': mock_pp.codigo_ana,
            'latitude': mock_pp.latitude,
            'longitude': mock_pp.longitude,
            'smap_flag': mock_pp.is_smap,
            'fluviometrico_flag': mock_pp.is_fluviometric,
            'reservatorio_equivalente': mock_pp.reservatorio_eqv,
            'subsistema': mock_pp.subsistema,
            'begin_date': mock_pp.begin_date,
            'end_date': mock_pp.end_date,
            'id_power_plant': mock_pp.id,
        }
    ]
    return mock_select


def test_fetch_all(mock_select: MagicMock, mock_pp: PowerPlant):
    # Given
    PowerPlantDatabaseApi.from_dict = Mock(return_value=mock_pp)
    # When
    power_plants = PowerPlantDatabaseApi.fetch_all()
    # Then
    mock_select.assert_called_once_with(ANY, where={'end_date': None})
    assert power_plants == [mock_pp]


def test_fetch_by_id(mock_pp: PowerPlant):
    # Given
    PowerPlantDatabaseApi.from_dict = Mock(return_value=mock_pp)
    # When/Then
    pp = PowerPlantDatabaseApi.fetch_by_id(mock_pp.id)
    # When/Then
    assert pp == mock_pp


def test_fetch_by_id_not_found():
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        PowerPlantDatabaseApi.fetch_by_id(3)
    assert '"3"' in str(e.value)


def test_fetch_by_full_name(mock_pp: PowerPlant):
    # Given
    PowerPlantDatabaseApi.from_dict = Mock(return_value=mock_pp)
    # When/Then
    assert PowerPlantDatabaseApi.fetch_by_full_name(mock_pp.full_name) == mock_pp


def test_fetch_by_full_name_not_found():
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        PowerPlantDatabaseApi.fetch_by_full_name('mock_4')
    assert 'mock_4' in str(e.value)


def test_fetch_by_posto_rdh(mock_pp: PowerPlant):
    PowerPlantDatabaseApi.from_dict = Mock(return_value=mock_pp)
    # When/Then
    pp = PowerPlantDatabaseApi.fetch_by_posto_rdh(mock_pp.posto_rdh)
    # Then
    assert pp == mock_pp


def test_fetch_by_posto_rdhnot_found():
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        PowerPlantDatabaseApi.fetch_by_posto_rdh('mock_4')
    assert 'mock_4' in str(e.value)


def test_fetch_fluviometric_power_plants(mock_select: MagicMock, mock_pp: PowerPlant):
    # Given
    PowerPlantDatabaseApi.from_dict = Mock(return_value=mock_pp)
    # When/Then
    pp = PowerPlantDatabaseApi.fetch_fluviometric_power_plants()
    # Then
    mock_select.assert_called_once_with(ANY, where={'end_date': None, 'fluviometrico_flag': True})
    assert pp == [mock_pp]


def test_eq():
    pp_1 = PowerPlant('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', id=1)
    pp_2 = PowerPlant('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', id=2)
    pp_3 = PowerPlant('1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', id=1)
    assert pp_1 == pp_3
    assert pp_1 != pp_2
