from datetime import date, datetime
from unittest.mock import MagicMock, Mock

import pytest

from chuva_vazao_utils.database_access.inflow import Inflow


@pytest.fixture
def database_mock():
    return MagicMock()


@pytest.fixture
def executemany_query_mock(mocker):
    return mocker.patch(
        'chuva_vazao_utils.database_access.table_base.executemany'
    )


@pytest.fixture
def cursor_mock(mocker):
    class CursorMock:

        @staticmethod
        def fetchall():
            pass

    return CursorMock()


def test_select(database_mock, cursor_mock):
    columns = ', '.join([
        'id_inflow', 'id_power_plant', 'id_inflow_source',
        'id_origin_type', 'id_type_inflow', 'value',
        'inflow_date', 'begin_date'
    ])
    conditions = {
        'inflow_date': [
            date(2021, 4, 15), None
        ],
        'id_origin_type': 6,
        'id_inflow_source': 5,
        'id_power_plant': [1, 2],
        'end_date': None
    }
    Inflow.query_builder.create_select = Mock(
        return_value=('select_mock', 'data_mock')
    )
    cursor_mock.fetchall = Mock(
        return_value='result'
    )
    database_mock.execute = Mock(
        return_value=cursor_mock
    )
    Inflow._database = database_mock

    results = Inflow.select(columns, where=conditions)

    assert results == 'result'
    Inflow.query_builder.create_select.assert_called_once_with(columns, conditions, None, None)
    database_mock.execute.assert_called_once_with('select_mock', 'data_mock')
    cursor_mock.fetchall.assert_called_once()


def test_insert_dict(database_mock):
    values = {
        'begin_date': datetime.now(),
        'id_inflow_source': 5,
        'id_origin_type': 6,
        'id_power_plant': 2,
        'id_type_inflow': 4,
        'inflow_date': '2021-03-08T00:00:00',
        'value': 85.85,
    }
    Inflow.query_builder.create_insert = Mock(
        return_value=('insert_mock', 'data_mock')
    )
    Inflow._database = database_mock

    database_mock.execute = Mock()

    Inflow.insert(values)

    database_mock.execute.assert_called_once_with('insert_mock', 'data_mock', True)
    Inflow.query_builder.create_insert.assert_called_once_with(**values)


def test_insert_list(database_mock):
    values = [{
        'begin_date': datetime.now(),
        'id_inflow_source': 5,
        'id_origin_type': 6,
        'id_power_plant': 2,
        'id_type_inflow': 4,
        'inflow_date': date(2021, 4, 1),
        'value': 85.85,
    }, {
        'begin_date': datetime.now(),
        'id_inflow_source': 5,
        'id_origin_type': 6,
        'id_power_plant': 2,
        'id_type_inflow': 4,
        'inflow_date': date(2021, 4, 2),
        'value': 100,
    }]
    data = [tuple(v.values()) for v in values]

    Inflow.query_builder.create_insert = Mock(
        return_value=('insert_mock', 'data_mock')
    )
    database_mock.executemany = Mock()
    Inflow._database = database_mock

    Inflow.insert(values)

    database_mock.executemany.assert_called_once_with('insert_mock', data, True)
    Inflow.query_builder.create_insert.assert_called_once_with(**values[0])


def test_update_same_stm(database_mock):
    values = [
        {'end_date': datetime.now()},
        {'end_date': datetime.now()}
    ]
    conditions = [
        {'id_inflow': 16196309},
        {'id_inflow': 16196327}
    ]

    Inflow.query_builder.create_update = Mock(
        side_effect=[
            ('update_stm_1', 'data_1'),
            ('update_stm_1', 'data_2')
        ]
    )
    database_mock.executemany = Mock()
    Inflow._database = database_mock

    Inflow.update(values, where=conditions)

    database_mock.executemany.assert_called_once_with('update_stm_1', ['data_1', 'data_2'], True)
    Inflow.query_builder.create_update.assert_called()
    assert Inflow.query_builder.create_update.call_count == 2


def test_update_diff_stm(database_mock):
    values = [
        {'end_date': datetime.now(), 'value': 123},
        {'end_date': datetime.now()}
    ]
    conditions = [
        {'id_inflow': 16196309},
        {'id_inflow': 16196327}
    ]

    Inflow.query_builder.create_update = Mock(
        side_effect=[
            ('update_stm_1', 'data_1'),
            ('update_stm_2', 'data_2')
        ]
    )
    database_mock.execute = Mock()
    Inflow._database = database_mock

    Inflow.update(values, where=conditions)

    Inflow.query_builder.create_update.assert_called()
    assert database_mock.execute.call_count == 2
    assert Inflow.query_builder.create_update.call_count == 2


def test_delete(database_mock):
    conditions = {'id': 7}

    Inflow.query_builder.create_delete = Mock(
        return_value=('delete_mock', 'data_mock')
    )
    database_mock.execute = Mock()
    Inflow._database = database_mock

    Inflow.delete(where=conditions)

    Inflow.query_builder.create_delete.assert_called_once_with(conditions)
    database_mock.execute.assert_called_once_with('delete_mock', 'data_mock', True)
