from unittest.mock import Mock, call

import pytest

from chuva_vazao_utils.database_access.river.river import RiverDatabaseApi
from chuva_vazao_utils.entities.exception import EntityNotFound


@pytest.fixture
def table_base_select_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.river.river.TableBase.select')


def test_fetch_all(table_base_select_mock):
    rivers_mock = ['mocked_river_1', 'mocked_river_2']
    table_base_select_mock.return_value = rivers_mock
    RiverDatabaseApi.from_dict = Mock(side_effect=['mocked_river_obj_1', 'mocked_river_obj_2'])

    result = RiverDatabaseApi.fetch_all()

    assert result == ['mocked_river_obj_1', 'mocked_river_obj_2']
    table_base_select_mock.assert_called_once_with(
        ['name_river', '`order`', 'configs', 'id_river'], where={'end_date': None}
    )
    RiverDatabaseApi.from_dict.assert_has_calls(
        [call(rivers_mock[0]), call(rivers_mock[1])]
    )


def test_fetch_by_id():
    RiverDatabaseApi.fetch_all = Mock(return_value=[Mock(id=1), Mock(id=2)])

    result = RiverDatabaseApi.fetch_by_id(2)

    assert result == RiverDatabaseApi.fetch_all.return_value[1]


def test_fetch_by_id_not_found():
    RiverDatabaseApi.fetch_all = Mock(return_value=[Mock(id=1), Mock(id=2)])

    with pytest.raises(EntityNotFound):
        RiverDatabaseApi.fetch_by_id(3)
