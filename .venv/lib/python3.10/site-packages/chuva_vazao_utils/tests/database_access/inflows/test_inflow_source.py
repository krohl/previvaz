import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock

from chuva_vazao_utils.database_access.inflows.inflow_source import InflowSourceDatabaseApi
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource

MODULE_PATH = 'chuva_vazao_utils.database_access.inflows.inflow_source'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.InflowSourceDatabaseApi.select')
    mock_select.return_value = [
        {'id_inflow_source': 1, 'name_inflow_source': 'mock_1'},
        {'id_inflow_source': 2, 'name_inflow_source': 'mock_2'},
    ]
    return mock_select


def test_fetch_all():
    # When/Then
    assert InflowSourceDatabaseApi.fetch_all() == [InflowSource(1, 'mock_1'), InflowSource(2, 'mock_2')]


def test_fetch_by_id():
    # When/Then
    assert InflowSourceDatabaseApi.fetch_by_id(1) == InflowSource(1, 'mock_1')
    assert InflowSourceDatabaseApi.fetch_by_id(2) == InflowSource(2, 'mock_2')
    assert InflowSourceDatabaseApi.fetch_by_id(3) == None


def test_fetch_by_name():
    # When/Then
    assert InflowSourceDatabaseApi.fetch_by_name('mock_1') == InflowSource(1, 'mock_1')
    assert InflowSourceDatabaseApi.fetch_by_name('mock_2') == InflowSource(2, 'mock_2')
    assert InflowSourceDatabaseApi.fetch_by_name('mock_3') == None


def test_cache(mock_select: MagicMock):
    # Given
    InflowSourceDatabaseApi.fetch_all.cache_clear()
    # When
    InflowSourceDatabaseApi.fetch_all()
    InflowSourceDatabaseApi.fetch_by_id(1)
    InflowSourceDatabaseApi.fetch_by_name('mock_2')
    # Then
    assert mock_select.call_count == 1
