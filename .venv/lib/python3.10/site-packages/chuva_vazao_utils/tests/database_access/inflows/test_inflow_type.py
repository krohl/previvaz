import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock

from chuva_vazao_utils.database_access.inflows.inflow_type import InflowTypeDatabaseApi
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType

MODULE_PATH = 'chuva_vazao_utils.database_access.inflows.inflow_type'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.InflowTypeDatabaseApi.select')
    mock_select.return_value = [
        {'id_type_inflow': 1, 'name_type_inflow': 'mock_1'},
        {'id_type_inflow': 2, 'name_type_inflow': 'mock_2'},
    ]
    return mock_select


def test_fetch_all():
    # When/Then
    assert InflowTypeDatabaseApi.fetch_all() == [InflowType(1, 'mock_1'), InflowType(2, 'mock_2')]


def test_fetch_by_id():
    # When/Then
    assert InflowTypeDatabaseApi.fetch_by_id(1) == InflowType(1, 'mock_1')
    assert InflowTypeDatabaseApi.fetch_by_id(2) == InflowType(2, 'mock_2')
    assert InflowTypeDatabaseApi.fetch_by_id(3) == None


def test_fetch_by_name():
    # When/Then
    assert InflowTypeDatabaseApi.fetch_by_name('mock_1') == InflowType(1, 'mock_1')
    assert InflowTypeDatabaseApi.fetch_by_name('mock_2') == InflowType(2, 'mock_2')
    assert InflowTypeDatabaseApi.fetch_by_name('mock_3') == None


def test_cache(mock_select: MagicMock):
    # Given
    InflowTypeDatabaseApi.fetch_all.cache_clear()
    # When
    InflowTypeDatabaseApi.fetch_all()
    InflowTypeDatabaseApi.fetch_by_id(1)
    InflowTypeDatabaseApi.fetch_by_name('mock_2')
    # Then
    assert mock_select.call_count == 1
