import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock

from chuva_vazao_utils.database_access.inflows.origin_type import OriginTypeDatabaseApi
from chuva_vazao_utils.entities.inflow.origin_type import OriginType

MODULE_PATH = 'chuva_vazao_utils.database_access.inflows.origin_type'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    mock_select = mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi.select')
    mock_select.return_value = [
        {'id_origin_type': 1, 'name_origin_type': 'mock_1'},
        {'id_origin_type': 2, 'name_origin_type': 'mock_2'},
    ]
    return mock_select


@pytest.fixture
def mock_origin_api(mocker: MockerFixture) -> MagicMock():
    return mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi')


def test_fetch_all(mock_origin_api: MagicMock):
    # When/Then
    assert OriginTypeDatabaseApi.fetch_all() == [
        OriginType(1, 'mock_1'),
        OriginType(2, 'mock_2')
    ]


def test_fetch_by_id(mock_origin_api: MagicMock):
    # Given
    OriginTypeDatabaseApi.fetch_all.cache_clear()
    # When/Then
    assert OriginTypeDatabaseApi.fetch_by_id(1) == OriginType(1, 'mock_1')
    assert OriginTypeDatabaseApi.fetch_by_id(2) == OriginType(2, 'mock_2')
    assert OriginTypeDatabaseApi.fetch_by_id(3) == None


def test_fetch_by_name(mock_origin_api: MagicMock):
    # Given
    OriginTypeDatabaseApi.fetch_all.cache_clear()
    # When/Then
    assert OriginTypeDatabaseApi.fetch_by_name('mock_1') == OriginType(1, 'mock_1')
    assert OriginTypeDatabaseApi.fetch_by_name('mock_2') == OriginType(2, 'mock_2')
    assert OriginTypeDatabaseApi.fetch_by_name('mock_3') == None


def test_cache(mock_select: MagicMock):
    # Given
    OriginTypeDatabaseApi.fetch_all.cache_clear()
    # When
    OriginTypeDatabaseApi.fetch_all()
    OriginTypeDatabaseApi.fetch_by_id(1)
    OriginTypeDatabaseApi.fetch_by_name('mock_2')
    # Then
    assert mock_select.call_count == 1
