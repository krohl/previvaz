import pytest
from datetime import date, datetime
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.database_access.inflows.inflow import InflowDatabaseApi
from chuva_vazao_utils.entities.inflow.inflow import Inflow
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant

MODULE_PATH = 'chuva_vazao_utils.database_access.inflows.inflow'


@pytest.fixture(autouse=True)
def mock_power_plant(mocker: MockerFixture) -> Mock:
    mock_power_plant = Mock(id='mock_pp')

    mock_pp_api = mocker.patch(f'{MODULE_PATH}.PowerPlantDatabaseApi')
    mock_pp_api.fetch_by_id.return_value = mock_power_plant

    return mock_power_plant


@pytest.fixture(autouse=True)
def mock_inflow_type(mocker: MockerFixture) -> Mock:
    mock_inflow_type = Mock(id='mock_type')

    mock_type_api = mocker.patch(f'{MODULE_PATH}.InflowTypeDatabaseApi')
    mock_type_api.fetch_by_id.return_value = mock_inflow_type

    return mock_inflow_type


@pytest.fixture(autouse=True)
def mock_inflow_source(mocker: MockerFixture) -> Mock:
    mock_inflow_source = Mock(id='mock_source')

    mock_source_api = mocker.patch(f'{MODULE_PATH}.InflowSourceDatabaseApi')
    mock_source_api.fetch_by_id.return_value = mock_inflow_source

    return mock_inflow_source


@pytest.fixture(autouse=True)
def mock_origin_type(mocker: MockerFixture) -> Mock:
    mock_origin_type = Mock(id='mock_origin')

    mock_origin_api = mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi')
    mock_origin_api.fetch_by_id.return_value = mock_origin_type

    return mock_origin_type


@pytest.fixture
def get_now_mock(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.get_now')


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.TableBase.select')


@pytest.fixture(autouse=True)
def mock_insert(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi.insert')


@pytest.fixture(autouse=True)
def mock_update(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi.update')


def test_fetch_between_dates_conditions_1(mocker: MockerFixture):
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi.select')
    mock_init = datetime(2022, 12, 8)
    mock_end = datetime(2022, 12, 9)

    # When
    InflowDatabaseApi.fetch_between_dates(mock_init, mock_end)
    # Then
    mock_select.assert_called_once_with(
        {
            'end_date': None,
            'inflow_date': [mock_init, mock_end],
        }
    )


def test_fetch_between_dates_conditions_2(mocker: MockerFixture):
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi.select')
    mock_init = datetime(2022, 12, 8)
    mock_end = datetime(2022, 12, 9)

    # When
    InflowDatabaseApi.fetch_between_dates(
        mock_init,
        mock_end,
        power_plants=[Mock(id=1), Mock(id=2)],
        inflow_type=Mock(id=3),
        inflow_source=Mock(id=4),
        origin_type=Mock(id=5),
        round_id=100,
    )
    # Then
    mock_select.assert_called_once_with(
        {
            'end_date': None,
            'inflow_date': [mock_init, mock_end],
            'id_power_plant': [1, 2],
            'id_type_inflow': 3,
            'id_inflow_source': 4,
            'id_origin_type': 5,
            'id_rodada_smap': 100,
        }
    )


def test_fetch_between_dates_conditions_3(mocker: MockerFixture):
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.InflowDatabaseApi.select')
    mock_init = datetime(2022, 12, 8)
    mock_end = datetime(2022, 12, 9)

    # When
    InflowDatabaseApi.fetch_between_dates(
        mock_init,
        mock_end,
        power_plants=None,
        inflow_type=None,
        inflow_source=None,
        origin_type=None,
        round_id=None,
    )
    # Then
    mock_select.assert_called_once_with(
        {
            'end_date': None,
            'inflow_date': [mock_init, mock_end],
            'id_power_plant': None,
            'id_type_inflow': None,
            'id_inflow_source': None,
            'id_origin_type': None,
            'id_rodada_smap': None,
        }
    )


def test_fetch_between_dates(
    mock_select: MagicMock, mock_power_plant: Mock, mock_inflow_type: Mock, mock_inflow_source: Mock, mock_origin_type: Mock
):
    # Given
    mock_init = datetime(2022, 12, 8)
    mock_end = datetime(2022, 12, 9)
    expected_inflows = [
        Inflow(mock_init, 13.13, mock_power_plant, mock_inflow_type, mock_inflow_source, mock_origin_type, id=100),
        Inflow(mock_end, 26.26, mock_power_plant, mock_inflow_type,
               mock_inflow_source, mock_origin_type, id=101, round_id=1000)
    ]

    mock_select.return_value = [
        {
            'inflow_date': mock_init,
            'value': 13.13,
            'id_power_plant': mock_power_plant.id,
            'id_type_inflow': mock_inflow_type.id,
            'id_inflow_source': mock_inflow_source.id,
            'id_origin_type': mock_origin_type.id,
            'id_inflow': 100,
            'id_rodada_smap': None,
        },
        {
            'inflow_date': mock_end,
            'value': 26.26,
            'id_power_plant': mock_power_plant.id,
            'id_type_inflow': mock_inflow_type.id,
            'id_inflow_source': mock_inflow_source.id,
            'id_origin_type': mock_origin_type.id,
            'id_inflow': 101,
            'id_rodada_smap': 1000,
        },
    ]
    # When
    inflows = InflowDatabaseApi.fetch_between_dates(
        mock_init, mock_end, [mock_power_plant], mock_inflow_type, mock_inflow_source, mock_origin_type
    )
    # Then
    assert inflows == expected_inflows


def test_persist_inflows(
    mock_insert: MagicMock, get_now_mock: MagicMock
):
    # Given
    mock_type = InflowType(1, 'mock_type')
    mock_source = InflowSource(2, 'mock_source')
    mock_origin = OriginType(3, 'mock_origin')
    power_plant_1 = Mock(id=10)
    power_plant_2 = Mock(id=20)
    now_mock = datetime(2023, 1, 1)
    get_now_mock.return_value = now_mock

    inflows = [
        Inflow(datetime(2022, 12, 8), 13.13, power_plant_1, mock_type, mock_source, mock_origin),
        Inflow(datetime(2022, 12, 9), 26.26, power_plant_2, mock_type, mock_source, mock_origin, round_id=1000),
    ]
    # When
    InflowDatabaseApi.persist_inflows(inflows)
    # Then
    mock_insert.assert_called_once_with([
        {
            'id_inflow_source': 2,
            'id_origin_type': 3,
            'id_type_inflow': 1,
            'begin_date': now_mock,
            'id_power_plant': 10,
            'inflow_date': datetime(2022, 12, 8),
            'value': 13.13,
            'id_rodada_smap': None,
        },
        {
            'id_inflow_source': 2,
            'id_origin_type': 3,
            'id_type_inflow': 1,
            'begin_date': now_mock,
            'id_power_plant': 20,
            'inflow_date': datetime(2022, 12, 9),
            'value': 26.26,
            'id_rodada_smap': 1000,
        },
    ])


def test_persist_inflows_one_inflow(mock_insert: MagicMock, get_now_mock: MagicMock):
    # Given
    mock_type = InflowType(1, 'mock_type')
    mock_source = InflowSource(2, 'mock_source')
    mock_origin = OriginType(3, 'mock_origin')
    power_plant_1 = Mock(id=10)
    now_mock = datetime(2023, 1, 1)
    get_now_mock.return_value = now_mock

    inflows = Inflow(datetime(2022, 12, 8), 13.13, power_plant_1, mock_type, mock_source, mock_origin, round_id=1000)
    # When
    InflowDatabaseApi.persist_inflows(inflows)
    # Then
    mock_insert.assert_called_once_with([
        {
            'id_inflow_source': 2,
            'id_origin_type': 3,
            'id_type_inflow': 1,
            'begin_date': now_mock,
            'id_power_plant': 10,
            'inflow_date': datetime(2022, 12, 8),
            'value': 13.13,
            'id_rodada_smap': 1000,
        }
    ])


def test_end_inflows_validity(
    mock_update: MagicMock, mock_power_plant: PowerPlant, mock_inflow_type: Mock, mock_inflow_source: Mock, mock_origin_type: Mock
):
    # Given
    inflows = [
        Inflow(
            datetime(2022, 12, 8), 13.13, mock_power_plant, mock_inflow_type, mock_inflow_source, mock_origin_type, 'mock_id_1'
        ),
        Inflow(
            datetime(2022, 12, 9), 26.26, mock_power_plant, mock_inflow_type, mock_inflow_source, mock_origin_type, 'mock_id_2'
        ),
    ]

    # When
    InflowDatabaseApi.end_inflows_validity(inflows, 'mock_end_date')
    # Then
    mock_update.assert_called_once_with(
        [{'end_date': 'mock_end_date'}], where=[{'id_inflow': ['mock_id_1', 'mock_id_2']}]
    )


@pytest.mark.parametrize('select_return, expected_loaded', [
    ([], False),
    ([{
        'inflow_date': 'mock', 'value': 'mock', 'id_power_plant': 'mock', 'id_type_inflow': 'mock', 'id_origin_type': 'mock', 'id_inflow': 'mock',
        'id_rodada_smap': None
    }, ], True)
])
def test_check_inflow_origin_was_loaded_on_date(mock_select: MagicMock, select_return: dict, expected_loaded: bool):
    # Given
    ref_date = date(2023, 1, 1)
    mock_origin = OriginType(3, 'mock_origin')

    mock_select.return_value = select_return
    # When
    loaded = InflowDatabaseApi.check_inflow_origin_was_loaded_on_date(mock_origin, ref_date)
    # Then
    assert loaded == expected_loaded
