from datetime import date
from unittest.mock import Mock

import pytest

from chuva_vazao_utils.entities.projecao_earm.projecao_earm import ProjecaoEarm
from chuva_vazao_utils.database_access.projecao_earm.projecao_earm import ProjecaoEarmDatabaseApi


@pytest.fixture
def projecao_earm_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.projecao_earm.projecao_earm.ProjecaoEarm')


@pytest.fixture
def origin_type_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.projecao_earm.projecao_earm.OriginTypeDatabaseApi')


@pytest.fixture
def subsystem_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.projecao_earm.projecao_earm.SubsystemDatabaseApi')


@pytest.fixture
def get_now_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.projecao_earm.projecao_earm.get_now')


def test_projecao_earm_from_fict(projecao_earm_mock, origin_type_database_api_mock, subsystem_database_api_mock):
    origin_type_database_api_mock.fetch_by_id.return_value = 'origin_type_mock'
    subsystem_database_api_mock.fetch_by_id.return_value = 'subsystem_mock'

    projecao_earm = {
        'date': date(2020, 1, 1),
        'delta_final': 1.1,
        'delta_final_perc': 10.1,
        'earm_final_perc': 1.20,
        'id_rodada_smap': 112,
        'id_subsistema': 2,
        'id_origin_type': 1,
    }

    result = ProjecaoEarmDatabaseApi.from_dict(projecao_earm)

    assert result == projecao_earm_mock.return_value
    origin_type_database_api_mock.fetch_by_id.assert_called_once_with(1)
    subsystem_database_api_mock.fetch_by_id.assert_called_once_with(2)
    projecao_earm_mock.assert_called_once_with(
        date=date(2020, 1, 1),
        delta_final=1.1,
        delta_final_perc=10.1,
        earm_final_perc=1.20,
        id_rodada_smap=112,
        subsistema='subsystem_mock',
        origin='origin_type_mock',
    )


def test_projecao_earm_persist(get_now_mock):
    subsystem = Mock(id=1)
    origin = Mock(id=2)

    projecao_earm = Mock(
        date=date(2020, 1, 1),
        delta_final=0.1,
        delta_final_perc=0.2,
        earm_final_perc=0.3,
        id_rodada_smap=123,
        subsistema=subsystem,
        origin=origin,
        spec=ProjecaoEarm
    )
    ProjecaoEarmDatabaseApi.insert = Mock()
    get_now_mock.return_value = date(2023, 1, 1)

    ProjecaoEarmDatabaseApi.persist(projecao_earm)

    ProjecaoEarmDatabaseApi.insert.assert_called_once_with([{
        'date': date(2020, 1, 1),
        'delta_final': 0.1,
        'delta_final_perc': 0.2,
        'earm_final_perc': 0.3,
        'id_rodada_smap': 123,
        'id_subsistema': 1,
        'id_origin_type': 2,
        'begin_date': date(2023, 1, 1)
    }], auto_commit=True)
