import pytest
from datetime import date
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.database_access.operative_week import SemanaOperativaSqlApi
from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.entities.operative_week import SemanaOperativa

MODULE_PATH = 'chuva_vazao_utils.database_access.operative_week'


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.SemanaOperativaSqlApi.select')
    return mock_select


@pytest.fixture(autouse=True)
def mock_semana_operativa_factory(mocker: MockerFixture) -> MagicMock:
    # Given
    mock_select = mocker.patch(f'{MODULE_PATH}.SemanaOperativaFactory')
    return mock_select


def test_fetch_by_id(mock_select, mock_semana_operativa_factory):
    # Given
    mock_select.return_value = [
        {
            'INI_KEY': date(2022, 12, 12)
        },
    ]
    # When
    SemanaOperativaSqlApi.fetch_by_id(1)
    # Then
    mock_semana_operativa_factory.create_from_date.assert_called_once_with(date(2022, 12, 12))


def test_fetch_by_id_not_found(mock_select):
    # Given
    mock_select.return_value = []
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        SemanaOperativaSqlApi.fetch_by_id(3)
    assert '"3"' in str(e.value)
