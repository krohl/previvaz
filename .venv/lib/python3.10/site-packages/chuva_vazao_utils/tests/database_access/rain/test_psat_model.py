import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.database_access.rain.psat_model import PsatModelDatabaseApi
from chuva_vazao_utils.entities.rain.psat_model import PsatModel

MODULE_PATH = 'chuva_vazao_utils.database_access.rain.psat_model'


@pytest.fixture
def mock_rain_model():
    return Mock()


@pytest.fixture(autouse=True)
def mock_rain_model_api(mocker: MockerFixture, mock_rain_model: Mock) -> MagicMock:
    # Given
    mock_rain_model_api = mocker.patch(f'{MODULE_PATH}.RainModelDatabaseApi.fetch_by_id')
    mock_rain_model_api.side_effect = [mock_rain_model, mock_rain_model]
    return mock_rain_model_api


def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum m√©todo abstrato deixou de ser implementado
    PsatModelDatabaseApi()


def test_fetch_all(mock_select: MagicMock, mock_rain_model: Mock):
    # Given
    mock_select.return_value = [
        {
            'id_psat': 1, 'key_pattern': 'pattern_1', 'id_modelo': 10, 'filename_pattern': 'file_1'
        },
        {
            'id_psat': 2, 'key_pattern': 'pattern_2', 'id_modelo': 20, 'filename_pattern': 'file_2'
        },
    ]
    # When
    models = PsatModelDatabaseApi.fetch_all()
    # Then
    assert models == [
        PsatModel(_id=1, key_pattern='pattern_1', filename_pattern='file_1', model=mock_rain_model),
        PsatModel(_id=2, key_pattern='pattern_2', filename_pattern='file_2', model=mock_rain_model),
    ]
    mock_select.assert_called_once_with(
        ['id_psat', 'key_pattern', 'id_modelo', 'filename_pattern'],
        where={}
    )
