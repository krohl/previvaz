import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.database_access.rain.rain_historic import RainHistoricDatabaseApi
from chuva_vazao_utils.entities.rain.rain_historic import RainHistoric

MODULE_PATH = 'chuva_vazao_utils.database_access.rain.rain_historic'


@pytest.fixture
def mock_rain_model():
    return Mock()


@pytest.fixture(autouse=True)
def mock_rain_model_api(mocker: MockerFixture, mock_rain_model: Mock) -> MagicMock:
    # Given
    mock_rain_model_api = mocker.patch(f'{MODULE_PATH}.RainModelDatabaseApi.fetch_by_id')
    mock_rain_model_api.side_effect = [mock_rain_model, mock_rain_model]
    return mock_rain_model_api


def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum m√©todo abstrato deixou de ser implementado
    RainHistoricDatabaseApi()


def test_fetch_all(mock_select: MagicMock, mock_rain_model: Mock):
    # Given
    mock_select.return_value = [
        {
            'id_historico_precipitacao': 1, 'id_modelo_mapa': 10, 'key': 'key_1', 'filename_pattern': 'file_1'
        },
        {
            'id_historico_precipitacao': 2, 'id_modelo_mapa': 20, 'key': 'key_2', 'filename_pattern': 'file_2'
        },
    ]
    # When
    historics = RainHistoricDatabaseApi.fetch_all()
    # Then
    assert historics == [
        RainHistoric(_id=1, key='key_1', filename_pattern='file_1', model=mock_rain_model),
        RainHistoric(_id=2, key='key_2', filename_pattern='file_2', model=mock_rain_model),
    ]
    mock_select.assert_called_once_with(
        ['id_historico_precipitacao', 'id_modelo_mapa', '`key`', 'filename_pattern'],
        where={}
    )
