import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock, call

from chuva_vazao_utils.database_access.rain.pmedia_model import PmediaModelDatabaseApi
from chuva_vazao_utils.entities.rain.pmedia_model import PmediaModel

MODULE_PATH = 'chuva_vazao_utils.database_access.rain.pmedia_model'


@pytest.fixture
def mock_rain_model() -> Mock:
    return Mock()


@pytest.fixture(autouse=True)
def mock_rain_model_api(mocker: MockerFixture, mock_rain_model: Mock) -> MagicMock:
    mock_rain_model_api = mocker.patch(f'{MODULE_PATH}.RainModelDatabaseApi.fetch_by_id')
    mock_rain_model_api.return_value = mock_rain_model
    return mock_rain_model_api


def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum m√©todo abstrato deixou de ser implementado
    PmediaModelDatabaseApi()


def test_fetch_all(mock_select: MagicMock, mock_rain_model: Mock, mock_rain_model_api: MagicMock):
    # Given
    mock_select.return_value = [
        {
            'id_pmedia': 1, 'id_modelo_mapa': 3, 'limite_dias': 11, 'key_pattern': 'key_1', 'filename_pattern': 'pattern_1', 'bucket': 'bucket_1',
        },
        {
            'id_pmedia': 2, 'id_modelo_mapa': 4, 'limite_dias': 21, 'key_pattern': 'key_2', 'filename_pattern': 'pattern_2', 'bucket': 'bucket_2',
        },
    ]
    # When/Then
    assert PmediaModelDatabaseApi.fetch_all() == [
        PmediaModel(
            _id=1,
            limite_dias=11,
            key_pattern='key_1',
            filename_pattern='pattern_1',
            bucket='bucket_1',
            model=mock_rain_model,
        ),
        PmediaModel(
            _id=2,
            limite_dias=21,
            key_pattern='key_2',
            filename_pattern='pattern_2',
            bucket='bucket_2',
            model=mock_rain_model,
        ),
    ]
    mock_rain_model_api.assert_has_calls([call(3), call(4), ])
