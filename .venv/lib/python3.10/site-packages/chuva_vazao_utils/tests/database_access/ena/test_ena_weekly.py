import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock, ANY

from chuva_vazao_utils.database_access.ena.ena_weekly import EnaWeeklyDatabaseApi
from chuva_vazao_utils.entities.ena.ena_weekly import EnaWeekly

MODULE_PATH = 'chuva_vazao_utils.database_access.ena.ena_weekly'


@pytest.fixture
def mock_select(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.TableBase.select')


@pytest.fixture
def mock_semana_operativa() -> Mock:
    return Mock()


@pytest.fixture
def mock_semana_operativa_api(mocker: MockerFixture, mock_semana_operativa: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.SemanaOperativaFactory')
    mock_api.create_from_date.return_value = mock_semana_operativa
    return mock_api


@pytest.fixture
def mock_power_plant() -> Mock:
    return Mock()


@pytest.fixture
def mock_power_plant_api(mocker: MockerFixture, mock_power_plant: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.PowerPlantDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_power_plant
    return mock_api


@pytest.fixture
def mock_origin() -> Mock:
    return Mock()


@pytest.fixture
def mock_origin_api(mocker: MockerFixture, mock_origin: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_origin
    return mock_api


@pytest.fixture
def mock_inflow_source() -> Mock:
    return Mock()


@pytest.fixture
def mock_inflow_source_api(mocker: MockerFixture, mock_inflow_source: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.InflowSourceDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_inflow_source
    return mock_api


def test_select(
        mock_select: MagicMock,
        mock_semana_operativa_api: MagicMock, mock_semana_operativa: Mock,
        mock_power_plant_api: MagicMock, mock_power_plant: Mock,
        mock_origin_api: MagicMock, mock_origin: Mock,
        mock_inflow_source_api: MagicMock, mock_inflow_source: Mock,
):
    # Given
    mock_select.return_value = [
        {
            'id_power_plant': 1, 'value': 10.1, 'start_date_week': 's_week', 'id_rodada_smap': 2, 'id_origin_type': 3, 'id_inflow_source': 4
        },
    ]

    conditions = {'mock': 'conditions'}
    # When
    enas = EnaWeeklyDatabaseApi.select(conditions)
    # Then
    mock_select.assert_called_once_with(ANY, where=conditions)

    assert enas == [
        EnaWeekly(mock_semana_operativa, 10.1, mock_power_plant, mock_origin, mock_inflow_source, 2)
    ]

    mock_semana_operativa_api.create_from_date.assert_called_once_with('s_week')
    mock_power_plant_api.fetch_by_id.assert_called_once_with(1)
    mock_origin_api.fetch_by_id.assert_called_once_with(3)
    mock_inflow_source_api.fetch_by_id.assert_called_once_with(4)
