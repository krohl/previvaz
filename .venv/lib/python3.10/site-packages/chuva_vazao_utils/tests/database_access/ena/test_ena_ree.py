import pytest
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock, ANY

from chuva_vazao_utils.database_access.ena.ena_ree import EnaReeDatabaseApi
from chuva_vazao_utils.entities.ena.ena_ree import EnaRee

MODULE_PATH = 'chuva_vazao_utils.database_access.ena.ena_ree'


@pytest.fixture
def mock_select(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.TableBase.select')


@pytest.fixture
def mock_insert(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.EnaReeDatabaseApi.insert')


@pytest.fixture
def mock_semana_operativa() -> Mock:
    return Mock(
        id=100, begin_date='mock_begin', end_date='mock_end'
    )


@pytest.fixture
def mock_semana_operativa_api(mocker: MockerFixture, mock_semana_operativa: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.SemanaOperativaFactory')
    mock_api.create_from_date.return_value = mock_semana_operativa
    return mock_api


@pytest.fixture
def mock_ree() -> Mock:
    return Mock()


@pytest.fixture
def mock_ree_api(mocker: MockerFixture, mock_ree: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.ReservatorioEquivalenteDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_ree
    return mock_api


@pytest.fixture
def mock_origin() -> Mock:
    return Mock()


@pytest.fixture
def mock_origin_api(mocker: MockerFixture, mock_origin: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.OriginTypeDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_origin
    return mock_api


@pytest.fixture
def mock_inflow_source() -> Mock:
    return Mock()


@pytest.fixture
def mock_inflow_source_api(mocker: MockerFixture, mock_inflow_source: Mock) -> MagicMock:
    mock_api = mocker.patch(f'{MODULE_PATH}.InflowSourceDatabaseApi')
    mock_api.fetch_by_id.return_value = mock_inflow_source
    return mock_api


def test_select(
        mock_select: MagicMock,
        mock_semana_operativa_api: MagicMock, mock_semana_operativa: Mock,
        mock_ree_api: MagicMock, mock_ree: Mock,
        mock_origin_api: MagicMock, mock_origin: Mock,
        mock_inflow_source_api: MagicMock, mock_inflow_source: Mock,
):
    # Given
    mock_select.return_value = [
        {
            'id_reservatorio_equivalente': 1, 'value': 10.1, 'start_date_week': 's_week', 'id_rodada_smap': 2, 'id_origin_type': 3, 'id_inflow_source': 4
        },
    ]

    conditions = {'mock': 'conditions'}
    # When
    enas = EnaReeDatabaseApi.select(conditions)
    # Then
    mock_select.assert_called_once_with(ANY, where=conditions)
    assert conditions == {'mock': 'conditions', 'end_date': None}

    assert enas == [
        EnaRee(mock_semana_operativa, 10.1, mock_ree, mock_origin, mock_inflow_source, 2)
    ]

    mock_semana_operativa_api.create_from_date.assert_called_once_with('s_week')
    mock_ree_api.fetch_by_id.assert_called_once_with(1)
    mock_origin_api.fetch_by_id.assert_called_once_with(3)
    mock_inflow_source_api.fetch_by_id.assert_called_once_with(4)


def test_persist(mocker: MockerFixture, mock_insert: MagicMock):
    # Given
    mock_semana_operativa = Mock(begin_date='mock_begin', end_date='mock_end')
    mock_ree = Mock(id=10)
    mock_origin = Mock(id=11)
    mock_inflow_source = Mock(id=12)

    mock_now = mocker.patch(f'{MODULE_PATH}.get_now')
    mock_now.return_value = 'mock_now'

    ena = EnaRee(mock_semana_operativa, 10.1, mock_ree, mock_origin, mock_inflow_source, 2)
    # When
    EnaReeDatabaseApi.persist(ena)
    # Then
    mock_insert.assert_called_once_with(
        [
            {
                'value': 10.1,
                'start_date_week': 'mock_begin',
                'end_date_week': 'mock_end',
                'id_reservatorio_equivalente': 10,
                'id_inflow_source': 12,
                'id_origin_type': 11,
                'id_rodada_smap': 2,
                'begin_date': 'mock_now',
            },
        ],
        auto_commit=True
    )
