from datetime import date, datetime
from unittest.mock import Mock

import pytest

from chuva_vazao_utils.entities.ena.ena_monthly import MonthlyEna
from chuva_vazao_utils.database_access.ena.ena_monthly import MonthlyEnaDatabaseApi


@pytest.fixture
def monthly_ena_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_monthly.MonthlyEna')


@pytest.fixture
def subsystem_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_monthly.SubsystemDatabaseApi')


@pytest.fixture
def origin_type_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_monthly.OriginTypeDatabaseApi')


@pytest.fixture
def inflow_source_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_monthly.InflowSourceDatabaseApi')


@pytest.fixture
def get_now_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_monthly.get_now')


def test_ena_monthly_from_dict(
    monthly_ena_mock,
    subsystem_database_api_mock,
    origin_type_database_api_mock,
    inflow_source_database_api_mock,
):
    ena = {
        'month': date(2020, 1, 1),
        'value': 1.0,
        'id_subsistema': 1,
        'mlt': 1.0,
        'id_rodada_smap': 1,
        'id_origin_type': 1,
        'id_inflow_source': 1,
    }

    result = MonthlyEnaDatabaseApi.from_dict(ena)

    assert result == monthly_ena_mock.return_value
    monthly_ena_mock.assert_called_once_with(
        month=ena.get('month'),
        value=float(ena.get('value')),
        subsystem=subsystem_database_api_mock.fetch_by_id.return_value,
        mlt=float(ena.get('mlt')),
        id_rodada_smap=ena.get('id_rodada_smap'),
        origin=origin_type_database_api_mock.fetch_by_id.return_value,
        inflow_source=inflow_source_database_api_mock.fetch_by_id.return_value,
    )


def test_ena_monthly_persist_monthly_ena(get_now_mock):
    get_now_mock.return_value = datetime(2020, 1, 1)

    ena_mock = Mock(
        spec=MonthlyEna,
        value=1.0,
        mlt=1.0,
        month=date(2020, 1, 1),
        subsystem=Mock(id=1),
        origin=Mock(id=1),
        inflow_source=Mock(id=1),
        id_rodada_smap=1,
    )
    MonthlyEnaDatabaseApi.insert = Mock()

    MonthlyEnaDatabaseApi.persist(ena_mock)

    MonthlyEnaDatabaseApi.insert.assert_called_once_with(
        [
            {
                "value": 1.0,
                "mlt": 1.0,
                "month": date(2020, 1, 1),
                "id_subsistema": 1,
                "id_rodada_smap": 1,
                "id_origin_type": 1,
                "id_inflow_source": 1,
                "begin_date": datetime(2020, 1, 1)
            }
        ],
        auto_commit=True
    )
