from datetime import date
from unittest.mock import Mock

import pytest

from chuva_vazao_utils.database_access.ena.ena_weekly_subsystem import EnaWeeklySubsystemDatabaseApi
from chuva_vazao_utils.entities.ena.ena_weekly_subsystem import EnaWeeklySubsystem


@pytest.fixture
def ena_weekly_subsystem_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.EnaWeeklySubsystem')


@pytest.fixture
def subsystem_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.SubsystemDatabaseApi')


@pytest.fixture
def semana_operativa_factory_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.SemanaOperativaFactory')


@pytest.fixture
def origin_type_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.OriginTypeDatabaseApi')


@pytest.fixture
def inflow_source_database_api_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.InflowSourceDatabaseApi')


@pytest.fixture
def get_now_mock(mocker):
    return mocker.patch('chuva_vazao_utils.database_access.ena.ena_weekly_subsystem.get_now')


def test_ena_weekly_from_dict(
    ena_weekly_subsystem_mock,
    subsystem_database_api_mock,
    semana_operativa_factory_mock,
    origin_type_database_api_mock,
    inflow_source_database_api_mock
):
    ena = {
        'id_subsistema': 1,
        'start_date_week': date(2020, 1, 1),
        'value': 1.0,
        'id_origin_type': 1,
        'id_inflow_source': 1,
    }
    result = EnaWeeklySubsystemDatabaseApi.from_dict(ena)

    assert result == ena_weekly_subsystem_mock.return_value
    ena_weekly_subsystem_mock.assert_called_once_with(
        subsystem=subsystem_database_api_mock.fetch_by_id.return_value,
        op_week=semana_operativa_factory_mock.create_from_date.return_value,
        value=float(ena.get('value')),
        origin=origin_type_database_api_mock.fetch_by_id.return_value,
        inflow_source=inflow_source_database_api_mock.fetch_by_id.return_value,
    )


def test_ena_weekly_persist(get_now_mock):
    ena = Mock(
        spec=EnaWeeklySubsystem,
        subsystem=Mock(id=1),
        op_week=Mock(begin_date=date(2020, 1, 1), end_date=date(2020, 1, 7)),
        value=1.0,
        origin=Mock(id=1),
        inflow_source=Mock(id=1),
    )
    EnaWeeklySubsystemDatabaseApi.insert = Mock()

    EnaWeeklySubsystemDatabaseApi.persist(ena)

    EnaWeeklySubsystemDatabaseApi.insert.assert_called_once_with(
        [
            {
                'value': ena.value,
                'start_date_week': ena.op_week.begin_date,
                'end_date_week': ena.op_week.end_date,
                'id_subsistema': ena.subsystem.id,
                'id_inflow_source': ena.inflow_source.id,
                'id_origin_type': ena.origin.id,
                'begin_date': get_now_mock.return_value,
            }
        ],
        auto_commit=True
    )
