import pytest

from chuva_vazao_utils.database_access.query_builder import QueryBuilder


@pytest.fixture
def test_table() -> str:
    return 'test_table'


@pytest.fixture
def query_builder(test_table) -> QueryBuilder:
    return QueryBuilder(test_table)


@pytest.mark.parametrize('columns, conditions, groupby, limit, expected_query, expected_data', [
    # SÃ³ colunas
    ('column_1, column_2', {}, None, None, 'SELECT column_1, column_2 FROM {table}', ()),
    # Colunas + conditions
    ('column_1, column_2', {'mock_cond_1': 1, 'mock_cond_2': '2'}, None, None,
     'SELECT column_1, column_2 FROM {table}  WHERE  mock_cond_1 = %s  AND  mock_cond_2 = %s', (1, '2')),
    # Colunas + groupby
    ('column_1, column_2', {}, ['mock_1', 'mock_2'], None,
     'SELECT column_1, column_2 FROM {table}   GROUP BY mock_1, mock_2', ()),
    # Colunas + limit
    ('column_1, column_2', {}, None, 10, 'SELECT column_1, column_2 FROM {table}   LIMIT 10', ()),
])
def test_create_select(test_table: str, query_builder: QueryBuilder, columns, conditions, groupby, limit, expected_query: str, expected_data: tuple):
    # When
    stm, data = query_builder.create_select(columns, conditions, groupby, limit)
    # Then
    assert stm.strip().lower() == expected_query.format(table=test_table).lower()
    assert data == expected_data


def test_create_select_with_join(test_table: str, query_builder: QueryBuilder):
    # Given
    query_builder.join_table('table_2', ('test_table.id', 'table_2.id'), 'left')
    # When
    stm, _ = query_builder.create_select()
    # Then
    assert stm.strip().lower() == f'select * from {test_table}  left join table_2 on test_table.id = table_2.id'


def test_create_delete(test_table: str, query_builder: QueryBuilder):
    # When
    stm, data = query_builder.create_delete({'id': 7})
    # Then
    assert stm.lower() == f'DELETE FROM {test_table} WHERE  id = %s '.lower()
    assert data == (7, )
