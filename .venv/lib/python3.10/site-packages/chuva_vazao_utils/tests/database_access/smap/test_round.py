import pytest
from datetime import datetime
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.database_access.smap.round import SmapRoundSqlApi
from chuva_vazao_utils.entities.exception import EntityNotFound
from chuva_vazao_utils.entities.smap.round import SmapRound

MODULE_PATH_ENTITY = 'chuva_vazao_utils.entities.smap.round'
MODULE_PATH = 'chuva_vazao_utils.database_access.smap.round'


@pytest.fixture
def mock_now(mocker: MockerFixture) -> datetime:
    mock_now = datetime(2022, 12, 22, 7, 45, 10)
    mock_datetime = mocker.patch(f'{MODULE_PATH_ENTITY}.datetime')
    mock_datetime.now.return_value = mock_now
    return mock_now


@pytest.fixture(autouse=True)
def mock_select(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.TableBase.select')


@pytest.fixture(autouse=True)
def mock_insert(mocker: MockerFixture) -> MagicMock:
    return mocker.patch(f'{MODULE_PATH}.SmapRoundSqlApi.insert')


@pytest.fixture
def mock_rain_model() -> Mock:
    return Mock()


@pytest.fixture(autouse=True)
def mock_rain_model_api(mocker: MockerFixture, mock_rain_model):
    mock = mocker.patch(f'{MODULE_PATH}.RainModelDatabaseApi')
    mock.fetch_by_id.return_value = mock_rain_model
    return mock


@pytest.fixture
def mock_semana_operativa() -> Mock:
    mock = Mock()
    mock.id_semana_operativa = 15
    return mock


@pytest.fixture(autouse=True)
def mock_semana_operativa_api(mocker: MockerFixture, mock_semana_operativa):
    mock = mocker.patch(f'{MODULE_PATH}.SemanaOperativaSqlApi')
    mock.fetch_by_id.return_value = mock_semana_operativa
    mock.fetch_id_given_semana_operativa.return_value = mock_semana_operativa.id_semana_operativa
    return mock


def test_select(mock_select: MagicMock, mock_now: datetime, mock_rain_model: Mock, mock_semana_operativa: Mock):
    # Given
    mock_select.return_value = [
        {
            'id_rodada_smap': 1,
            'id_smap_config': 10,
            'id_modelo_mapa': 11,
            'id_semana_operativa': 100,
            'flag_acomph': True,
            'flag_manual': True,
            'cpu_date': mock_now,
        },
        {
            'id_rodada_smap': 2,
            'id_smap_config': 20,
            'id_modelo_mapa': 21,
            'id_semana_operativa': 200,
            'flag_acomph': False,
            'flag_manual': False,
            'cpu_date': mock_now,
        },
    ]
    # When
    smap_rounds = SmapRoundSqlApi.select({})
    # Then
    assert smap_rounds == [
        SmapRound(10, mock_rain_model, mock_semana_operativa, True, True, 1, mock_now),
        SmapRound(20, mock_rain_model, mock_semana_operativa, False, False, 2, mock_now),
    ]


def test_fetch_fetch_round_by_id(
    mock_select: MagicMock, mock_now: datetime, mock_rain_model: Mock, mock_semana_operativa: Mock
):
    # Given
    mock_select.return_value = [
        {
            'id_rodada_smap': 1,
            'id_smap_config': 10,
            'id_modelo_mapa': 11,
            'id_semana_operativa': 100,
            'flag_acomph': True,
            'flag_manual': True,
            'cpu_date': mock_now,
        },
    ]
    # When/Then
    assert SmapRoundSqlApi.fetch_round_by_id(1) == SmapRound(
        10, mock_rain_model, mock_semana_operativa, True, True, 1, mock_now
    )

    # Test cache
    # When
    SmapRoundSqlApi.fetch_round_by_id(1)
    # THen
    mock_select.assert_called_once()


def test_fetch_fetch_round_by_id_not_found(mock_select: MagicMock):
    # Given
    mock_select.return_value = []
    # When/Then
    with pytest.raises(EntityNotFound) as e:
        SmapRoundSqlApi.fetch_round_by_id(3)
    assert '"3"' in str(e.value)


def test_persist(mock_insert: MagicMock, mock_now: datetime, mock_rain_model: Mock, mock_semana_operativa: Mock):
    # Given
    mock_insert.return_value = 'mock_id'
    smap_round = SmapRound(1, mock_rain_model, mock_semana_operativa, True, True, -1, mock_now)
    # When
    gen_id = SmapRoundSqlApi.persist_round(smap_round)
    # Then
    mock_insert.assert_called_once_with(
        {
            'id_smap_config': smap_round.config_id,
            'id_modelo_mapa': smap_round.model._id,
            'id_semana_operativa': mock_semana_operativa.id_semana_operativa,
            'flag_acomph': smap_round.flag_acomph,
            'flag_manual': smap_round.flag_manual,
            'cpu_date': smap_round.cpu_date,
        }
    )
    assert gen_id == 'mock_id'
