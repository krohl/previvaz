import pytest
from pytest_mock import MockerFixture
from unittest.mock import ANY, call, MagicMock

from chuva_vazao_utils.connection import ChuvaVazaoDatabase, DatabaseMenu, DatabaseSelector, SisCadDatabase, RiverDatabase
from chuva_vazao_utils.exceptions import InvalidDatabase


@pytest.fixture
def mock_secrets(mocker: MockerFixture) -> MagicMock:
    mock_secrets = mocker.patch('chuva_vazao_utils.connection.get_secret_value')
    mock_secrets.return_value = {'host': 'mock_host', 'username': 'mock_user',
                                 'password': 'mock_password', 'port': 100}
    return mock_secrets


def test_database_selector():
    assert DatabaseSelector.get_database(DatabaseMenu.RIVER_DB) == RiverDatabase
    assert DatabaseSelector.get_database(DatabaseMenu.CHUVA_VAZAO_DB) == ChuvaVazaoDatabase
    assert DatabaseSelector.get_database(DatabaseMenu.SIS_CAD_DB) == SisCadDatabase

    with pytest.raises(InvalidDatabase):
        DatabaseSelector.get_database(1)


@pytest.mark.parametrize('db_class, secret_key, db_name',
                         [(RiverDatabase, '/databases/esferadb-river/preco_automatico', 'river'),
                          (SisCadDatabase, '/databases/esferadb/escore', 'SIS_CAD')]
                         )
def test_execute(mocker: MockerFixture, mock_secrets: MagicMock, db_class, secret_key, db_name):
    # Given
    mock_sql = 'mock_sql'
    mock_params = ['mock', 'params']

    mock_pymysql = mocker.patch('chuva_vazao_utils.connection.pymysql')

    # When
    db_class.execute(mock_sql, mock_params)
    mock_cursor = db_class.execute(mock_sql, mock_params)

    # Then
    mock_secrets.assert_called_once_with(secret_key)

    mock_pymysql.connect.assert_called_once_with(
        host='mock_host', user='mock_user', password='mock_password', db=db_name, port=100, charset=ANY, cursorclass=ANY
    )
    assert mock_cursor.execute.call_count == 2
    mock_cursor.execute.assert_has_calls([call(mock_sql, mock_params), call(mock_sql, mock_params)])
