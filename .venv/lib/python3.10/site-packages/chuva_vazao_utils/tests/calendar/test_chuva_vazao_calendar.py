import calendar
from datetime import date
from unittest import mock
from unittest.mock import Mock, PropertyMock

import pytest
from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar, DateType
from chuva_vazao_utils.exceptions import DateTypeError, InvalidDate, InvalidWeekNumber


@pytest.fixture
def mock_fetch_calendar(mocker):
    return mocker.patch('chuva_vazao_utils.calendar.dao.fetch_calendar')


def test_get_dates_between(mock_fetch_calendar):
    mock_fetch_calendar.return_value = [
        {'date': date(2021, 1, 1)},
        {'date': date(2021, 1, 2)},
        {'date': date(2021, 1, 3)},
        {'date': date(2021, 1, 4)},
        {'date': date(2021, 1, 5)},
        {'date': date(2021, 1, 6)},
    ]

    calendar_simple = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE)
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)

    range_simple_dates = calendar_simple.get_dates_between(
        date(2021, 1, 2), date(2021, 1, 4))
    range_ons_dates = calendar_ons.get_dates_between(
        date(2021, 1, 2), date(2021, 1, 4))
    assert range_ons_dates == [
        {'date': date(2021, 1, 2)},
        {'date': date(2021, 1, 3)},
        {'date': date(2021, 1, 4)}
    ]
    assert range_simple_dates == [
        date(2021, 1, 2),
        date(2021, 1, 3),
        date(2021, 1, 4)
    ]


def test_filter_by_date_type(mock_fetch_calendar):
    mock_fetch_calendar.return_value = [
        {
            'date': date(2021, 1, 2),
            'id_date_type': 1
        },
        {
            'date': date(2021, 1, 3),
            'id_date_type': 2
        },
        {
            'date': date(2021, 1, 4),
            'id_date_type': 2
        },
        {
            'date': date(2021, 1, 5),
            'id_date_type': 3
        }
    ]

    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    ons_dates_filtered = calendar_ons.filter_by_date_type(DateType.HOLIDAY)

    assert ons_dates_filtered == [{
        'date': date(2021, 1, 5),
        'id_date_type': 3
    }]


def test_filter_by_date_type_exception_simple_date():
    calendar_simple = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE)
    with pytest.raises(DateTypeError):
        calendar_simple.filter_by_date_type(DateType.HOLIDAY)


def test_get_rv(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    calendar_simple = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE)

    rv, rv_week = calendar_ons.get_rv(date(2021, 4, 14))
    rv_simple, rv_week_simple = calendar_simple.get_rv(date(2021, 4, 14))

    assert rv == 2
    assert rv_week == date(2021, 4, 16)
    assert rv == rv_simple
    assert rv_week_simple == rv_week_simple


def test_next_week(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    next_week = calendar_ons.next_week(date(2021, 4, 16))

    assert next_week == date(2021, 4, 23)


def test_opweek_to_date(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    opweek_date = calendar_ons.opweek_to_date('2021041')

    assert opweek_date == date(2021, 4, 2)


def test_get_next_weekday(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    next_weekday = calendar_ons.get_next_weekday(
        date(2021, 4, 14), calendar.MONDAY)

    assert next_weekday == date(2021, 4, 19)


def test_get_previous_weekday(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    next_weekday = calendar_ons.get_previous_weekday(
        date(2021, 4, 14), calendar.MONDAY)

    assert next_weekday == date(2021, 4, 12)


def test_not_is_round_date(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    is_round_date = calendar_ons.is_round_date(date(2021, 4, 14))

    assert not is_round_date


def test_is_round_date(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    is_round_date = calendar_ons.is_round_date(date(2021, 4, 15))

    assert is_round_date


def test_get_next_round_date_default(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    calendar_ons.get_dates_between = Mock(
        return_value=[
            {
                'date': date(2021, 4, 12),
                'id_date_type': 1
            },
            {
                'date': date(2021, 4, 13),
                'id_date_type': 1
            },
            {
                'date': date(2021, 4, 14),
                'id_date_type': 1
            },
            {
                'date': date(2021, 4, 15),
                'id_date_type': 1
            }
        ]
    )
    calendar_ons.filter_by_date_type = Mock(
        return_value=[]
    )

    next_round_date = calendar_ons.get_next_round_date(date(2021, 4, 14))
    assert next_round_date == date(2021, 4, 15)


def test_get_next_round_date_holidays_wed_thu_fri(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    calendar_ons.get_dates_between = Mock(
        return_value=[
            {
                'date': date(2021, 4, 12),
                'id_date_type': 1
            },
            {
                'date': date(2021, 4, 13),
                'id_date_type': 1
            },
            {
                'date': date(2021, 4, 14),
                'id_date_type': 3
            },
            {
                'date': date(2021, 4, 15),
                'id_date_type': 3
            },
            {
                'date': date(2021, 4, 16),
                'id_date_type': 3
            }
        ]
    )
    calendar_ons.filter_by_date_type = Mock(
        return_value=[
            {
                'date': date(2021, 4, 14),
                'id_date_type': 3
            },
            {
                'date': date(2021, 4, 15),
                'id_date_type': 3
            },
            {
                'date': date(2021, 4, 16),
                'id_date_type': 3
            }
        ]
    )

    next_round_date = calendar_ons.get_next_round_date(date(2021, 4, 12))
    assert next_round_date == date(2021, 4, 19)


@pytest.mark.parametrize(
    "date_input, expected", [
        (date(2021, 5, 27), date(2021, 6, 1)),
        (date(2021, 5, 28), date(2021, 6, 1)),
        (date(2021, 5, 31), date(2021, 6, 1)),
        (date(2021, 6, 1), date(2021, 6, 10)),
        (date(2021, 6, 2), date(2021, 6, 10)),
    ]
)
def test_get_next_round_date_holidays_thu_fri(mock_fetch_calendar, date_input, expected):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2021, 5, 27), 'id_date_type': 1},
            {'date': date(2021, 5, 28), 'id_date_type': 1},
            {'date': date(2021, 5, 29), 'id_date_type': 1},
            {'date': date(2021, 5, 30), 'id_date_type': 1},
            {'date': date(2021, 5, 31), 'id_date_type': 1},
            {'date': date(2021, 6, 1), 'id_date_type': 1},
            {'date': date(2021, 6, 2), 'id_date_type': 1},
            {'date': date(2021, 6, 3), 'id_date_type': 3},
            {'date': date(2021, 6, 4), 'id_date_type': 3},
            {'date': date(2021, 6, 5), 'id_date_type': 1},
            {'date': date(2021, 6, 6), 'id_date_type': 1},
            {'date': date(2021, 6, 7), 'id_date_type': 1},
            {'date': date(2021, 6, 8), 'id_date_type': 1},
            {'date': date(2021, 6, 9), 'id_date_type': 1},
            {'date': date(2021, 6, 10), 'id_date_type': 1},
            {'date': date(2021, 6, 11), 'id_date_type': 1},
            {'date': date(2021, 6, 12), 'id_date_type': 1},
            {'date': date(2021, 6, 13), 'id_date_type': 1},
            {'date': date(2021, 6, 14), 'id_date_type': 1},
            {'date': date(2021, 6, 15), 'id_date_type': 1},
        ]
        calendar_ons.filter_by_date_type = Mock(
            return_value=[
                {
                    'date': date(2021, 6, 3),
                    'id_date_type': 3
                },
                {
                    'date': date(2021, 6, 4),
                    'id_date_type': 3
                }
            ]
        )

        next_round_date = calendar_ons.get_next_round_date(date_input)
        assert next_round_date == expected


@pytest.mark.parametrize(
    "date_input, expected", [
        (date(2021, 5, 27), date(2021, 6, 2)),
        (date(2021, 5, 28), date(2021, 6, 2)),
        (date(2021, 5, 31), date(2021, 6, 2)),
        (date(2021, 6, 1), date(2021, 6, 2)),
        (date(2021, 6, 2), date(2021, 6, 10)),
    ]
)
def test_get_next_round_date_holidays_thu(mock_fetch_calendar, date_input, expected):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2021, 5, 27), 'id_date_type': 1},
            {'date': date(2021, 5, 28), 'id_date_type': 1},
            {'date': date(2021, 5, 29), 'id_date_type': 1},
            {'date': date(2021, 5, 30), 'id_date_type': 1},
            {'date': date(2021, 5, 31), 'id_date_type': 1},
            {'date': date(2021, 6, 1), 'id_date_type': 1},
            {'date': date(2021, 6, 2), 'id_date_type': 1},
            {'date': date(2021, 6, 3), 'id_date_type': 3},
            {'date': date(2021, 6, 4), 'id_date_type': 1},
            {'date': date(2021, 6, 5), 'id_date_type': 1},
            {'date': date(2021, 6, 6), 'id_date_type': 1},
            {'date': date(2021, 6, 7), 'id_date_type': 1},
            {'date': date(2021, 6, 8), 'id_date_type': 1},
            {'date': date(2021, 6, 9), 'id_date_type': 1},
            {'date': date(2021, 6, 10), 'id_date_type': 1},
            {'date': date(2021, 6, 11), 'id_date_type': 1},
            {'date': date(2021, 6, 12), 'id_date_type': 1},
            {'date': date(2021, 6, 13), 'id_date_type': 1},
            {'date': date(2021, 6, 14), 'id_date_type': 1},
            {'date': date(2021, 6, 15), 'id_date_type': 1},
        ]
        calendar_ons.filter_by_date_type = Mock(
            return_value=[
                {
                    'date': date(2021, 6, 3),
                    'id_date_type': 3
                },
            ]
        )

        next_round_date = calendar_ons.get_next_round_date(date_input)
        assert next_round_date == expected


@pytest.mark.parametrize(
    "date_input, expected", [
        (date(2021, 5, 27), date(2021, 6, 2)),
        (date(2021, 5, 28), date(2021, 6, 2)),
        (date(2021, 5, 31), date(2021, 6, 2)),
        (date(2021, 6, 1), date(2021, 6, 2)),
        (date(2021, 6, 2), date(2021, 6, 10)),
    ]
)
def test_get_next_round_date_holidays_fri(mock_fetch_calendar, date_input, expected):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_moch = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_moch, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2021, 5, 27), 'id_date_type': 1},
            {'date': date(2021, 5, 28), 'id_date_type': 1},
            {'date': date(2021, 5, 29), 'id_date_type': 1},
            {'date': date(2021, 5, 30), 'id_date_type': 1},
            {'date': date(2021, 5, 31), 'id_date_type': 1},
            {'date': date(2021, 6, 1), 'id_date_type': 1},
            {'date': date(2021, 6, 2), 'id_date_type': 1},
            {'date': date(2021, 6, 3), 'id_date_type': 1},
            {'date': date(2021, 6, 4), 'id_date_type': 3},
            {'date': date(2021, 6, 5), 'id_date_type': 1},
            {'date': date(2021, 6, 6), 'id_date_type': 1},
            {'date': date(2021, 6, 7), 'id_date_type': 1},
            {'date': date(2021, 6, 8), 'id_date_type': 1},
            {'date': date(2021, 6, 9), 'id_date_type': 1},
            {'date': date(2021, 6, 10), 'id_date_type': 1},
            {'date': date(2021, 6, 11), 'id_date_type': 1},
            {'date': date(2021, 6, 12), 'id_date_type': 1},
            {'date': date(2021, 6, 13), 'id_date_type': 1},
            {'date': date(2021, 6, 14), 'id_date_type': 1},
            {'date': date(2021, 6, 15), 'id_date_type': 1},
        ]
        calendar_ons.filter_by_date_type = Mock(
            return_value=[
                {'date': date(2021, 6, 4), 'id_date_type': 3}
            ]
        )

        next_round_date = calendar_ons.get_next_round_date(date_input)
        assert next_round_date == expected


@pytest.mark.parametrize(
    "date_input, expected", [
        (date(2021, 5, 27), date(2021, 6, 3)),
        (date(2021, 5, 28), date(2021, 6, 3)),
        (date(2021, 5, 31), date(2021, 6, 3)),
        (date(2021, 6, 1), date(2021, 6, 3)),
        (date(2021, 6, 2), date(2021, 6, 3)),
    ]
)
def test_get_next_round_date_holidays_wed(mock_fetch_calendar, date_input, expected):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2021, 5, 27), 'id_date_type': 1},
            {'date': date(2021, 5, 28), 'id_date_type': 1},
            {'date': date(2021, 5, 29), 'id_date_type': 1},
            {'date': date(2021, 5, 30), 'id_date_type': 1},
            {'date': date(2021, 5, 31), 'id_date_type': 1},
            {'date': date(2021, 6, 1), 'id_date_type': 1},
            {'date': date(2021, 6, 2), 'id_date_type': 3},
            {'date': date(2021, 6, 3), 'id_date_type': 1},
            {'date': date(2021, 6, 4), 'id_date_type': 1},
            {'date': date(2021, 6, 5), 'id_date_type': 1},
            {'date': date(2021, 6, 6), 'id_date_type': 1},
            {'date': date(2021, 6, 7), 'id_date_type': 1},
            {'date': date(2021, 6, 8), 'id_date_type': 1},
            {'date': date(2021, 6, 9), 'id_date_type': 1},
            {'date': date(2021, 6, 10), 'id_date_type': 1},
            {'date': date(2021, 6, 11), 'id_date_type': 1},
            {'date': date(2021, 6, 12), 'id_date_type': 1},
            {'date': date(2021, 6, 13), 'id_date_type': 1},
            {'date': date(2021, 6, 14), 'id_date_type': 1},
            {'date': date(2021, 6, 15), 'id_date_type': 1},
        ]
    calendar_ons.filter_by_date_type = Mock(
        return_value=[
            {'date': date(2021, 6, 2), 'id_date_type': 3},
        ]
    )

    next_round_date = calendar_ons.get_next_round_date(date_input)
    assert next_round_date == expected


@pytest.mark.parametrize(
    "date_input, expected", [
        (date(2021, 1, 1), 1),
        (date(2021, 1, 8), 2),
        (date(2021, 7, 9), 28),
        (date(2021, 12, 24), 52),
        (date(2021, 12, 31), 53),
        (date(2022, 1, 7), 1),
    ]
)
def test_get_n_week(date_input, expected):
    simple_calendar = ChuvaVazaoCalendar(date_input.year, CalendarType.SIMPLE)
    n_week = simple_calendar.get_n_week(date_input)

    assert n_week == expected


def test_get_n_week_invalid_date():
    invalid_date = date(2021, 1, 2)
    simple_calendar = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE)
    with pytest.raises(InvalidDate):
        simple_calendar.get_n_week(invalid_date)


@pytest.mark.parametrize(
    "n_week, year, expected", [
        (1, 2021, (date(2020, 12, 26), date(2021, 1, 1))),
        (52, 2021, (date(2021, 12, 18), date(2021, 12, 24))),
        (52, 2022, (date(2022, 12, 24), date(2022, 12, 30))),
    ]
)
def test_get_dates_by_n_week(n_week, year, expected):
    simple_calendar = ChuvaVazaoCalendar(year, CalendarType.SIMPLE)
    start_date, end_date = simple_calendar.get_dates_from_n_week(n_week, year)
    assert (start_date, end_date) == expected


def test_get_n_week_invalid_date_exception():
    simple_calendar = ChuvaVazaoCalendar(2022, CalendarType.SIMPLE)
    with pytest.raises(InvalidWeekNumber):
        simple_calendar.get_dates_from_n_week(54, 2022)


def test_find_deck_date(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2022, 8, 26), 'id_date_type': 1},
            {'date': date(2022, 8, 27), 'id_date_type': 2},
            {'date': date(2022, 8, 28), 'id_date_type': 2},
            {'date': date(2022, 8, 29), 'id_date_type': 1},
            {'date': date(2022, 8, 30), 'id_date_type': 1},
            {'date': date(2022, 8, 31), 'id_date_type': 1},
            {'date': date(2022, 9, 1), 'id_date_type': 1},
            {'date': date(2022, 9, 2), 'id_date_type': 1},
            {'date': date(2022, 9, 3), 'id_date_type': 2},
            {'date': date(2022, 9, 4), 'id_date_type': 2},
            {'date': date(2022, 9, 5), 'id_date_type': 1},
            {'date': date(2022, 9, 6), 'id_date_type': 1},
            {'date': date(2022, 9, 7), 'id_date_type': 1},
            {'date': date(2022, 9, 8), 'id_date_type': 1},
            {'date': date(2022, 9, 9), 'id_date_type': 1},
            {'date': date(2022, 9, 10), 'id_date_type': 2},
            {'date': date(2022, 9, 11), 'id_date_type': 2},
            {'date': date(2022, 9, 12), 'id_date_type': 1},
            {'date': date(2022, 9, 13), 'id_date_type': 1},
            {'date': date(2022, 9, 14), 'id_date_type': 1},
            {'date': date(2022, 9, 15), 'id_date_type': 1},
        ]

        ref_date = date(2022, 8, 25)
        start_date = date(2022, 9, 3)
        end_date = date(2022, 9, 9)
        deck_date = calendar_ons.find_deck_date(ref_date, start_date, end_date)
        assert deck_date == date(2022, 9, 1)


def test_find_deck_date_with_holidays(mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2022, 8, 26), 'id_date_type': 1},
            {'date': date(2022, 8, 27), 'id_date_type': 2},
            {'date': date(2022, 8, 28), 'id_date_type': 2},
            {'date': date(2022, 8, 29), 'id_date_type': 1},
            {'date': date(2022, 8, 30), 'id_date_type': 1},
            {'date': date(2022, 8, 31), 'id_date_type': 1},
            {'date': date(2022, 9, 1), 'id_date_type': 3},
            {'date': date(2022, 9, 2), 'id_date_type': 1},
            {'date': date(2022, 9, 3), 'id_date_type': 2},
            {'date': date(2022, 9, 4), 'id_date_type': 2},
            {'date': date(2022, 9, 5), 'id_date_type': 1},
            {'date': date(2022, 9, 6), 'id_date_type': 1},
            {'date': date(2022, 9, 7), 'id_date_type': 1},
            {'date': date(2022, 9, 8), 'id_date_type': 1},
            {'date': date(2022, 9, 9), 'id_date_type': 1},
            {'date': date(2022, 9, 10), 'id_date_type': 2},
            {'date': date(2022, 9, 11), 'id_date_type': 2},
            {'date': date(2022, 9, 12), 'id_date_type': 1},
            {'date': date(2022, 9, 13), 'id_date_type': 1},
            {'date': date(2022, 9, 14), 'id_date_type': 1},
            {'date': date(2022, 9, 15), 'id_date_type': 1},
        ]

        ref_date = date(2022, 8, 25)
        start_date = date(2022, 9, 3)
        end_date = date(2022, 9, 9)
        deck_date = calendar_ons.find_deck_date(ref_date, start_date, end_date)
        assert deck_date == date(2022, 8, 31)


@pytest.mark.parametrize(
    "ref_date, expected", [
        (date(2022, 9, 11), date(2022, 9, 8)),
        (date(2022, 9, 12), date(2022, 9, 8)),
        (date(2022, 9, 13), date(2022, 9, 8)),
        (date(2022, 9, 14), date(2022, 9, 8)),
        (date(2022, 9, 15), date(2022, 9, 8)),
        (date(2022, 9, 16), date(2022, 9, 15)),
        (date(2022, 9, 17), date(2022, 9, 15)),
    ]
)
def test_get_previous_round_date_with_no_holidays(ref_date, expected, mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2022, 9, 6), 'id_date_type': 1},
            {'date': date(2022, 9, 7), 'id_date_type': 1},
            {'date': date(2022, 9, 8), 'id_date_type': 1},
            {'date': date(2022, 9, 9), 'id_date_type': 1},
            {'date': date(2022, 9, 10), 'id_date_type': 2},
            {'date': date(2022, 9, 11), 'id_date_type': 2},
            {'date': date(2022, 9, 12), 'id_date_type': 1},
            {'date': date(2022, 9, 13), 'id_date_type': 1},
            {'date': date(2022, 9, 14), 'id_date_type': 1},
            {'date': date(2022, 9, 15), 'id_date_type': 1},
        ]

        result = calendar_ons.get_previous_round_date(ref_date)
        assert result == expected


@pytest.mark.parametrize(
    "ref_date, expected", [
        (date(2022, 9, 11), date(2022, 9, 8)),
        (date(2022, 9, 12), date(2022, 9, 8)),
        (date(2022, 9, 13), date(2022, 9, 8)),
        (date(2022, 9, 14), date(2022, 9, 8)),
        (date(2022, 9, 15), date(2022, 9, 8)),
        (date(2022, 9, 16), date(2022, 9, 15)),
        (date(2022, 9, 17), date(2022, 9, 15)),
    ]
)
def test_get_previous_round_date_with_holiday_on_wednesday(ref_date, expected, mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2022, 9, 6), 'id_date_type': 1},
            {'date': date(2022, 9, 7), 'id_date_type': 3},  # holiday
            {'date': date(2022, 9, 8), 'id_date_type': 1},
            {'date': date(2022, 9, 9), 'id_date_type': 1},
            {'date': date(2022, 9, 10), 'id_date_type': 2},
            {'date': date(2022, 9, 11), 'id_date_type': 2},
            {'date': date(2022, 9, 12), 'id_date_type': 1},
            {'date': date(2022, 9, 13), 'id_date_type': 1},
            {'date': date(2022, 9, 14), 'id_date_type': 1},
            {'date': date(2022, 9, 15), 'id_date_type': 1},
        ]

        result = calendar_ons.get_previous_round_date(ref_date)
        assert result == expected


@pytest.mark.parametrize(
    "ref_date, expected", [
        (date(2022, 8, 31), date(2022, 8, 24)),
        (date(2022, 9, 11), date(2022, 9, 7)),
        (date(2022, 9, 12), date(2022, 9, 7)),
        (date(2022, 9, 13), date(2022, 9, 7)),
        (date(2022, 9, 14), date(2022, 9, 7)),
        (date(2022, 9, 15), date(2022, 9, 7)),
        (date(2022, 9, 16), date(2022, 9, 15)),
        (date(2022, 9, 17), date(2022, 9, 15)),
    ]
)
def test_get_previous_round_date_with_holiday_on_thursday(ref_date, expected, mock_fetch_calendar):
    calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.CALENDAR_ONS)
    path_mock = 'chuva_vazao_utils.calendar.chuva_vazao_calendar.ChuvaVazaoCalendar.dates'

    with mock.patch(path_mock, new_callable=PropertyMock) as mock_dates:
        mock_dates.return_value = [
            {'date': date(2022, 8, 24), 'id_date_type': 1},
            {'date': date(2022, 8, 25), 'id_date_type': 3},  # holiday
            {'date': date(2022, 8, 26), 'id_date_type': 1},
            {'date': date(2022, 8, 27), 'id_date_type': 1},
            {'date': date(2022, 8, 28), 'id_date_type': 1},
            {'date': date(2022, 8, 29), 'id_date_type': 1},
            {'date': date(2022, 8, 30), 'id_date_type': 1},
            {'date': date(2022, 8, 31), 'id_date_type': 1},
            {'date': date(2022, 9, 1), 'id_date_type': 1},
            {'date': date(2022, 9, 2), 'id_date_type': 1},
            {'date': date(2022, 9, 3), 'id_date_type': 1},
            {'date': date(2022, 9, 4), 'id_date_type': 1},
            {'date': date(2022, 9, 5), 'id_date_type': 1},
            {'date': date(2022, 9, 6), 'id_date_type': 1},
            {'date': date(2022, 9, 7), 'id_date_type': 1},
            {'date': date(2022, 9, 8), 'id_date_type': 3},  # holiday
            {'date': date(2022, 9, 9), 'id_date_type': 1},
            {'date': date(2022, 9, 10), 'id_date_type': 2},
            {'date': date(2022, 9, 11), 'id_date_type': 2},
            {'date': date(2022, 9, 12), 'id_date_type': 1},
            {'date': date(2022, 9, 13), 'id_date_type': 1},
            {'date': date(2022, 9, 14), 'id_date_type': 1},
            {'date': date(2022, 9, 15), 'id_date_type': 1},
        ]

        result = calendar_ons.get_previous_round_date(ref_date)
        assert result == expected


class TestNextRoundDate:

    def _find_date(self, chvz_calendar: ChuvaVazaoCalendar, date_to_find: date) -> dict:
        return next(item for item in chvz_calendar.dates if item["date"] == date_to_find)

    def _set_holiday_on_calendar(self, chvz_calendar: ChuvaVazaoCalendar, holiday: date):
        if holiday.weekday not in [calendar.SATURDAY, calendar.SUNDAY]:
            calendar_date = self._find_date(chvz_calendar, holiday)
            calendar_date['id_date_type'] = DateType.HOLIDAY.value
            calendar_date['name'] = 'feriado'

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 12)), (date(2021, 4, 9), date(2021, 4, 12)),
        (date(2021, 4, 10), date(2021, 4, 12)), (date(2021, 4, 11), date(2021, 4, 12)),
        (date(2021, 4, 12), date(2021, 4, 22)), (date(2021, 4, 13), date(2021, 4, 22)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_01_holidays_wed_thr_fri(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 14))  # wednesday
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 15))  # thrusday
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 16))  # friday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 13)), (date(2021, 4, 9), date(2021, 4, 13)),
        (date(2021, 4, 10), date(2021, 4, 13)), (date(2021, 4, 11), date(2021, 4, 13)),
        (date(2021, 4, 12), date(2021, 4, 13)), (date(2021, 4, 13), date(2021, 4, 22)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_02_holidays_thr_fri(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 15))  # thrusday
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 16))  # friday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 13)), (date(2021, 4, 9), date(2021, 4, 13)),
        (date(2021, 4, 10), date(2021, 4, 13)), (date(2021, 4, 11), date(2021, 4, 13)),
        (date(2021, 4, 12), date(2021, 4, 13)), (date(2021, 4, 13), date(2021, 4, 22)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_03_holidays_wed_thr(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 14))  # wednesday
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 15))  # thrusday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 13)), (date(2021, 4, 9), date(2021, 4, 13)),
        (date(2021, 4, 10), date(2021, 4, 13)), (date(2021, 4, 11), date(2021, 4, 13)),
        (date(2021, 4, 12), date(2021, 4, 13)), (date(2021, 4, 13), date(2021, 4, 22)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_04_holidays_wed_fri(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 14))  # wednesday
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 16))  # friday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 14)), (date(2021, 4, 9), date(2021, 4, 14)),
        (date(2021, 4, 10), date(2021, 4, 14)), (date(2021, 4, 11), date(2021, 4, 14)),
        (date(2021, 4, 12), date(2021, 4, 14)), (date(2021, 4, 13), date(2021, 4, 14)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_05_holidays_thu(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 15))  # thrusday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 14)), (date(2021, 4, 9), date(2021, 4, 14)),
        (date(2021, 4, 10), date(2021, 4, 14)), (date(2021, 4, 11), date(2021, 4, 14)),
        (date(2021, 4, 12), date(2021, 4, 14)), (date(2021, 4, 13), date(2021, 4, 14)),
        (date(2021, 4, 14), date(2021, 4, 22)), (date(2021, 4, 15), date(2021, 4, 22))]
    )
    def test_06_holidays_fri(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        # set holidays
        self._set_holiday_on_calendar(calendar_ons, date(2021, 4, 16))  # friday

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date

    @pytest.mark.parametrize('mock_today, expected_round_date', [
        (date(2021, 4, 8), date(2021, 4, 15)), (date(2021, 4, 9), date(2021, 4, 15)),
        (date(2021, 4, 10), date(2021, 4, 15)), (date(2021, 4, 11), date(2021, 4, 15)),
        (date(2021, 4, 12), date(2021, 4, 15)), (date(2021, 4, 13), date(2021, 4, 15)),
        (date(2021, 4, 14), date(2021, 4, 15))]
    )
    def test_07_no_holidays(self, mock_today: date, expected_round_date: date):
        calendar_ons = ChuvaVazaoCalendar(2021, CalendarType.SIMPLE_COMPATIBLE)

        next_round_date = calendar_ons.get_next_round_date(mock_today)
        assert next_round_date == expected_round_date
