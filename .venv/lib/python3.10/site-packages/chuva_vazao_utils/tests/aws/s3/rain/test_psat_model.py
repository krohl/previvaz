import pytest

from datetime import date
from unittest.mock import Mock

from chuva_vazao_utils.aws.s3.rain.psat_model import PsatDataS3Api, PsatPatternFormatter


###################################################################################################
# PsatPatternFormatter
###################################################################################################
def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum método abstrato deixou de ser implementado
    PsatPatternFormatter()


@pytest.mark.parametrize(
    'pattern,expected_result', [
        ('mock/{data_date_%Y%m%d}/', 'mock/20230215/'),
        ('mock_{data_date_%Y%m%d}.dat', 'mock_20230215.dat'),
    ]
)
def test_format_pattern(pattern: str, expected_result: str):
    # Given
    data_date = date(2023, 2, 15)
    # When
    formated_patterns = PsatPatternFormatter.format_pattern(
        pattern=pattern,
        data_date=data_date,
    )
    # Then
    assert formated_patterns == expected_result


@pytest.mark.parametrize(
    'pattern,expected_result', [
        ('mock/pattern/{mock_}', 'mock/pattern/'),
        ('mock/pattern/{mock_}/mock/{mock}', 'mock/pattern/'),
    ]
)
def test_base_folder(pattern: str, expected_result: str):
    # Given
    model = Mock(key_pattern=pattern)
    # When
    base_folder = PsatPatternFormatter.get_model_base_folder(model)
    # Then
    assert base_folder == expected_result


@pytest.mark.parametrize(
    'filename_pattern,filename,expected_result', [
        ('mock/{data_date_%Y%m%d}', 'mock/20230215', date(2023, 2, 15)),
        ('mock_{data_date_%Y%m%d}.dat', 'mock_20230214.dat', date(2023, 2, 14)),
        ('mock/{data_date_%Y/%m}', 'mock/2023/02', None),
    ]
)
def test_get_data_date_from_filename(filename_pattern: str, filename: str, expected_result: date):
    # Given
    model = Mock(filename_pattern=filename_pattern)
    # When
    decoded_date = PsatPatternFormatter.get_data_date_from_filename(model, filename)
    # Then
    assert decoded_date == expected_result


###################################################################################################
# PsatDataS3Api
###################################################################################################
def test_data_api_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum método abstrato deixou de ser implementado
    PsatDataS3Api()


def test_get_base_folder():
    # Given
    mock_model = Mock(key_pattern='mock/mock/{data_date_%Y%m%d}.dat')
    # When
    base_folder = PsatDataS3Api.get_base_folder(mock_model)
    # Then
    assert base_folder.base_path == 'mock/mock/'
    assert base_folder.bucket_name == 'esfera-inteligencia-mapas-precipitacao-mock-bucket'


def test_get_data_folder():
    # Given
    mock_model = Mock(key_pattern='mock/mock/{data_date_%Y%m%d}/')
    # When
    data_folder = PsatDataS3Api.get_data_folder(mock_model, date(2023, 2, 9))
    # Then
    assert data_folder.base_path == 'mock/mock/20230209/'
    assert data_folder.bucket_name == 'esfera-inteligencia-mapas-precipitacao-mock-bucket'


def test_get_data_file():
    # Given
    mock_model = Mock(key_pattern='mock/mock/{data_date_%Y/%m}/', filename_pattern='file_{data_date_%Y%m%d}.dat')
    # When
    data_file = PsatDataS3Api.get_data_file(mock_model, date(2023, 2, 9))
    # Then
    assert data_file.base_path == 'mock/mock/2023/02/'
    assert data_file.filename == 'file_20230209.dat'
    assert data_file.bucket_name == 'esfera-inteligencia-mapas-precipitacao-mock-bucket'


def test_list_all_data_dates():
    # Given
    mock_model = Mock(filename_pattern='mock_{data_date_%Y%m%d}.dat')

    class PsatDataS3TestApi(PsatDataS3Api):
        @classmethod
        def get_base_folder(cls, model):
            base_folder = Mock()
            base_folder.list_keys.return_value = [
                'mock/mock_20230216.dat',
                'mock/mock_20230215.dat',
                'mock/mock_20230214.dat',
                'mock/mock_20230213.dat',
                'mock/mock_20230213 (1).dat',
            ]
            return base_folder

    # When
    dates_list = PsatDataS3TestApi.list_all_data_dates(mock_model)
    # Then
    assert dates_list == [date(2023, 2, 16), date(2023, 2, 15), date(2023, 2, 14), date(2023, 2, 13), ]
