import pytest
from datetime import date, datetime
from pytest_mock import MockerFixture
from unittest.mock import MagicMock, Mock

from chuva_vazao_utils.aws.s3.remvies.round import RemviesRoundS3Api
from chuva_vazao_utils.entities.remvies.round import RemviesRound

MODULE_PATH = 'chuva_vazao_utils.aws.s3.remvies.round'


@pytest.fixture(autouse=True)
def mock_boto(mocker: MockerFixture) -> MagicMock:
    return mocker.patch('chuva_vazao_utils.aws.s3.s3_models.boto3')


def test_decks_folder():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    # When
    decks_folder = RemviesRoundS3Api.decks_folder(remvies_round)
    # Then
    assert decks_folder.base_path == 'remvies/2022/12/27/123/entrada/'
    assert decks_folder.bucket_name == 'esfera-smap-mock-bucket'


def test_deck_file_future_op_week():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    op_week = Mock(round_date=date(2022, 12, 29))
    # When
    deck_file = RemviesRoundS3Api.deck_file(remvies_round, op_week)
    # Then
    assert deck_file.base_path == 'remvies/2022/12/27/123/entrada/'
    assert deck_file.filename == 'remocao_20221229.zip'
    assert deck_file.bucket_name == 'esfera-smap-mock-bucket'


def test_deck_file_current_op_week():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    op_week = Mock(round_date=date(2022, 12, 22))
    # When
    deck_file = RemviesRoundS3Api.deck_file(remvies_round, op_week)
    # Then
    assert deck_file.base_path == 'remvies/2022/12/27/123/entrada/'
    assert deck_file.filename == 'remocao_20221226.zip'
    assert deck_file.bucket_name == 'esfera-smap-mock-bucket'


def test_output_base_folder():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    # When
    decks_folder = RemviesRoundS3Api.output_base_folder(remvies_round)
    # Then
    assert decks_folder.base_path == 'remvies/2022/12/27/123/saida/'
    assert decks_folder.bucket_name == 'esfera-smap-mock-bucket'


def test_output_folder_future_op_week():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    op_week = Mock(round_date=date(2022, 12, 29))
    # When
    decks_folder = RemviesRoundS3Api.output_folder_op_week(remvies_round, op_week)
    # Then
    assert decks_folder.base_path == 'remvies/2022/12/27/123/saida/20221229'
    assert decks_folder.bucket_name == 'esfera-smap-mock-bucket'


def test_output_folder_current_op_week():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    op_week = Mock(round_date=date(2022, 12, 22))
    # When
    decks_folder = RemviesRoundS3Api.output_folder_op_week(remvies_round, op_week)
    # Then
    assert decks_folder.base_path == 'remvies/2022/12/27/123/saida/20221226'
    assert decks_folder.bucket_name == 'esfera-smap-mock-bucket'


def test_output_file_op_week():
    # Given
    remvies_round = \
        RemviesRound(123, {'mock': 'input'}, 10, date(2022, 12, 26), datetime(2022, 12, 27, 7, 7, 7), Mock())
    op_week = Mock(round_date=date(2022, 12, 29))
    target_date = date(2022, 12, 30)
    # When
    decks_file = RemviesRoundS3Api.output_file_op_week(remvies_round, op_week, target_date)
    # Then
    assert decks_file.base_path == 'remvies/2022/12/27/123/saida/20221229'
    assert decks_file.filename == 'PMEDIA_p261222a301222.dat'
    assert decks_file.bucket_name == 'esfera-smap-mock-bucket'
