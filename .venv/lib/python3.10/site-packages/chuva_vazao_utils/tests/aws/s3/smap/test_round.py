from datetime import date, datetime
from unittest.mock import Mock

from chuva_vazao_utils.aws.s3.smap.round import SmapRoundFilesApi
from chuva_vazao_utils.entities.smap.round import SmapRound


def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum método abstrato deixou de ser implementado
    SmapRoundFilesApi()


def test_get_deck_folder():
    # Given
    smap_round = SmapRound(1, Mock(), Mock(), False, False, 1000, datetime(2023, 2, 1, 10, 1))
    # When
    deck_folder = SmapRoundFilesApi.get_deck_folder(smap_round)
    # Then
    assert deck_folder.bucket_name == 'esfera-smap-mock-bucket'
    assert deck_folder.base_path == 'decks/2023/02/01/1000'


def test_get_smap_output_folder():
    # Given
    mock_model = Mock(name='Mock Model')
    mock_op_week = Mock(round_date=date(2023, 2, 2))
    smap_round = SmapRound(1, mock_model, mock_op_week, False, False, 1000, datetime(2023, 2, 1, 10, 1))
    # When
    deck_folder = SmapRoundFilesApi.get_smap_output_folder(smap_round)
    # Then
    assert deck_folder.bucket_name == 'esfera-smap-mock-bucket'
    # - (Mock não aceita parâmetro 'name')
    assert deck_folder.base_path == f'smap/2023/02/01/{mock_model.name}/20230202/rodada_smap/1000/processamento'


def test_get_post_processing_output_folder():
    # Given
    mock_model = Mock(name='Mock Model')
    mock_op_week = Mock(round_date=date(2023, 2, 2))
    smap_round = SmapRound(1, mock_model, mock_op_week, False, True, 1000, datetime(2023, 2, 1, 10, 1))
    # When
    deck_folder = SmapRoundFilesApi.get_post_processing_output_folder(smap_round)
    # Then
    assert deck_folder.bucket_name == 'esfera-smap-mock-bucket'
    # - (Mock não aceita parâmetro 'name')
    assert deck_folder.base_path == f'smap/2023/02/01/{mock_model.name}/20230202/rodada_manual/1000/pos_processamento'
