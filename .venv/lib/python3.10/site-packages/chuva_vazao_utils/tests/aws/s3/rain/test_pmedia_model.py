import pytest

from datetime import date, datetime
from unittest.mock import Mock

from chuva_vazao_utils.aws.s3.rain.pmedia_model import PmediaDataS3Api, PmediaPatternFormatter


###################################################################################################
# PmediaPatternFormatter
###################################################################################################
def test_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum método abstrato deixou de ser implementado
    PmediaPatternFormatter()


@pytest.mark.parametrize(
    'pattern,expected_result', [
        ('mock/{data_date_%Y%m%d}', 'mock/20230215'),
        ('mock_{data_date_%d%m%y}a{target_date_%d%m%y}.dat', 'mock_150223a160223.dat'),
        ('mock/{round_cpu_date_%Y/%m/%d}/{id_remvies_round}/saida/{sman_oper_date_%Y%m%d}',
         'mock/2023/02/15/20117/saida/20230216'),
        ('mock_p{round_base_date_%d%m%y}a{target_date_%d%m%y}.dat', 'mock_p150223a160223.dat'),
        ('mock/{data_date_%Y/%m}', 'mock/2023/02'),
        ('mock_{data_date_%Y%m%d}.dat', 'mock_20230215.dat'),
        ('mock_{target_date_%d%m}.dat', 'mock_1602.dat'),
    ]
)
def test_format_pattern(pattern: str, expected_result: str):
    # Given
    data_date = date(2023, 2, 15)
    target_date = date(2023, 2, 16)

    op_week = Mock(begin_date=date(2023, 2, 17), round_date=date(2023, 2, 16))
    remvies_round = Mock(id=20117, base_date=date(2023, 2, 15), cpu_date=datetime(2023, 2, 15, 10))
    # When
    formated_patterns = PmediaPatternFormatter.format_pattern(
        pattern=pattern,
        data_date=data_date,
        target_date=target_date,
        remvies_round=remvies_round,
        op_week=op_week,
    )
    # Then
    assert formated_patterns == expected_result


@pytest.mark.parametrize(
    'pattern,expected_result', [
        ('mock/pattern/{mock_}', 'mock/pattern/'),
        ('mock/pattern/{mock_}/mock/{mock}', 'mock/pattern/'),
    ]
)
def test_base_folder(pattern: str, expected_result: str):
    # Given
    model = Mock(key_pattern=pattern)
    # When
    base_folder = PmediaPatternFormatter.get_model_base_folder(model)
    # Then
    assert base_folder == expected_result


@pytest.mark.parametrize(
    'filename_pattern,filename,expected_result', [
        ('mock_p{round_base_date_%d%m%y}a{target_date_%d%m%y}.dat', 'mock_p150223a160223.dat', date(2023, 2, 16)),
        ('mock_{data_date_%Y%m%d}.dat', 'mock_20230215.dat', date(2023, 2, 15)),
        ('mock/{data_date_%Y/%m}', 'mock/2023/02', None),
    ]
)
def test_get_data_date_from_filename(filename_pattern: str, filename: str, expected_result: date):
    # Given
    model = Mock(filename_pattern=filename_pattern)
    # When
    decoded_date = PmediaPatternFormatter.get_data_date_from_filename(model, filename)
    # Then
    assert decoded_date == expected_result


@pytest.mark.parametrize(
    'key_pattern,key,expected_result', [
        ('mock/{data_date_%Y%m%d}', 'mock/20230216', date(2023, 2, 16)),
        ('mock/{round_cpu_date_%Y/%m/%d}/{id_remvies_round}/saida/{sman_oper_date_%Y%m%d}',
         'mock/2023/02/14/20117/saida/20230216', date(2023, 2, 14)),
        ('mock/{data_date_%Y/%m}', 'mock/2023/02', None),
    ]
)
def test_get_data_date_from_key(key_pattern: str, key: str, expected_result: date):
    # Given
    model = Mock(key_pattern=key_pattern)
    # When
    decoded_date = PmediaPatternFormatter.get_data_date_from_key(model, key)
    # Then
    assert decoded_date == expected_result


###################################################################################################
# PmediaDataS3Api
###################################################################################################
def test_data_api_instantiation():
    # Teste garante que classe pode ser instanciada e nenhum método abstrato deixou de ser implementado
    PmediaDataS3Api()


def test_list_all_data_dates():
    # Given
    mock_model = Mock(key_pattern='mock/{data_date_%Y%m%d}')

    class PmediaDataS3TestApi(PmediaDataS3Api):
        @classmethod
        def get_base_folder(cls, model):
            base_folder = Mock()
            base_folder.list_keys.return_value = [
                'mock/20230216/file_1.dat',
                'mock/20230215/file_1.dat',
                'mock/20230214/file_1.dat',
                'mock/20230213/file_1.dat',
            ]
            return base_folder

    # When
    dates_list = PmediaDataS3TestApi.list_all_data_dates(mock_model)
    # Then
    assert dates_list == [date(2023, 2, 16), date(2023, 2, 15), date(2023, 2, 14), date(2023, 2, 13), ]
