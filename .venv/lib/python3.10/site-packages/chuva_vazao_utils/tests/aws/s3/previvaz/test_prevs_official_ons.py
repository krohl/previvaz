from datetime import date
from unittest.mock import Mock, call

import pytest

from chuva_vazao_utils.entities.exception import FileNotFound
from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.aws.s3.previvaz.prevs_official_ons import PrevsOfficialOnsFilesApi


@pytest.fixture
def get_today_mock(mocker):
    return mocker.patch('chuva_vazao_utils.aws.s3.previvaz.prevs_official_ons.get_today')


@pytest.fixture
def chuva_vazao_calendar_mock(mocker):
    return mocker.patch('chuva_vazao_utils.aws.s3.previvaz.prevs_official_ons.ChuvaVazaoCalendar')


@pytest.fixture
def semana_operativa_factory_mock(mocker):
    return mocker.patch('chuva_vazao_utils.aws.s3.previvaz.prevs_official_ons.SemanaOperativaFactory')


@pytest.fixture
def s3_file_mock(mocker):
    return mocker.patch('chuva_vazao_utils.aws.s3.previvaz.prevs_official_ons.S3File')


def test_get_latest_prevs_file_success(
    get_today_mock, chuva_vazao_calendar_mock,
    semana_operativa_factory_mock, s3_file_mock
):
    get_today_mock.return_value = date(2023, 4, 18)
    chuva_vazao_calendar_mock.return_value.get_previous_round_date.return_value = date(2023, 4, 13)
    chuva_vazao_calendar_mock.return_value.get_rv.return_value = (2, date(2023, 4, 14))
    semana_operativa_factory_mock.create_from_date.return_value = Mock(week='2024043', spec=SemanaOperativa)
    s3_file_mock.return_value.exists.return_value = True

    result = PrevsOfficialOnsFilesApi.get_latest_prevs_file()

    assert result == s3_file_mock.return_value
    chuva_vazao_calendar_mock.return_value.get_previous_round_date.assert_called_once_with(date(2023, 4, 19))
    chuva_vazao_calendar_mock.return_value.get_rv.assert_called_once_with(date(2023, 4, 20))
    semana_operativa_factory_mock.create_from_date.assert_called_once_with(date(2023, 4, 20))
    s3_file_mock.assert_called_once_with(
        'previvaz/2023/04/13/Oficial_ONS/2024043/rodada_oficial', 'prevs.rv2', 'esfera-inteligencia-preco-mock-bucket'
    )


def test_get_latest_prevs_file_file_not_found(
    get_today_mock, chuva_vazao_calendar_mock,
    semana_operativa_factory_mock, s3_file_mock
):
    get_today_mock.return_value = date(2023, 4, 18)
    chuva_vazao_calendar_mock.return_value.get_previous_round_date.side_effect = [
        date(2023, 4, 13), date(2023, 4, 5), date(2023, 3, 30), date(2023, 3, 23), date(2023, 3, 16),
        date(2023, 3, 9), date(2023, 3, 2), date(2023, 2, 23), date(2023, 2, 16), date(2023, 2, 9)
    ]
    chuva_vazao_calendar_mock.return_value.get_rv.side_effect = [
        (2, date(2023, 4, 14)), (1, date(2023, 4, 7)), (0, date(2023, 3, 31)), (4, date(2023, 3, 24)), (3, date(2023, 3, 17)),
        (2, date(2023, 3, 10)), (1, date(2023, 3, 3)), (0, date(2023, 2, 24)), (3, date(2023, 2, 17)), (2, date(2023, 2, 10))
    ]
    semana_operativa_factory_mock.create_from_date.side_effect = [
        Mock(week='2024043', spec=SemanaOperativa), Mock(week='2024042', spec=SemanaOperativa),
        Mock(week='2024041', spec=SemanaOperativa), Mock(week='2024035', spec=SemanaOperativa),
        Mock(week='2024034', spec=SemanaOperativa), Mock(week='2024033', spec=SemanaOperativa),
        Mock(week='2024032', spec=SemanaOperativa), Mock(week='2024031', spec=SemanaOperativa),
        Mock(week='2024024', spec=SemanaOperativa), Mock(week='2024023', spec=SemanaOperativa)
    ]
    s3_file_mock.return_value.exists.return_value = False

    with pytest.raises(FileNotFound):
        PrevsOfficialOnsFilesApi.get_latest_prevs_file()

    chuva_vazao_calendar_mock.return_value.get_previous_round_date.assert_has_calls([
        call(date(2023, 4, 19)), call(date(2023, 4, 13)), call(date(2023, 4, 5)), call(date(2023, 3, 30)),
        call(date(2023, 3, 23)), call(date(2023, 3, 16)), call(date(2023, 3, 9)), call(date(2023, 3, 2)),
        call(date(2023, 2, 23)), call(date(2023, 2, 16))
    ])
    chuva_vazao_calendar_mock.return_value.get_rv.assert_has_calls([
        call(date(2023, 4, 20)), call(date(2023, 4, 12)), call(date(2023, 4, 6)), call(date(2023, 3, 30)),
        call(date(2023, 3, 23)), call(date(2023, 3, 16)), call(date(2023, 3, 9)), call(date(2023, 3, 2)),
        call(date(2023, 2, 23)), call(date(2023, 2, 16))
    ])
    semana_operativa_factory_mock.create_from_date.assert_has_calls([
        call(date(2023, 4, 20)), call(date(2023, 4, 12)), call(date(2023, 4, 6)), call(date(2023, 3, 30)),
        call(date(2023, 3, 23)), call(date(2023, 3, 16)), call(date(2023, 3, 9)), call(date(2023, 3, 2)),
        call(date(2023, 2, 23)), call(date(2023, 2, 16))
    ])
