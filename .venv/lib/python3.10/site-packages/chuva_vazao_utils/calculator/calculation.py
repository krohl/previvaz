import json
from typing import List
from functools import lru_cache
from dataclasses import dataclass

from toposort import CircularDependencyError, toposort_flatten

from chuva_vazao_utils.database_access.table_base import TableBase
from chuva_vazao_utils.calculator.calculation_type import CalculationType
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@dataclass
class EnaCalculation:
    id_power_plant: int
    calculation: dict

    def __post_init__(self):
        self.calculation = json.loads(self.calculation)


@lru_cache(maxsize=16)
def get_calculations(calculation_type: CalculationType):
    cols = [
        'calculation.id_power_plant',
        'calculation.calculation',
    ]
    conditions = {
        'calculation.id_calculation_type': calculation_type.value,
        'calculation.end_date': None,
    }
    calculation_table = TableBase.from_tablename('Calculation', 'calculation')
    response = calculation_table.select(cols, where=conditions)
    return [EnaCalculation(**x) for x in response]


def filter_calculation(power_plant_id: int, calculation_type: CalculationType):
    calculations = get_calculations(calculation_type)
    return next(filter(lambda x: x.id_power_plant == power_plant_id, calculations), None)


def sort_by_priority(power_plants: List[PowerPlant], calculation_type: CalculationType) -> List[PowerPlant]:
    '''Sort by dependencies'''
    dep = {}
    for power_plant in power_plants:
        calculation = filter_calculation(power_plant.id, calculation_type)
        if not calculation:
            continue

        dependencies = get_dependencies(power_plant, calculation)
        dep.update(dependencies)

    try:
        order = toposort_flatten(dep)
    except CircularDependencyError:
        order = list(dep.keys())

    sorted_plants = []
    for posto_rdh in order:
        power_plant = next((p for p in power_plants if p.posto_rdh == posto_rdh), None)
        if power_plant:
            sorted_plants.append(power_plant)

    return sorted_plants


def get_dependencies(power_plant: PowerPlant, ena_calculation: EnaCalculation):
    depend_set = {
        dependencia['codigo']
        for key, dependencia in ena_calculation.calculation.items()
        if key not in ['calculo_vazao', 'calculo_ena_ree', 'hidrograma']
    }
    return {
        power_plant.posto_rdh: depend_set
    }
