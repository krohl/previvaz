from copy import deepcopy

from chuva_vazao_utils.calculator.dao import fetch_subsystems
from chuva_vazao_utils.calendar.interval_type import IntervalType
from chuva_vazao_utils.calculator.expression_calculator import ExpressionCalculator
from chuva_vazao_utils.calculator.expression_parser.earm_max_expression_parser import EarmMaxExpressionParser


class EarmMaxCalculator(ExpressionCalculator):
    def __init__(self, earm: list, interval_type=IntervalType.DAILY):
        self._earm = deepcopy(earm)
        self._subsystems = fetch_subsystems()
        self._parser = EarmMaxExpressionParser(interval_type)

    def eval(self, calculations: dict) -> float:
        self._parser.calculations = calculations
        for calculation in calculations.get('earm_max', []):
            expression = calculation.get('expressao')
            expression = self._parser.parse(expression)
            eval(expression, {'add_fictitious': self.add_fictitious})

        return self._earm

    def eval_all(self, calculations: list):
        for calculation in calculations:
            self.eval(calculation)

        return self._earm

    def add_fictitious(self, posto_rdh: str, subsystem_acronym: str, earm_max: float) -> float:
        subsystem = next(filter(lambda s: s['sigla'] == subsystem_acronym, self._subsystems), None)
        if not subsystem:
            raise ValueError(f'{subsystem_acronym} is not a valid subsystem!')

        posto = {'id_power_plant': None, 'posto_rdh': posto_rdh, 'id_subsistema': subsystem.get('id_subsistema'), 'earm_max': earm_max}
        self._earm.append(posto)
