from datetime import date, timedelta

from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar
from chuva_vazao_utils.calendar.interval_type import IntervalType


class Hydrogram:
    '''
    From 2020 it was decided that the hydrogram
    to be used will alternate annually between A and B,
    starting in 2020 for A, 2021 for B
    '''

    def __init__(self, **values):
        self._values = values

    def fetchvalue(self, ref_date: date, interval_type: IntervalType) -> float:
        if interval_type == IntervalType.DAILY:
            return self._filter_daily_value(ref_date)

        elif interval_type == IntervalType.WEEKLY:
            return self._filter_weekly_value(ref_date)

        else:
            error_msg = 'Hydrogram calculation not implemented for this interval type'
            raise NotImplementedError(error_msg)

    def _filter_daily_value(self, ref_date: date) -> float:
        hidrograma_ref = self._values['hidrograma_ref']
        month = ref_date.month
        day = ref_date.day
        month_abbr = ChuvaVazaoCalendar.get_month_abbr(month)
        month_values = self._values[month_abbr]
        day_values = next(filter(lambda x: x['dia'] == day, month_values))
        return float(day_values[hidrograma_ref])

    def _filter_weekly_value(self, ref_date: date):
        simple_calendar = ChuvaVazaoCalendar(ref_date.year, CalendarType.SIMPLE)
        _, rv_date = simple_calendar.get_rv(ref_date)
        start_rv = rv_date - timedelta(days=6)

        daily_values = []
        while start_rv <= rv_date:
            daily_value = self._filter_daily_value(start_rv)
            daily_values.append(daily_value)
            start_rv += timedelta(days=1)

        return sum(daily_values) / len(daily_values)
