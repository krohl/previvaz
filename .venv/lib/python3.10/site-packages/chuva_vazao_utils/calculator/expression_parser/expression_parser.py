import re
from abc import ABC, abstractmethod
from datetime import date

from chuva_vazao_utils.calculator.dao import fetch_coefficients, fetch_productivity
from chuva_vazao_utils.calendar.interval_type import IntervalType
from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar
from chuva_vazao_utils.calculator.expression_parser.hydrogram import Hydrogram


class ExpressionParser(ABC):

    def __init__(self, interval_type: IntervalType):
        self._coefficients = fetch_coefficients()
        self._productivity = fetch_productivity()
        self._calculations = None
        self._interval_type = interval_type

    @property
    def postos(self):
        return [
            k for k, v in self.calculations.items()
            if 'codigo' in v
        ]

    @property
    def calculations(self) -> dict:
        return self._calculations

    @calculations.setter
    def calculations(self, calculations: dict):
        self._calculations = calculations

    @property
    def reference_date(self) -> date:
        return self._reference_date

    @reference_date.setter
    def reference_date(self, reference_date: date):
        self._reference_date = reference_date

    @property
    def calendar(self):
        year = self.reference_date.year
        return ChuvaVazaoCalendar(year, CalendarType.SIMPLE)

    def _sub_codposto(self, expression):
        for posto in self.postos:
            posto_calulation = self.calculations[posto]
            if 'codigo' in posto_calulation:
                codigo = posto_calulation['codigo']
                expression = expression.replace(f'\'{posto}\'', f'\'{codigo}\'')
        return expression

    def _sub_coeff(self, expression):
        month = self.reference_date.replace(day=1)

        for posto in self.postos:
            posto_rdh = self.calculations[posto]['codigo']
            plant_coeff = list(filter(
                lambda x: x['posto_rdh'] == posto_rdh and x['mes'] == month, self._coefficients
            ))

            for coeff in plant_coeff:
                expression = expression.replace(
                    coeff['tipo_coeficiente'], str(coeff['valor'])
                )

        return expression

    def _sub_produtibility(self, expression):
        for posto in self.postos:
            posto_rdh = self.calculations[posto]['codigo']
            productivity = next((x for x in self._productivity if x['posto_rdh'] == posto_rdh), None)

            if productivity:
                expression = expression.replace(f'produtibilidade(\'{posto_rdh}\')', str(productivity['valor']))

        return expression

    def _sub_hydrogram(self, expression: str) -> str:
        hydrogram_values = self.calculations.get('hidrograma')

        if hydrogram_values:
            hydrogram = Hydrogram(**hydrogram_values)
            value = hydrogram.fetchvalue(self.reference_date, self._interval_type)
            expression = re.sub('\'hidrograma\'', str(value), expression)

        return expression

    @abstractmethod
    def parse(self, expression) -> str:
        raise NotImplementedError()
