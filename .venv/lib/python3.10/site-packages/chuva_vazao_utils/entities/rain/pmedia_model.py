from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, datetime
from enum import Enum
from typing import List, Union

from chuva_vazao_utils.entities.apis.file import File, Folder
from chuva_vazao_utils.entities.apis.chvz_entity import ChVzEntity, ChVzEntityApi
from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.entities.rain.rain_model import BaseRainModel, BaseRainDataApi
from chuva_vazao_utils.entities.remvies.round import RemviesRound


class PmediaModelMenu(Enum):
    """IDs dos modelos de PMEDIA (os mesmos IDs devem estar na base, pois eles serÃ£o utilizados nas queries)"""
    ECMWF_15_Dias = 2
    ECMWF_45_Dias = 3
    CFSv2_ETA40 = 4
    ONS = 5
    ESFERA = 7
    NCEP_GEFS_ETA40 = 8
    GEFS_0p5_ETA40 = 10
    ONS_EC_15 = 11
    ONS_GEFS = 12
    ONS_ETA40 = 13
    ONS_GEFS_ETA40 = 14
    TEMPO_OK = 15


@dataclass(eq=True, frozen=True)
class PmediaModel(ChVzEntity):
    limite_dias: int
    key_pattern: str
    filename_pattern: str
    bucket: str
    model: BaseRainModel

    @property
    def is_previsao(self) -> bool:
        return self.model.is_previsao

    @property
    def name(self) -> str:
        return self.model.name


class PmediaModelApi(ChVzEntityApi, ABC):
    @classmethod
    @abstractmethod
    def fetch_model(cls, model: PmediaModelMenu) -> PmediaModel:
        raise NotImplementedError

    @classmethod
    def fetch_by_rain_model_id(cls, rain_model_id: int) -> PmediaModel:
        pmedia_models: List[PmediaModel] = cls.fetch_all()
        return next((pmedia_model for pmedia_model in pmedia_models if pmedia_model.model._id == rain_model_id), None)

    @classmethod
    def fetch_by_rain_model_name(cls, rain_model_name: str) -> Union[PmediaModel, None]:
        pmedia_models: List[PmediaModel] = cls.fetch_all()
        return next((pmedia_model for pmedia_model in pmedia_models if pmedia_model.model.name == rain_model_name), None)


class PmediaDataApi(BaseRainDataApi, ABC):
    @classmethod
    @abstractmethod
    def get_data_folder(
        cls,
        model: PmediaModel,
        data_date: Union[date, datetime],
        target_date: Union[date, datetime] = None,
        smap_round: RemviesRound = None,
        op_week: SemanaOperativa = None
    ) -> Folder:
        raise NotImplementedError

    @classmethod
    @abstractmethod
    def get_data_file(
        cls,
        model: PmediaModel,
        data_date: Union[date, datetime],
        target_date: Union[date, datetime] = None,
        remvies_round: RemviesRound = None,
        op_week: SemanaOperativa = None
    ) -> File:
        raise NotImplementedError
