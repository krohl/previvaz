from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, datetime
from enum import Enum
from typing import List, Union

from chuva_vazao_utils.entities.apis.file import File, Folder
from chuva_vazao_utils.entities.apis.chvz_entity import ChVzEntity, ChVzEntityApi
from chuva_vazao_utils.entities.rain.rain_model import BaseRainModel, BaseRainDataApi


class PsatModelMenu(Enum):
    """IDs dos dos históricos cadastrados (os mesmos IDs devem estar na base, pois eles serão utilizados nas queries)"""
    IMERGE_HORARIO = 1
    MERGE_HORARIO = 2
    MERGE_DIARIO = 3


@dataclass(eq=True, frozen=True)
class PsatModel(ChVzEntity):
    key_pattern: str
    filename_pattern: str
    model: BaseRainModel


class PsatModelApi(ChVzEntityApi, ABC):
    @classmethod
    @abstractmethod
    def fetch_psat_model(cls, model: PsatModelMenu) -> PsatModel:
        raise NotImplementedError

    @classmethod
    def fetch_by_rain_model_id(cls, rain_model_id: int) -> Union[PsatModel, None]:
        models: List[PsatModel] = cls.fetch_all()
        return next((model for model in models if model.model._id == rain_model_id), None)

    @classmethod
    def fetch_by_rain_model_name(cls, rain_model_name: int) -> Union[PsatModel, None]:
        models: List[PsatModel] = cls.fetch_all()
        return next((model for model in models if model.model.name == rain_model_name), None)


class PsatDataApi(BaseRainDataApi, ABC):
    @classmethod
    @abstractmethod
    def get_data_folder(
        cls,
        model: PsatModel,
        data_date: Union[date, datetime],
    ) -> Folder:
        raise NotImplementedError

    @classmethod
    @abstractmethod
    def get_data_file(
        cls,
        model: PsatModel,
        data_date: Union[date, datetime],
    ) -> File:
        raise NotImplementedError
