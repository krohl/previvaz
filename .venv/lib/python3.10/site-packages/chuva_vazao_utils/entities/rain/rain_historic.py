from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date
from enum import Enum
from typing import List, Union

from chuva_vazao_utils.aws.s3.s3_models import File, Folder
from chuva_vazao_utils.entities.apis.chvz_entity import ChVzEntity, ChVzEntityApi
from chuva_vazao_utils.entities.rain.rain_model import BaseRainModel


class RainHistoricMenu(Enum):
    """IDs dos dos históricos cadastrados (os mesmos IDs devem estar na base, pois eles serão utilizados nas queries)"""
    ONS_GEFS = 1
    ONS_ETA40 = 2
    ONS_ECMWF = 3
    ONS_PSAT = 4


@dataclass(eq=True, frozen=True)
class RainHistoric(ChVzEntity):
    key: str
    filename_pattern: str
    model: BaseRainModel


class RainHistoricApi(ChVzEntityApi, ABC):
    @classmethod
    @abstractmethod
    def fetch_rain_historic(cls, model: RainHistoricMenu) -> RainHistoric:
        raise NotImplementedError

    @classmethod
    def fetch_by_rain_model_id(cls, rain_model_id: int) -> Union[RainHistoric, None]:
        models: List[RainHistoric] = cls.fetch_all()
        return next((model for model in models if model.model._id == rain_model_id), None)

    @classmethod
    def fetch_by_rain_model_name(cls, rain_model_name: int) -> Union[RainHistoric, None]:
        models: List[RainHistoric] = cls.fetch_all()
        return next((model for model in models if model.model.name == rain_model_name), None)


class RainHistoricDataApi(ABC):
    @classmethod
    @abstractmethod
    def get_historic_folder(cls, rain_historic: RainHistoric) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def get_data_file(cls, rain_historic: RainHistoric, target_date: date) -> File:
        raise NotImplementedError()
