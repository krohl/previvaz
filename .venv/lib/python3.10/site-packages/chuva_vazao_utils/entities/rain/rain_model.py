from abc import ABC, abstractmethod, abstractproperty
from dataclasses import dataclass
from datetime import date, timedelta
from enum import Enum
from functools import lru_cache
from typing import List, Union

from chuva_vazao_utils.entities.apis.chvz_entity import EntityWithName, EntityWithNameApi
from chuva_vazao_utils.entities.apis.file import File, Folder
from chuva_vazao_utils.entities.utils.abs_dataclass import AbstractDataclass
from chuva_vazao_utils.utils.dateutils import get_today
from chuva_vazao_utils.utils.logger import logger


class RainModelMenu(Enum):
    """IDs dos modelos de chuva (os mesmos IDs devem estar na base, pois eles serão utilizados nas queries)"""

    ONS_GEFS = 1
    ONS_ETA40 = 2
    NCEP_GEFS_00 = 3
    NCEP_GEFS_06 = 4
    NCEP_GEFS_12 = 5
    NCEP_GEFS_18 = 6
    CPTEC_MERGE_DIARIO = 7
    CPTEC_MERGE_HORARIO = 8
    ECMWF_15_Dias = 9
    ECMWF_45_Dias = 10
    CFSv2_ETA40 = 11
    CFSv2_GEFS = 12
    ONS = 13
    ESFERA = 14
    NCEP_GEFS_ETA40 = 15
    NASA_IMERGE_HORARIO = 16
    BASE = 17
    GEFS_0p5 = 18
    CFSv2_GEFS_0p5 = 19
    GEFS_0p5_ETA40 = 20
    Chuva_Otimista = 21
    Chuva_Pessimista = 22
    Chuva_0 = 23
    ONS_ECMWF_15_Dias = 24
    FACTIVEL = 25
    LS = 26
    LI = 27
    INTER_LS = 28
    INTER_LI = 29
    GEFS_0p5_06Z = 30
    GEFS_0p5_12Z = 31
    GEFS_0p5_18Z = 32
    GFSop_00Z = 33
    GFSop_06Z = 34
    GFSop_12Z = 35
    GFSop_18Z = 36
    ONS_GEFS_ETA40 = 37
    TEMPO_OK = 38
    PSAT = 39
    NASA_IMERGE_HORARIO_PROCESSADO = 40


@dataclass(eq=True, frozen=True)
class BaseRainModel(EntityWithName, AbstractDataclass):
    nickname: str
    key: str
    filename_prefix: str

    @abstractproperty
    def is_previsao(self) -> bool:
        raise NotImplementedError()


@dataclass(eq=True, frozen=True)
class ForecastRainModel(BaseRainModel):
    @property
    def is_previsao(self) -> bool:
        return True


@dataclass(eq=True, frozen=True)
class ObservedRainModel(BaseRainModel):
    @property
    def is_previsao(self) -> bool:
        return False


class RainModelApi(EntityWithNameApi, ABC):
    @classmethod
    def fetch_all_forecast(cls) -> List[ForecastRainModel]:
        models: List[BaseRainModel] = cls.fetch_all()
        return [m for m in models if m.is_previsao]

    @classmethod
    def fetch_all_observed(cls) -> List[ObservedRainModel]:
        models: List[BaseRainModel] = cls.fetch_all()
        return [m for m in models if not m.is_previsao]


class BaseRainDataApi(ABC):
    @classmethod
    @abstractmethod
    def get_base_folder(cls, rain_model: BaseRainModel) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def get_data_folder(cls, rain_model: BaseRainModel, *args, **kwargs) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def get_data_file(cls, rain_model: BaseRainModel, *args, **kwargs) -> File:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def list_all_data_dates(cls, model: BaseRainModel) -> List[date]:
        """Retorna a lista com todas as datas de arquivos encontrados na pasta de dados do modelo

        Args:
            model (BaseRainModel): Modelo de chuva cuja lista de datas de dados é desejada

        Returns:
            List[date]: Lista de datas de todos os arquivos de dados do modelo
        """
        raise NotImplementedError

    @classmethod
    @lru_cache(maxsize=16)
    def get_newest_data_date_last_seven_days(cls, model: BaseRainModel, ref_date: date = None) -> Union[date, None]:
        """Checks if there is data from the last seven days on S3. Return the date, if it exists or None otherwise.

        Args:
            model (BaseRainModel): Modelo de chuva cuja lista de datas de dados é desejada
            ref_date (date, optional): Data de referência para busca (buscará dados desta data para trás, incluindo esta data). Se não informado, considera a data de hoje.

        Returns:
            Union[date, None]: Last data date before ref_date or None, if there is no data on the last seven days
        """
        if not ref_date:
            ref_date = get_today()

        for i in range(7):
            searched_date = ref_date - timedelta(days=i)
            searched_folder = cls.get_data_folder(model=model, data_date=searched_date)
            if searched_folder.exists():
                return searched_date

    @classmethod
    @lru_cache(maxsize=16)
    def get_oldest_data_date(cls, model: BaseRainModel) -> Union[date, None]:
        """Retorna a data do arquivo mais antigo do modelo `model` (a data é decodificada do padrão de nome do modelo,
        não se utiliza a data de criação/edição do arquivo)

        Args:
            model (BaseRainModel): Modelo de chuva cuja data do arquivo mais antigo é desejada

        Returns:
            Union[date, None]: A data do arquivo mais antigo ou `None` se nenhuma data foi decodificada dos arquivos do modelo,
                               ou se não há arquivos
        """
        return min(cls.list_all_data_dates(model), default=None)

    @classmethod
    @lru_cache(maxsize=16)
    def get_newest_data_datetime(cls, model: BaseRainModel) -> Union[date, None]:
        """Retorna a data do arquivo mais novo do modelo `model` (a data é decodificada do padrão de nome do modelo,
        não se utiliza a data de criação/edição do arquivo)

        Args:
            model (BaseRainModel): Modelo de chuva cuja data do arquivo mais novo é desejada

        Returns:
            Union[date, None]: A data do arquivo mais antigo ou `None` se nenhuma data foi decodificada dos arquivos do modelo,
                               ou se não há arquivos
        """
        if last_data_date := cls.get_newest_data_date_last_seven_days(model):
            return last_data_date
        return max(cls.list_all_data_dates(model), default=None)

    @classmethod
    @lru_cache(maxsize=16)
    def get_newest_data_date_before_date(cls, model: BaseRainModel, ref_date: date) -> date:
        """Retorna a data do arquivo mais novo do modelo `model`, antes de `ref_date` (a data é decodificada do padrão de nome do modelo,
        não se utiliza a data de criação/edição do arquivo)

        Args:
            model (BaseRainModel): Modelo de chuva cuja data do arquivo mais novo é desejada
            ref_date (date): Data de referência: busca-se o último dado anterior a esta data.

        Returns:
            date: A data do arquivo mais novo antes de `ref_date` ou `None` se não há arquivos anteriores a `ref_date`
        """
        if last_data_date := cls.get_newest_data_date_last_seven_days(model, ref_date=ref_date):
            return last_data_date

        dates_before_ref_date = [d for d in cls.list_all_data_dates(model) if d <= ref_date]
        if not dates_before_ref_date:
            logger.warning(f'Não existe arquivo anterior à {ref_date} para o modelo {model.name}')
            return cls.get_oldest_data_date(model)

        return max(dates_before_ref_date)
