from __future__ import annotations

from abc import ABC, abstractmethod
from typing import List, Union
from datetime import datetime
from dataclasses import dataclass

from chuva_vazao_utils.entities.river.river import River
from chuva_vazao_utils.entities.power_plant.ree import ReservatorioEquivalente
from chuva_vazao_utils.entities.subsystem.subsytem import Subsystem


@dataclass
class PowerPlant:
    name: str
    full_name: str
    river: River
    cod: str
    posto_rdh: str
    codigo_ana: str
    latitude: float
    longitude: float
    is_smap: bool
    is_fluviometric: bool
    reservatorio_eqv: ReservatorioEquivalente
    subsistema: Subsystem
    begin_date: datetime
    end_date: Union[datetime, None]
    id: Union[int, None] = None

    def __hash__(self) -> int:
        return hash(self.id)

    def __eq__(self, other: PowerPlant) -> bool:
        return self.id == other.id


class PowerPlantApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls) -> List[PowerPlant]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_all_smap_power_plants(cls) -> List[PowerPlant]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_smap_deck_power_plants(cls) -> List[PowerPlant]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_fluviometric_power_plants(cls) -> List[PowerPlant]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_id(cls, id: int) -> PowerPlant:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_full_name(cls, full_name: str) -> PowerPlant:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_posto_rdh(cls, posto_rdh: str) -> PowerPlant:
        raise NotImplementedError()
