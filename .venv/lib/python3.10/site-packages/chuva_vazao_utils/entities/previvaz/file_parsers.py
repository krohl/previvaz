import json

from abc import ABC, abstractmethod
from collections import defaultdict
from datetime import date
from typing import List

from chuva_vazao_utils.entities.inflow.inflow_source import InflowSourceApi, InflowSourceMenu
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType, InflowTypeApi
from chuva_vazao_utils.entities.inflow.origin_type import OriginTypeApi, OriginTypeMenu
from chuva_vazao_utils.entities.inflow.inflow_weekly import WeeklyInflow
from chuva_vazao_utils.entities.operative_week import SemanaOperativa, SemanaOperativaFactory
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlantApi
from chuva_vazao_utils.entities.apis.file import File


class PrevivazFilesParser(ABC):
    @classmethod
    @abstractmethod
    def get_inflows_from_file(cls, inflows_file: File, *args, **kwargs) -> List[WeeklyInflow]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File, *args, **kwargs):
        raise NotImplementedError()


class PrevivazObservedInflowsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(
        cls, inflows_file: File, power_plant_api: PowerPlantApi, inflow_type_api: InflowTypeApi, inflow_source_api: InflowSourceApi,
        origin_type_api: OriginTypeApi
    ) -> List[WeeklyInflow]:
        file_content = inflows_file.read_content()
        file_content = json.loads(file_content[0])

        inflows = []
        for inflow_dict in file_content:
            power_plant = power_plant_api.fetch_by_id(inflow_dict['id_power_plant'])
            type_inflow = inflow_type_api.fetch_by_id(inflow_dict['id_type_inflow'])
            origin_type = origin_type_api.fetch_origin_type(OriginTypeMenu.ACOMPH)
            inflow_source = inflow_source_api.fetch_inflow_source(InflowSourceMenu.ONS)
            op_week = SemanaOperativaFactory.create_from_year_n_week(
                int(inflow_dict['year']), int(inflow_dict['n_week'])
            )

            inflow = WeeklyInflow(op_week, inflow_dict['value'], power_plant, type_inflow, origin_type, inflow_source)
            inflows.append(inflow)
        return inflows

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File) -> str:
        def inflow_to_dict(inflow: WeeklyInflow):
            return {
                'id_power_plant': inflow.power_plant.id,
                'posto_rdh': inflow.power_plant.posto_rdh,
                'id_type_inflow': inflow.inflow_type.id,
                'n_week': inflow.op_week.n_week,
                'year': inflow.op_week.year,
                'value': inflow.value,
            }
        inflow_list = [inflow_to_dict(inflow) for inflow in inflows]

        file_content = json.dumps(inflow_list, default=str)
        inflows_file.save_content(file_content)


class PrevivazForecastInflowsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(
            cls, inflows_file: File, power_plant_api: PowerPlantApi, inflow_type_api: InflowTypeApi, origin_type_api: OriginTypeApi
    ) -> List[WeeklyInflow]:
        file_content = inflows_file.read_content()
        file_content = json.loads(file_content[0])

        inflows = []
        for inflow_dict in file_content:
            power_plant = power_plant_api.fetch_by_id(inflow_dict['id_power_plant'])
            type_inflow = inflow_type_api.fetch_by_id(inflow_dict['id_type_inflow'])
            origin_type = origin_type_api.fetch_by_id(inflow_dict['id_origin_type'])
            op_week = SemanaOperativaFactory.create_from_year_n_week(inflow_dict['year'], inflow_dict['n_week'])

            inflow = WeeklyInflow(op_week, inflow_dict['value'], power_plant, type_inflow, origin_type, None)
            inflows.append(inflow)

        return inflows

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File) -> str:
        def inflow_to_dict(inflow: WeeklyInflow):
            return {
                'posto_rdh': inflow.power_plant.posto_rdh,
                'id_type_inflow': inflow.inflow_type.id,
                'id_origin_type': inflow.origin.id,
                'value': inflow.value,
                'id_power_plant': inflow.power_plant.id,
                'smap_flag': inflow.power_plant.is_smap,
                'cod_power_plant': inflow.power_plant.cod,
                'rv': inflow.op_week.end_date,
                'n_week': inflow.op_week.n_week,
                'year': inflow.op_week.year,
            }
            # Faltando (o json atual tem os campos): 'priority'
        inflow_list = [inflow_to_dict(inflow) for inflow in inflows]

        file_content = json.dumps(inflow_list, default=str)
        inflows_file.save_content(file_content)


class PrevivazPluviaInflowsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(cls, inflows_file: File) -> List[WeeklyInflow]:
        raise NotImplementedError()
        # Não desenvolvido, pois o pluvia foi descontinuado. Ainda assim, a lambda que monta o arquivo "entrada.txt" precisa conhecer o caminho deste
        # arquivo pluvia

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow]):
        raise NotImplementedError()
        # Não desenvolvido, pois o pluvia foi descontinuado. Ainda assim, a lambda que monta o arquivo "entrada.txt" precisa conhecer o caminho deste
        # arquivo pluvia


class PrevivazInputInflowsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(cls, inflows_file: File, power_plant_api: PowerPlantApi) -> List[WeeklyInflow]:
        file_content = inflows_file.read_content()

        inflows = []
        for file_line in file_content:
            line_data = file_line.split(' ')
            power_plant = power_plant_api.fetch_by_posto_rdh(line_data[0])
            op_week = SemanaOperativaFactory.create_from_year_n_week(int(line_data[1]), int(line_data[2]))

            inflows.append(WeeklyInflow(op_week, int(line_data[3]), power_plant, None, None, None))

        return inflows

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File):
        file_content = '\n'.join(
            f'{i.power_plant.posto_rdh} {i.op_week.year} {i.op_week.n_week} {round(i.value)}'
            for i in inflows
        )
        inflows_file.save_content(file_content)


class PrevivazOutputInflowsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(cls, inflows_file: File, power_plant_api: PowerPlantApi) -> List[WeeklyInflow]:
        file_content = inflows_file.read_content()

        inflows = []
        for file_line in file_content:
            line_data = file_line.split(' ')
            num_inflows = len(line_data) - 5

            inflow_type = InflowType(-1, line_data[0])
            power_plant = power_plant_api.fetch_by_posto_rdh(line_data[1])

            for i in range(num_inflows):
                first_month_day = date(int(line_data[2]), int(line_data[3]), 1)
                op_week = SemanaOperativaFactory.create_for_relative_rv(first_month_day, int(line_data[4]) + i)
                inflows.append(WeeklyInflow(op_week, float(line_data[5 + i]), power_plant, inflow_type, None, None))

        return inflows

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File):
        file_content = []

        groups = defaultdict(list)
        for i in inflows:
            key = f'{i.power_plant.id}_{i.inflow_type.id}'
            groups[key].append(i)

        for _, inflows in groups.items():
            inflows.sort(key=lambda x: x.op_week.end_date)

            inflows_type = inflows[0].inflow_type.name
            posto_rdh = inflows[0].power_plant.posto_rdh
            year = inflows[0].op_week.year
            month = inflows[0].op_week.month
            week = inflows[0].op_week.n_week
            inflows_str = " ".join(['{:.6f}'.format(i.value) for i in inflows])

            file_content.append(
                f'{inflows_type} {posto_rdh} {year} {month} {week} {inflows_str}'
            )
        file_content = '\n'.join(file_content)

        inflows_file.save_content(file_content)


class PrevsFileParser(PrevivazFilesParser):
    @classmethod
    def get_inflows_from_file(cls, inflows_file: File, power_plant_api: PowerPlantApi, first_oper_week: SemanaOperativa) -> List[WeeklyInflow]:
        file_content = inflows_file.read_content()

        inflows = []
        for file_line in file_content:
            line_data = file_line.split()
            num_inflows = len(line_data) - 2
            power_plant = power_plant_api.fetch_by_posto_rdh(line_data[1])

            for i in range(num_inflows):
                first_month_day = date(first_oper_week.year, first_oper_week.month, 1)
                op_week = SemanaOperativaFactory.create_for_relative_rv(first_month_day, i)

                inflows.append(WeeklyInflow(op_week, float(line_data[2 + i]), power_plant, None, None, None))
                # Não temos inflow_type, inflow_source e origin_type para os prevs, pois estão em arquivo.
                # Acredito que haja o prevs oficial e os das nossas rodadas. Mas a lógica de saber quem é quem está fora do arquivo.
                # Precisamos pensar como tratar.
        return inflows

    @classmethod
    def save_inflows_to_file(cls, inflows: List[WeeklyInflow], inflows_file: File, first_oper_week: SemanaOperativa):
        file_content = []

        op_weeks_for_prevs = [
            SemanaOperativaFactory.create_for_relative_rv(date(first_oper_week.year, first_oper_week.month, 1), i)
            for i in range(6)
        ]
        inflows = [i for i in inflows if i.op_week in op_weeks_for_prevs]

        groups = defaultdict(list)
        for i in inflows:
            key = f'{i.power_plant.id}'
            groups[key].append(i)

        n_line = 1
        for _, inflows in groups.items():
            inflows.sort(key=lambda x: x.op_week.end_date)

            posto_rdh = int(inflows[0].power_plant.posto_rdh)

            n_line_str = '{:6d}'.format(n_line)
            posto_rdh_str = '{:5d}'.format(posto_rdh)
            inflows_str = ''.join(['{:10d}'.format(round(i.value)) for i in inflows])

            file_content.append(
                f'{n_line_str}{posto_rdh_str}{inflows_str}'
            )
            n_line += 1
        file_content = '\n'.join(file_content)

        inflows_file.save_content(file_content)
