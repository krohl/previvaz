from __future__ import annotations

from abc import ABC, abstractmethod
from datetime import date, datetime
from typing import List

from chuva_vazao_utils.entities.inflow.inflow_source import InflowSourceApi
from chuva_vazao_utils.entities.inflow.inflow_type import InflowTypeApi
from chuva_vazao_utils.entities.inflow.origin_type import OriginTypeApi
from chuva_vazao_utils.entities.inflow.inflow_weekly import WeeklyInflow
from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.entities.previvaz.file_parsers import (
    PrevivazObservedInflowsFileParser, PrevivazForecastInflowsFileParser, PrevivazPluviaInflowsFileParser, PrevivazInputInflowsFileParser,
    PrevivazOutputInflowsFileParser, PrevsFileParser
)
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlantApi
from chuva_vazao_utils.entities.rain.rain_model import BaseRainModel
from chuva_vazao_utils.entities.smap.round import SmapRound
from chuva_vazao_utils.entities.apis.file import File


class PrevivazRound:
    id: int
    model: BaseRainModel
    oper_week: SemanaOperativa
    cpu_date: datetime

    def __init__(self, smap_round: SmapRound) -> None:
        self.id = smap_round.id
        self.model = smap_round.model
        self.oper_week = smap_round.oper_week
        self.cpu_date = smap_round.cpu_date

    @property
    def deck_date(self) -> date:
        return self.oper_week.round_date


class PrevivazDataApi(ABC):
    _power_plant_api: PowerPlantApi
    _inflow_type_api: InflowTypeApi
    _inflow_source_api: InflowSourceApi
    _origin_type_api: OriginTypeApi

    #
    # Vazões observadas
    #
    @classmethod
    @abstractmethod
    def get_observed_inflows_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_observed_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevivazObservedInflowsFileParser.get_inflows_from_file(
            inflows_file=cls.get_observed_inflows_file(previvaz_round),
            power_plant_api=cls._power_plant_api,
            inflow_type_api=cls._inflow_type_api,
            inflow_source_api=cls._inflow_source_api,
            origin_type_api=cls._origin_type_api
        )

    @classmethod
    def save_observed_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevivazObservedInflowsFileParser.save_inflows_to_file(
            inflows=inflows,
            inflows_file=cls.get_observed_inflows_file(previvaz_round)
        )

    #
    # Vazões previstas SMAP
    #
    @classmethod
    @abstractmethod
    def get_forecast_inflows_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_forecast_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevivazForecastInflowsFileParser.get_inflows_from_file(
            inflows_file=cls.get_forecast_inflows_file(previvaz_round),
            power_plant_api=cls._power_plant_api,
            inflow_type_api=cls._inflow_type_api,
            origin_type_api=cls._origin_type_api
        )

    @classmethod
    def save_forecast_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevivazForecastInflowsFileParser.save_inflows_to_file(
            inflows=inflows,
            inflows_file=cls.get_forecast_inflows_file(previvaz_round)
        )

    #
    # Vazões previstas Pluvia
    #
    @classmethod
    @abstractmethod
    def get_pluvia_inflows_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_pluvia_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevivazPluviaInflowsFileParser.get_inflows_from_file(
            inflows_file=cls.get_pluvia_inflows_file(previvaz_round),
            previvaz_round=previvaz_round
        )

    @classmethod
    def save_pluvia_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevivazPluviaInflowsFileParser.save_inflows_to_file(
            inflows=inflows,
            previvaz_round=previvaz_round,
            inflows_file=cls.get_pluvia_inflows_file(previvaz_round)
        )

    #
    # Arquivo vazões_entrada.txt
    #
    @classmethod
    @abstractmethod
    def get_input_inflows_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_input_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevivazInputInflowsFileParser.get_inflows_from_file(
            inflows_file=cls.get_input_inflows_file(previvaz_round),
            power_plant_api=cls._power_plant_api
        )

    @classmethod
    def save_input_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevivazInputInflowsFileParser.save_inflows_to_file(
            inflows=inflows,
            inflows_file=cls.get_input_inflows_file(previvaz_round)
        )

    #
    # Arquivo vazoes_saida
    #
    @classmethod
    @abstractmethod
    def get_output_inflows_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_output_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevivazOutputInflowsFileParser.get_inflows_from_file(
            inflows_file=cls.get_output_inflows_file(previvaz_round),
            power_plant_api=cls._power_plant_api
        )

    @classmethod
    def save_output_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevivazOutputInflowsFileParser.save_inflows_to_file(
            inflows=inflows,
            inflows_file=cls.get_output_inflows_file(previvaz_round)
        )

    #
    # Arquivo postos_saida.txt
    #
    @classmethod
    @abstractmethod
    def get_output_postos_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_output_postos(cls):
        raise NotImplementedError()  # A fazer no futuro, se necessário (tem que retornar lista de "Postos" e não de "WeeklyInflow")

    @classmethod
    def save_output_postos(cls):
        raise NotImplementedError()  # A fazer no futuro, se necessário

    #
    # Prevs
    #
    @classmethod
    @abstractmethod
    def get_prevs_file(cls, previvaz_round: PrevivazRound) -> File:
        raise NotImplementedError()

    @classmethod
    def get_prevs_inflows(cls, previvaz_round: PrevivazRound) -> List[WeeklyInflow]:
        return PrevsFileParser.get_inflows_from_file(
            inflows_file=cls.get_prevs_file(previvaz_round),
            power_plant_api=cls._power_plant_api,
            first_oper_week=previvaz_round.oper_week
        )

    @classmethod
    def save_prevs_inflows(cls, inflows: List[WeeklyInflow], previvaz_round: PrevivazRound):
        PrevsFileParser.save_inflows_to_file(
            inflows=inflows,
            inflows_file=cls.get_prevs_file(previvaz_round),
            first_oper_week=previvaz_round.oper_week
        )
