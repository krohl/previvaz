from typing import List
from datetime import date, timedelta
from collections import defaultdict

from chuva_vazao_utils.utils.dateutils import count_days, get_month_rvs, get_month_days, get_weekly_days
from chuva_vazao_utils.entities.ena.ena import Ena
from chuva_vazao_utils.database_access.ena.mlt import MltDatabaseApi
from chuva_vazao_utils.entities.ena.ena_monthly import MonthlyEna


class MonthlyEnaFactory:

    @classmethod
    def get_monthly_mean(cls, ena_list: List[Ena]) -> List[MonthlyEna]:
        result = []
        months = {x.time.month for x in ena_list}

        for month in months:
            ena_by_month = [x for x in ena_list if count_days(x.time - timedelta(6), x.time, month) > 0]

            groups = defaultdict(list)
            for ena in sorted(ena_by_month, key=lambda x: x.time):
                key = ena.power_plant.subsistema.id
                groups[key].append(ena)

            for ena_group in groups.values():
                id_subsystem = ena_group[0].power_plant.subsistema.id
                days = get_month_days(ena_group[0].time)
                monthly_mlt = MltDatabaseApi.fetch_by_month(month, id_subsystem)

                dates = sorted({x.time for x in ena_group})
                month_date_rvs = get_month_rvs(ena_group[0].time)

                if dates == month_date_rvs:
                    monthly_value = 0
                    for ena_date in dates:
                        ena_by_week = [x for x in ena_group if x.time == ena_date]
                        total_value = sum(ena.value for ena in ena_by_week)
                        n_days = get_weekly_days(ena_date, month)
                        monthly_value += (total_value * n_days) / days

                    result.append(MonthlyEna(
                        month=date(ena_group[0].time.year, ena_group[0].time.month, 1),
                        value=monthly_value,
                        subsystem=ena_group[0].power_plant.subsistema,
                        mlt=float(monthly_value) / float(monthly_mlt.valor),
                        inflow_source=ena_group[0].inflow_source,
                        origin=ena_group[0].origin,
                        id_rodada_smap=ena_group[0].id_rodada_smap
                    ))
        return result
