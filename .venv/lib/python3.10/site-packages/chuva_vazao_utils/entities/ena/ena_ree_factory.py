import datetime
import itertools
from typing import List

from chuva_vazao_utils.entities.ena.ena import Ena
from chuva_vazao_utils.entities.ena.ena_ree import EnaRee
from chuva_vazao_utils.database_access.ena.ena_ree import EnaReeDatabaseApi
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


class EnaReeFactory:

    @classmethod
    def get_ree_mean(cls, ena_list: List[Ena], power_plants: List[PowerPlant]) -> List[EnaRee]:
        ids_ree = sorted(list({p.reservatorio_eqv.id for p in power_plants if p.reservatorio_eqv is not None}))
        dates = sorted(list({ena.time for ena in ena_list}))
        result = []
        for id_ree, ena_date in itertools.product(ids_ree, dates):
            power_plants_by_reservatorio = [
                p for p in power_plants if p.reservatorio_eqv and p.reservatorio_eqv.id == id_ree
            ]
            ena_reservatorio_list = [
                e for e in ena_list
                if e.time == ena_date and
                e.power_plant.id in [
                    p.id for p in power_plants_by_reservatorio
                ]
            ]
            if ena_reservatorio_list:
                ena_value = sum(e.value for e in ena_reservatorio_list)
                ena_ree_params = {
                    'id_reservatorio_equivalente': id_ree,
                    'value': ena_value,
                    'start_date_week': (ena_date - datetime.timedelta(days=6)),
                    'end_date_week': ena_date,
                    'id_rodada_smap': ena_reservatorio_list[0].id_rodada_smap,
                }
                result.append(EnaReeDatabaseApi.from_dict(ena_ree_params))
        return result
