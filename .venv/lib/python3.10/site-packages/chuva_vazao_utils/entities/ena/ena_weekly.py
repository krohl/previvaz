from abc import ABC, abstractmethod
from typing import List, Union, Optional
from dataclasses import dataclass

from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant
from chuva_vazao_utils.entities.smap.round import SmapRound
from chuva_vazao_utils.entities.utils.data import WeeklyValue


@dataclass
class EnaWeekly(WeeklyValue):
    power_plant: PowerPlant
    origin: OriginType
    inflow_source: InflowSource
    id_rodada_smap: Optional[int] = None

    def to_dict(self):
        return {
            'id_power_plant': self.power_plant.id,
            'id_inflow_source': self.inflow_source.id,
            'id_origin_type': self.origin.id,
            'value': self.value,
            'op_week': self.op_week.week,
            'date': self.op_week.end_date,
            'id_rodada_smap': self.id_rodada_smap,
        }


class EnaWeeklyApi(ABC):
    @classmethod
    @abstractmethod
    def persist(cls, ena_vals: Union[EnaWeekly, List[EnaWeekly]], auto_commit: bool = True):
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_given_smap_round(cls, smap_round: SmapRound) -> List[EnaWeekly]:
        raise NotImplementedError()
