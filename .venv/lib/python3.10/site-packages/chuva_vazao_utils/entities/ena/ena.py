from abc import ABC, abstractclassmethod
from typing import List, Union, Optional
from dataclasses import dataclass

from chuva_vazao_utils.entities.utils.data import TimeValue
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@dataclass
class Ena(TimeValue):
    power_plant: PowerPlant
    origin: OriginType
    inflow_source: InflowSource
    id_rodada_smap: Optional[int] = None

    def to_dict(self):
        return {
            'id_power_plant': self.power_plant.id,
            'id_inflow_source': self.inflow_source.id if self.inflow_source else None,
            'id_origin_type': self.origin.id if self.origin else None,
            'value': self.value,
            'date': self.time.date(),
            'id_rodada_smap': self.id_rodada_smap,
        }


class EnaApi(ABC):

    @abstractclassmethod
    def persist_ena(cls, ena_vals: Union[Ena, List[Ena]], auto_commit: bool = True):
        raise NotImplementedError()
