from typing import List, Union
from datetime import date
from chuva_vazao_utils.entities.ena.ena import Ena

from chuva_vazao_utils.exceptions import InflowNotFound
from chuva_vazao_utils.calculator.calculation import EnaCalculation, sort_by_priority, filter_calculation
from chuva_vazao_utils.calendar.interval_type import IntervalType
from chuva_vazao_utils.entities.inflow.inflow import Inflow
from chuva_vazao_utils.database_access.ena.ena import EnaDatabaseApi
from chuva_vazao_utils.calculator.ena_calculator import EnaCalculator
from chuva_vazao_utils.calculator.calculation_type import CalculationType
from chuva_vazao_utils.entities.inflow.inflow_weekly import WeeklyInflowFactory
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


class EnaFactory:

    @classmethod
    def calculate(cls, inflows: List[Inflow], power_plants: List[PowerPlant], calculation_types: Union[CalculationType, List[CalculationType]], interval_type: IntervalType, id_rodada_smap: Union[int, None]) -> List[Ena]:
        dates = list({i.time for i in inflows})
        if interval_type == IntervalType.WEEKLY:
            inflows = WeeklyInflowFactory.get_op_week_mean(inflows)
            dates = list({i.op_week.end_date for i in inflows})

        inflow_dicts = [x.to_dict() for x in inflows]

        ena_list = []
        ena_calculation_types = calculation_types if isinstance(calculation_types, list) else [calculation_types]
        for ena_calculation_type in ena_calculation_types:
            for power_plant in sort_by_priority(power_plants, ena_calculation_type):
                ena_calculator = EnaCalculator(power_plant.id, inflow_dicts, interval_type)

                calculation = filter_calculation(power_plant.id, ena_calculation_type)
                power_plant_ena = cls.calculate_power_plant_ena(
                    ena_calculator, dates, power_plant, calculation, id_rodada_smap
                )
                ena_list.extend(power_plant_ena)
                inflow_dicts = ena_calculator.inflows
        return ena_list

    @classmethod
    def calculate_power_plant_ena(cls, ena_calculator: EnaCalculator, dates: List[date], power_plant: PowerPlant, calculation: EnaCalculation, id_rodada_smap: Union[int, None]) -> List[Ena]:
        ena_list = []
        for inflow_date in dates:
            try:
                ena_value = ena_calculator.eval(calculation.calculation, inflow_date)
            except InflowNotFound:
                continue

            if ena_value is not None:
                params = {
                    'id_power_plant': power_plant.id,
                    'value': ena_value,
                    'date': inflow_date,
                    'id_rodada_smap': id_rodada_smap,
                }
                ena = EnaDatabaseApi.from_dict(params)
                ena_list.append(ena)
        return ena_list
