from abc import ABC, abstractmethod
from typing import List, Union
from dataclasses import dataclass

from chuva_vazao_utils.entities.utils.data import WeeklyValue
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.subsystem.subsytem import Subsystem
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource


@dataclass
class EnaWeeklySubsystem(WeeklyValue):
    subsystem: Subsystem
    origin: OriginType
    inflow_source: InflowSource

    def to_dict(self):
        return {
            'id_subsistema': self.subsystem.id,
            'id_inflow_source': self.inflow_source.id,
            'id_origin_type': self.origin.id,
            'value': self.value,
            'op_week': self.op_week.week,
            'date': self.op_week.end_date,
        }


class EnaWeeklySubsystemApi(ABC):
    @classmethod
    @abstractmethod
    def persist(cls, ena_vals: Union[EnaWeeklySubsystem, List[EnaWeeklySubsystem]], auto_commit: bool = True):
        raise NotImplementedError()
