from abc import ABC, abstractmethod
from typing import List, Union, Optional
from dataclasses import dataclass

from chuva_vazao_utils.entities.utils.data import MonthlyValue
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.subsystem.subsytem import Subsystem
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource


@dataclass
class MonthlyEna(MonthlyValue):
    subsystem: Subsystem
    mlt: float
    origin: OriginType
    inflow_source: InflowSource
    id_rodada_smap: Optional[int] = None

    def to_dict(self):
        return {
            'id_subsistema': self.subsystem.id,
            'mlt': self.mlt,
            'value': self.value,
            'month': self.month,
            'id_origin_type': self.origin.id,
            'id_inflow_source': self.inflow_source.id,
            'id_rodada_smap': self.id_rodada_smap,
        }


class MonthlyEnaApi(ABC):
    @classmethod
    @abstractmethod
    def persist(cls, ena_vals: Union[MonthlyEna, List[MonthlyEna]], auto_commit: bool = True):
        raise NotImplementedError()
