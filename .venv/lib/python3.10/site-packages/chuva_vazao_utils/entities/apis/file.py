from __future__ import annotations

import os

from abc import ABC, abstractmethod, abstractproperty
from dataclasses import dataclass
from datetime import datetime
from typing import List, Union


@dataclass
class Folder(ABC):
    base_path: str

    @abstractmethod
    def exists(self) -> bool:
        raise NotImplementedError()

    @abstractmethod
    def download(self):
        raise NotImplementedError()

    @abstractmethod
    def upload(self):
        raise NotImplementedError()

    @abstractmethod
    def delete(self):
        raise NotImplementedError()

    @abstractmethod
    def list_contents(self) -> List[Union[Folder, File]]:
        raise NotImplementedError()

    @abstractmethod
    def get_oldest_file_datetime(self) -> datetime:
        raise NotImplementedError()

    @abstractmethod
    def get_newest_file_datetime(self) -> datetime:
        raise NotImplementedError()

    @abstractmethod
    def copy_contents_from(self, src_folder: Folder):
        """Copies contents from src_folder to this folder"""
        raise NotImplementedError()


@dataclass
class File(ABC):
    base_path: str
    filename: str

    @property
    def filepath(self) -> str:
        return os.path.join(self.base_path, self.filename)

    @abstractproperty
    def folder(self) -> Folder:
        raise NotImplementedError()

    @abstractmethod
    def exists(self) -> bool:
        raise NotImplementedError()

    @abstractmethod
    def read_content(self) -> Union[List[str], None]:
        raise NotImplementedError()

    @abstractmethod
    def save_content(self, local_filepath: str):
        raise NotImplementedError()

    @abstractmethod
    def delete(self):
        raise NotImplementedError()

    @abstractmethod
    def copy_from(self, src_file: File):
        """Copies src_file to this filepath"""
        raise NotImplementedError()
