from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List, Union

from chuva_vazao_utils.entities.utils.abs_dataclass import AbstractDataclass


@dataclass(eq=True, frozen=True)
class ChVzEntity(AbstractDataclass):
    _id: int

    def __hash__(self) -> int:
        return hash(self._id)

    def __eq__(self, other: ChVzEntity) -> bool:
        return isinstance(other, self.__class__) and self._id == other._id


class ChVzEntityApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls) -> List[ChVzEntity]:
        raise NotImplementedError()

    @classmethod
    def fetch_by_id(cls, id: int) -> Union[List[ChVzEntity], None]:
        entities = cls.fetch_all()
        return next((e for e in entities if e._id == id), None)


@dataclass(eq=True, frozen=True)
class EntityWithName(ChVzEntity, AbstractDataclass):
    name: str


class EntityWithNameApi(ChVzEntityApi, ABC):
    @classmethod
    def fetch_by_name(cls, name: str) -> Union[List[EntityWithName], None]:
        entities: List[EntityWithName] = cls.fetch_all()
        return next((e for e in entities if e.name == name), None)
