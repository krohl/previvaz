from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, datetime
from typing import Optional

from chuva_vazao_utils.entities.apis.file import Folder
from chuva_vazao_utils.entities.operative_week import SemanaOperativa
from chuva_vazao_utils.entities.rain.rain_model import BaseRainModel
from chuva_vazao_utils.utils.dateutils import get_now


@dataclass(eq=True)
class SmapRound:
    config_id: int
    model: BaseRainModel
    oper_week: SemanaOperativa
    flag_acomph: bool
    flag_manual: bool
    id: Optional[int] = -1
    cpu_date: Optional[datetime] = get_now()

    @property
    def deck_date(self) -> date:
        return self.oper_week.round_date


class SmapRoundApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_round_by_id(cls, id: int) -> SmapRound:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def last_round_id(cls) -> int:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def persist_round(cls, round: SmapRound) -> int:
        """Saves SmapRound on db and return its generated id

        Args:
            round (SmapRound): Rodada Smap a ser persistida

        Returns:
            int: id da rodada criada
        """
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def delete_by_id(cls) -> None:
        raise NotImplementedError()


class SmapRoundDataApi(ABC):
    @classmethod
    @abstractmethod
    def get_deck_folder(cls, smap_round: SmapRound) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def get_smap_output_folder(cls, smap_round: SmapRound) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def get_post_processing_output_folder(cls, smap_round: SmapRound) -> Folder:
        raise NotImplementedError()
