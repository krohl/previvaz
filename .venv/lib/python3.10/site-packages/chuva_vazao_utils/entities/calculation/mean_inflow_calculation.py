from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, timedelta
from typing import Union

from chuva_vazao_utils.utils.logger import logger
from chuva_vazao_utils.entities.inflow.inflow import Inflow, InflowApi, InflowSource, InflowType, OriginType
from chuva_vazao_utils.entities.calculation.calculation import Calculation
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant
from chuva_vazao_utils.entities.utils.data import TimeSeries


@dataclass
class MeanInflowCalculation(Calculation):
    _input_power_plant: PowerPlant
    _input_inflow_type: InflowType
    _input_inflow_source: InflowSource
    _input_origin_type: OriginType
    _num_days: int
    _output_inflow_type: InflowType
    _output_inflow_source: InflowSource
    _output_origin_type: OriginType
    _inflow_api: InflowApi

    def eval(self, inflow_date_to_calculate: date) -> Union[Inflow, None]:
        logger.info(f'Evaluating MeanInflowCalculation for date: {inflow_date_to_calculate}.\n{self}')

        end_date = inflow_date_to_calculate - timedelta(days=1)
        begin_date = inflow_date_to_calculate - timedelta(days=self._num_days)
        inflows = self._inflow_api.fetch_between_dates(
            begin_date, end_date, self._input_power_plant, self._input_inflow_type, self._input_inflow_source, self._input_origin_type
        )

        if not inflows:
            logger.error(f'Erro ao calcular MeanInflowCalculation. Não foram encontrados dados de vazão. \n{self}')
            return

        mean_inflow = TimeSeries(inflows).mean_values()
        return Inflow(
            time=inflow_date_to_calculate,
            value=mean_inflow,
            power_plant=self._output_power_plant,
            inflow_type=self._output_inflow_type,
            source=self._output_inflow_source,
            origin=self._output_origin_type,
        )


class MeanInflowCalculationApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls):
        raise NotImplementedError()
