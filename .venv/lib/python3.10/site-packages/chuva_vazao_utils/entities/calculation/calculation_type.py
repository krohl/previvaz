from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum, unique
from typing import List


@unique
class CalculationTypeMenu(Enum):
    ENA_DAILY = 1
    INFLOW_PREVIVAZ = 2
    INFLOW_PREVS = 3
    INFLOW_OBSERVED = 4
    INFLOW_RETRO_ADJUSTED = 5
    INFLOW_POST_PROCESSING_PROPAGATED = 6
    INFLOW_VIA_ACOMPH = 7
    PRECIPITATION_SOURCES_PRIORITY = 8
    EARM = 9
    ENA_WEEKLY_REE = 10
    EARM_MAX = 11
    INFLOW_MEAN_LAST_DAYS = 12


@dataclass
class CalculationType:
    id: int
    name: str


class CalculationTypeApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls) -> List[CalculationType]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_id(cls) -> CalculationType:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_name(cls) -> CalculationType:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_inflow_type(cls, model: CalculationTypeMenu) -> CalculationType:
        raise NotImplementedError()
