from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import List

from chuva_vazao_utils.entities.calculation.calculation_type import CalculationTypeMenu
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@dataclass
class Calculation(ABC):
    _output_power_plant: PowerPlant

    @abstractmethod
    def eval(self):
        raise NotImplementedError()


class CalculationApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all_given_type(cls, type: CalculationTypeMenu) -> List[Calculation]:
        raise NotImplementedError()


@dataclass
class CalculationWithoutEval(Calculation):
    """Classe para que seja instanciada qualquer calculation buscada na base de dados.
    À medida em que formos trazendo os calculations para a nova arquitetura, devemos ir criando subclasses de Calculation e criando seus 'eval'.
    (Como no exemplo da mean_inflow_calculation.py, contida neste diretório)
    """
    _calc_dict: dict
    _type_id: int

    def eval(self):
        raise NotImplementedError('Tentativa de cálculo, mas tipo de cálculo ainda não implementado na chuvaVazaoUtils.\n'
                                  f'Cálculo: {self}')
