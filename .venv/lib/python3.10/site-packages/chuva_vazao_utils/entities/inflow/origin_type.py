from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from typing import List, Union


class OriginTypeMenu(Enum):
    """IDs das origens de dados de vazão (os mesmos IDs devem estar na base, pois eles serão utilizados nas queries)"""
    TELEMETRIA_ANA = 1
    UPLOAD_FERRAMENTA = 2
    LAMBDA_ONS = 3
    AIRFLOW = 4
    UPLOAD_MANUAL = 5
    ACOMPH = 6
    COPEL = 7
    ITAIPU = 8
    POS_PROCESSAMENTO = 9
    PLUVIA = 10
    PDP_AUTOMATICO = 11
    RETROALIMENTACAO_SMAP = 12
    HIDROLOGIA_API_ONS = 13
    AJUSTES_RETROALIMENTACAO = 15
    CALCULO_ACOMPH = 16
    CPINS = 17
    MANUAL = 18
    RDH = 19
    PREVIVAZ = 20
    UPLOAD_EARM = 21
    PROJECAO_EARM = 22
    IPDO = 23


@dataclass
class OriginType:
    id: str
    name: str


class OriginTypeApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls) -> List[OriginType]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_id(cls) -> Union[OriginType, None]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_name(cls) -> Union[OriginType, None]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_origin_type(cls, inflow_origin: OriginTypeMenu) -> Union[OriginType, None]:
        raise NotImplementedError()
