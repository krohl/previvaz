from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, datetime
from typing import List, Union

from chuva_vazao_utils.entities.utils.data import TimeValue
from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@dataclass
class Inflow(TimeValue):
    power_plant: PowerPlant
    inflow_type: InflowType
    source: InflowSource
    origin: OriginType
    id: Union[int, None] = None
    round_id: Union[int, None] = None

    def to_dict(self):
        return {
            'id_power_plant': self.power_plant.id,
            'id_inflow_source': self.source.id if self.source else None,
            'id_origin_type': self.origin.id,
            'id_type_inflow': self.inflow_type.id,
            'value': self.value,
            'inflow_date': self.time
        }

    def __repr__(self) -> str:
        return f'Inflow(pp: {self.power_plant.name}; inflow_type: {self.inflow_type.name}; source: {self.source.name}; origin: {self.origin.name}; '\
            f'data: {self.time.strftime("%Y-%m-%d %H:%M:%S")}; valor: {self.value}.)'


class InflowApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_between_dates(
        cls,
        begin_date: datetime,
        end_date: datetime,
        power_plants: Union[PowerPlant, List[PowerPlant]] = -1,
        inflow_type: Union[InflowType, None] = -1,
        inflow_source: Union[InflowSource, None] = -1,
        origin_type: Union[OriginType, None] = -1,
        round_id: Union[int, None] = -1
    ) -> List[Inflow]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def persist_inflows(cls, inflows: Union[Inflow, List]):
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def end_inflows_validity(cls, inflows: Union[Inflow, List]):
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def check_inflow_origin_was_loaded_on_date(cls, inflow_origin: OriginType, data_date: date) -> bool:
        """Returns true if inflow data was loaded on the given date

        Args:
            inflow_origin (OriginType): OriginType to be checked
            date (date): date to be checked

        Returns:
            bool: True if inflow data was loaded on the given date
        """
        raise NotImplementedError()
