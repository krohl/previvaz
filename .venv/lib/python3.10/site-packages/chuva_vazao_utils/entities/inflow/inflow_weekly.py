from __future__ import annotations

from typing import List
from collections import defaultdict
from dataclasses import dataclass

from chuva_vazao_utils.entities.inflow.inflow_source import InflowSource
from chuva_vazao_utils.entities.utils.data import TimeSeries, WeeklyValue
from chuva_vazao_utils.entities.inflow.inflow import Inflow
from chuva_vazao_utils.entities.inflow.inflow_type import InflowType
from chuva_vazao_utils.entities.inflow.origin_type import OriginType
from chuva_vazao_utils.entities.power_plant.power_plant import PowerPlant


@dataclass
class WeeklyInflow(WeeklyValue):
    power_plant: PowerPlant
    inflow_type: InflowType
    origin: OriginType
    source: InflowSource

    def to_dict(self):
        return {
            'id_power_plant': self.power_plant.id,
            'id_inflow_source': self.source.id if self.source else None,
            'id_origin_type': self.origin.id,
            'id_type_inflow': self.inflow_type.id,
            'value': self.value,
            'inflow_date': self.op_week.end_date
        }


class WeeklyInflowFactory:
    @classmethod
    def get_op_week_mean(cls, inflows: List[Inflow], calc_only_full_weeks: bool = True) -> List[WeeklyInflow]:
        groups = defaultdict(list)
        for i in inflows:
            key = f'{i.power_plant.id}_{i.operative_week.week}_{i.origin.id}_{i.inflow_type.id}'
            groups[key].append(i)

        if calc_only_full_weeks:
            groups_copy = groups.copy()
            groups = defaultdict(list, {k: v for k, v in groups_copy.items() if len(v) == 7})
            if not groups:
                groups = defaultdict(list, {k: v for k, v in groups_copy.items() if len(v) == 1})

        return [
            WeeklyInflow(
                op_week=inflows[0].operative_week,
                value=TimeSeries(inflows).mean_values(),
                power_plant=inflows[0].power_plant,
                inflow_type=inflows[0].inflow_type,
                origin=inflows[0].origin,
                source=inflows[0].source,
            )
            for _, inflows in groups.items()
        ]
