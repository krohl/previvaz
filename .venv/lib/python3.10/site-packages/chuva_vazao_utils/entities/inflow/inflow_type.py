from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import Enum
from typing import List, Union


class InflowTypeMenu(Enum):
    """IDs das dos tipos de vazão (os mesmos IDs devem estar na base, pois eles serão utilizados nas queries)"""
    VIA = 1
    VMD = 2
    VNA = 3
    VNM = 4
    VNS = 5
    CALCULADO = 6
    VIP = 7
    VAR = 8
    VMS = 9
    VAFLU = 10
    VDEFLU = 11
    VVERT = 12
    VAZAO_INCREMENTAL_AJUSTADA = 13
    MEDIA_SEMANAL = 14
    MEDIA_DIARIA = 15
    VAZAO_LONGO_PRAZO = 16


@dataclass
class InflowType:
    id: int
    name: str


class InflowTypeApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_all(cls) -> List[InflowType]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_id(cls) -> Union[InflowType, None]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_by_name(cls) -> Union[InflowType, None]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_inflow_type(cls, inflow_type: InflowTypeMenu) -> Union[InflowType, None]:
        raise NotImplementedError()
