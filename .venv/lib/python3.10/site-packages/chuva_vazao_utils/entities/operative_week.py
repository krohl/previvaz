from __future__ import annotations

import calendar
from abc import ABC, abstractmethod
from datetime import date, timedelta
from functools import lru_cache
from dataclasses import dataclass

from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar
from chuva_vazao_utils.entities.exception import SemanaOperativaDoNotExist
from chuva_vazao_utils.utils.dateutils import parse_date


@dataclass
class SemanaOperativa:
    """Representa o conceito de Semana Operativa.

    - A semana operativa começa sempre em um sábado e termina na sexta-feira seguinte.
    - A ela se associada uma data de rodada `round_date`, usualmente na quinta-feira anterior ao começo da semana operativa (essa data pode variar,
    dependendo da presença de feriados na semana)
    - O último dia de uma Semana Operativa define a qual mês ela pertence. Se a semana operativa começa no mês de fevereiro, mas termina no mês de
    março, ela pertence ao mês de março.
    - Há um identificador das semanas operativas, no seguinte formato: 2023031, 2023032, 2023033, ... Ele apresenta o ano, mês e um número associado
    à semana operativa que indica sua 'posição no mês' (a primeira Semana Operativa do mês recebe 'posição no mês' = 1)
    - Há ainda o indicador chamada 'rev'. A primeira Semana Operativa do mês recebe valor 0, sendo a rev0 do mês.
    """

    ref_date: date
    _chvz_calendar: ChuvaVazaoCalendar

    FIRST_WEEKDAY = calendar.SATURDAY

    def __lt__(self, other: SemanaOperativa):
        return self.end_date < other.end_date

    def __eq__(self, other: SemanaOperativa):
        return self.end_date == other.end_date

    @property
    def begin_date(self) -> date:
        """Data do primeiro dia da semana operativa (semanas operativas começam no sábado)

        Returns:
            date: Data do primeiro dia da semana operativa
        """
        _, rv_date = self._chvz_calendar.get_rv(parse_date(self.ref_date).date())
        return rv_date - timedelta(days=6)

    @property
    def end_date(self) -> date:
        """Data do último dia da semana operativa (semanas operativas terminam na sexta-feira)

        Returns:
            date: Data do último dia da semana operativa
        """
        _, rv_date = self._chvz_calendar.get_rv(parse_date(self.ref_date).date())
        return rv_date

    @property
    def round_date(self) -> date:
        """Data do deck que prevê dados para esta semana operativa. É a data da rodada anterior ao início da semana operativa.
        Por exemplo: A segunda semana operativa de um mês, tem data deck na primera semana daquele mesmo mês. A rodada que ocorre
        na primeira semana faz previsões para a segunda semana.

        Returns:
            date: Data do deck que prevê esta semana operativa
        """
        return self._chvz_calendar.get_previous_round_date(self.begin_date)

    @property
    def num_rev(self) -> int:
        """Número da rev da semana operativa dentro do mês

        Returns:
            int: Número da rev da semana operativa dentro do mês
        """
        n_rv, _ = self._chvz_calendar.get_rv(self.begin_date)
        return n_rv

    @property
    def year(self) -> int:
        """Ano do qual a semana operativa faz parte (uma semana operativa que se inicie no ano 1 e termine no ano 2, faz parte do ano 2)

        Returns:
            int: ano da semana operativa
        """
        return self.end_date.year

    @property
    def month(self) -> int:
        """Mês do qual a semana operativa faz parte (uma semana operativa que se inicie no mês 1 e termine no mês 2, faz parte do mês 2)

        Returns:
            int: mês da semana operativa
        """
        return self.end_date.month

    @property
    def week(self) -> str:
        """Retorna um identificador da semana operativa (atualmente usado nos paths do S3).
        Formato: YYYYMMx, onde x é o número da semana operativa no mês
        Exemplo: 2022121: Primeira semana operativa do mês de dezembro de 2022 (corresponde à rv0).

        Returns:
            str: identificador da semana operativa. Formato: YYYYMMx, onde x é o número da semana operativa no mês

        """
        return self.end_date.strftime(f'%Y%m{self.num_rev+1}')

    @property
    def n_week(self) -> int:
        """Retorna o número da semana no ano

        Returns:
            int: número da semana no ano
        """
        return self._chvz_calendar.get_n_week(self.end_date)

    def next(self) -> SemanaOperativa:
        """Retorna a próxima SemanaOperativa

        Returns:
            SemanaOperativa: Próxima semana operativa
        """
        return SemanaOperativaFactory.create_from_date(self.end_date + timedelta(days=1))


class SemanaOperativaFactory:
    @classmethod
    @lru_cache(maxsize=8)
    def chvz_calendar(cls, year: int) -> ChuvaVazaoCalendar:
        return ChuvaVazaoCalendar(year, CalendarType.CALENDAR_ONS)

    @classmethod
    def create_from_date(cls, ref_date: date) -> SemanaOperativa:
        """Dada uma data, instancia a semana operativa à qual esta data pertence

        Args:
            ref_date (date): data de referência para definição da semana operativa.
                             será instanciada a semana operativa à qual esta data pertence.
        """
        return SemanaOperativa(ref_date, cls.chvz_calendar(ref_date.year))

    @classmethod
    def create_from_deck_date(cls, deck_date: date) -> SemanaOperativa:
        return cls.create_for_relative_rv(deck_date, 1)

    @classmethod
    def create_for_relative_rv(cls, ref_date: date, relative_rv: int) -> SemanaOperativa:
        """Creates an instance of `SemanaOperativa` given one reference date and its relative rv

        Args:
            ref_date (date): reference date
            relative_rv (int): represents rv+X rev, where X is the input `relative_rv`
        """
        first_op_week_date = ref_date
        for _ in range(relative_rv):
            first_op_week_date = ChuvaVazaoCalendar.get_next_weekday(first_op_week_date, SemanaOperativa.FIRST_WEEKDAY)

        return cls.create_from_date(first_op_week_date)

    @classmethod
    def create_from_year_month_rv(cls, year: int, month: int, num_rev: int) -> SemanaOperativa:
        ref_date = date(year=year, month=month, day=1)
        sman_oper = cls.create_for_relative_rv(ref_date, num_rev)
        if sman_oper.month != month or sman_oper.year != year:
            raise SemanaOperativaDoNotExist(year, month, num_rev)

        return sman_oper

    @classmethod
    def create_from_year_n_week(cls, year: int, n_week: int) -> SemanaOperativa:
        return cls.create_for_relative_rv(date(year, 1, 1), n_week - 1)


class SemanaOperativaApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_by_id(cls, id: int) -> SemanaOperativa:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_id_given_semana_operativa(cls, op_week: SemanaOperativa) -> int:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_id_given_date(cls, ref_date: date) -> int:
        raise NotImplementedError()
