from __future__ import annotations

from abc import ABC, abstractmethod
from dataclasses import dataclass
from datetime import date, datetime
from typing import Union

from chuva_vazao_utils.aws.s3.s3_models import File, Folder
from chuva_vazao_utils.entities.operative_week import SemanaOperativa


@dataclass(eq=True, order=True)
class RemviesRound:
    id: int
    input: dict
    id_remvies_config: int
    base_date: date
    cpu_date: datetime
    _files_api: RemviesRoundFilesApi

    @property
    def decks_folder(self) -> Folder:
        return self._files_api.decks_folder(self)

    @property
    def output_base_folder(self) -> Folder:
        return self._files_api.output_base_folder(self)


class RemviesRoundApi(ABC):
    @classmethod
    @abstractmethod
    def fetch_round_by_id(cls, id: int) -> RemviesRound:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def fetch_round_before(cls, ref_round_id: int) -> Union[RemviesRound, None]:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def last_round_given_base_date(cls, base_date: int) -> RemviesRound:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def persist_round(cls, round: RemviesRound) -> int:
        """Saves RemviesRound on db and return its generated id

        Args:
            round (RemviesRound): Rodada Smap a ser persistida

        Returns:
            int: id da rodada criada
        """
        raise NotImplementedError()


class RemviesRoundFilesApi(ABC):
    @classmethod
    @abstractmethod
    def decks_folder(cls, remvies_round: RemviesRound) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def deck_file(cls, remvies_round: RemviesRound, op_week: SemanaOperativa) -> File:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def output_base_folder(cls, remvies_round: RemviesRound) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def output_folder_op_week(cls, remvies_round: RemviesRound, op_week: SemanaOperativa) -> Folder:
        raise NotImplementedError()

    @classmethod
    @abstractmethod
    def output_file_op_week(cls, remvies_round: RemviesRound, op_week: SemanaOperativa, data_date: date) -> File:
        raise NotImplementedError()
