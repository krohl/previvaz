from typing import List, Union
from datetime import date, datetime, timedelta

import pytz
from dateutil.relativedelta import relativedelta

from chuva_vazao_utils.calendar.chuva_vazao_calendar import CalendarType, ChuvaVazaoCalendar

TZ = pytz.timezone('America/Sao_Paulo')


def get_now() -> datetime:
    return datetime.now(tz=TZ)


def get_today() -> date:
    return get_now().date()


def parse_date(reference_date: Union[str, date, datetime]) -> datetime:
    if isinstance(reference_date, str):
        formats = [
            '%Y-%m-%dT%H:%M:%S.%f%z', '%Y-%m-%dT%H:%M:%S', '%Y-%m-%d'
        ]
        for fmt in formats:
            try:
                return datetime.strptime(reference_date, fmt)
            except ValueError:
                continue

        raise ValueError('Datetime format not found')
    if isinstance(reference_date, date):
        return datetime(
            year=reference_date.year,
            month=reference_date.month,
            day=reference_date.day
        )

    if isinstance(reference_date, datetime):
        return reference_date

    else:
        raise TypeError


def count_days(start_dt: date, end_dt: date, month: int = None):
    n_day = 0
    while start_dt <= end_dt:
        to_count = bool(month is not None and start_dt.month == month or month is None)
        if to_count:
            n_day += 1
        start_dt = start_dt + timedelta(days=1)
    return n_day


def get_month_days(ref_date: date) -> int:
    year = ref_date.year
    month = ref_date.month

    start_month = date(year, month, 1)
    start_nxt = start_month + relativedelta(months=1)
    end_month = start_nxt - timedelta(days=1)

    return (end_month - start_month).days + 1


def get_weekly_days(ref_date: date, month=None) -> int:
    year = ref_date.year
    if month is None:
        month = ref_date.month

    calendar_type = CalendarType.SIMPLE
    simple_calendar = ChuvaVazaoCalendar(year, calendar_type)
    _, rv_date = simple_calendar.get_rv(ref_date)
    start_rv = rv_date - timedelta(days=6)
    return count_days(start_rv, rv_date, month)


def daterange(start_date: date, end_date: date):
    for n in range(int((end_date - start_date).days)):
        yield start_date + timedelta(n)


def get_month_rvs(ref_date: date) -> List[date]:
    year = ref_date.year
    month = ref_date.month

    start_month = date(year, month, 1)
    start_nxt = start_month + relativedelta(months=2)

    calendar_type = CalendarType.SIMPLE
    simple_calendar = ChuvaVazaoCalendar(year, calendar_type)

    rvs = []
    for date_ in daterange(start_month, start_nxt):
        _, rv_date = simple_calendar.get_rv(date_)
        start_rv = rv_date - timedelta(days=6)

        if get_weekly_days(start_rv, month) > 0:
            rvs.append(rv_date)

    return sorted(list(set(rvs)))
